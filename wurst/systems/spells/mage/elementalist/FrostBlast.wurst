package FrostBlast

import ClosureEvents
import ClosureTimers
import AbilityObjEditing
import OverCharge
import Assets
import Fx
import ObjectIdGenerator
import ChatCommands
import GameConfig
import ClosureForGroups

constant let ABILITY_ID = 'ESFB'
constant let DUMMY_ID = compiletime(UNIT_ID_GEN.next())
constant let COOLDOWN = 40.  
constant let MISSILE_SPEED = 1000.  
constant let MISSILE_LIFETIME = 1.4  
constant let MANACOST = 15
constant let IMPACT_TRIGGER_AOE = 150.
constant let MISSILE_FLY_HEIGHT = 50.
constant let IMPACT_EFFECT_AOE = 280.
constant let IMPACT_EFFECT_DAMAGE = 25.
constant let SPAWN_OFFSET_DISTANCE = 50.
constant let LOOP_INTERVAL = 0.03125
constant let SPELL_ICON = Icons.bTNFrostBolt
constant let PROJECTILE_EFFECT_PATH = "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl"
constant let TOOLTIP_NORM = "|c00ffcc00E|r - Frost Blast"
constant let TOOLTIP_EXT = "Shoots out a missile of frost that explodes on impact, dealing 25 - 60 damage and rooting for 0.5 - 4 seconds increasing with distance travelled."

@compiletime function createSpell()
    new AbilityDefinitionIllidanChannel(ABILITY_ID)
    ..setTargetType(1, 0)
    ..setAnimationNames("")
    ..setArtCaster("")
    ..setArtEffect("")
    ..setArtTarget("")
    ..setArtSpecial("")
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(1)
    ..setButtonPositionResearchX(0)
    ..setButtonPositionResearchY(1)
    ..setIconNormal(SPELL_ICON)
    ..setIconResearch(SPELL_ICON)
    ..setIconTurnOff(SPELL_ICON)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setHotkeyNormal("E")
    ..setName("Frost Blast")
    ..setDisableOtherAbilities(1, false)
    ..setFollowThroughTime(1, 0)
    ..setCastingTime(1, 0)
    ..setTooltipNormal(1, TOOLTIP_NORM)
    ..setTooltipNormalExtended(1, TOOLTIP_EXT)
    ..setBaseOrderID(1, "bearform")
    ..setOrderStringUseTurnOn("bearform")
    ..setOrderStringActivate("bearform")
    ..setOrderStringDeactivate("bearform")
    ..setOrderStringTurnOff("bearform")
    ..setOptions(1, 1)
    ..setCooldown(1, COOLDOWN)
    ..setManaCost(1, MANACOST)
    ..setTargetType(1, 3)

function onCast()
    let caster = GetSpellAbilityUnit()
    let casterPos = caster.getPos()
    let targetX = GetSpellTargetX()
    let targetY = GetSpellTargetY()
    let targetPos = vec2(targetX, targetY)
    let targetAngle = casterPos.angleTo(targetPos)
    spawnProjectile(caster, targetAngle)

function spawnProjectile(unit caster, angle ang)
    let casterPos = caster.getPos()
    let spawnPos = casterPos.polarOffset(ang, SPAWN_OFFSET_DISTANCE)
    //var efx = addEffect(PROJECTILE_EFFECT_PATH, spawnPos.withTerrainZ(MISSILE_FLY_HEIGHT))
    var projectile = new Fx(spawnPos.withTerrainZ(MISSILE_FLY_HEIGHT), ang, PROJECTILE_EFFECT_PATH)
    projectile.setScale(1.5)

    doPeriodicallyTimed(LOOP_INTERVAL, MISSILE_LIFETIME) updateLoop ->
        if (updateLoop.isLast())
            doImpactExplosion(caster, projectile.getPos2())
            destroy projectile
        else
            let newPos = projectile.getPos2().polarOffset(projectile.getXYAngle(), MISSILE_SPEED * LOOP_INTERVAL)
            projectile.setXYZ( newPos.withTerrainZ(MISSILE_FLY_HEIGHT))
            forUnitsInRange(newPos, IMPACT_TRIGGER_AOE) u ->
                if isValidTarget(caster, u)
                    updateLoop.stop()

function doImpactExplosion(unit caster, vec2 pos)
    //flashEffect(path, pos)
    forUnitsInRange(pos, IMPACT_EFFECT_AOE) u ->
        if isValidTarget(caster, u)
            caster.damageTarget(u, IMPACT_EFFECT_DAMAGE, ATTACK_TYPE_NORMAL)


function isValidTarget(unit caster, unit target) returns bool
    return target.getOwner().isEnemyOf(caster.getOwner()) and not target.isInvulnerable() and not target.isType(UNIT_TYPE_FLYING) and target.isAlive() and not target.isHidden()
        

init
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())

    registerCommandAll("fblast") (triggerPlayer, args) ->
        if (gameConfig.isTestModeEnabled())
            printTimedToPlayer("Added frost blast to any selected heroes", 5., triggerPlayer)
            forUnitsSelected(triggerPlayer) u ->
                if (u.isType(UNIT_TYPE_HERO))
                    u.addAbility(ABILITY_ID)
        else
            printTimedToPlayer("Requires test mode!", 5., triggerPlayer)