package Radars

import Assets
import Tribe
import LinkedList
import IsTypeThing
import LegacyColors
import ClosureTimers
import ClosureEvents
import ClosuresForItems
import ChannelAbilityPreset

constant let COOLDOWN = 50.
constant let CASTTIME = 1.
constant let MANACOST = 15
constant let MAX_RANGE = 5000.
constant let REVEAL_DURATION = 10.
constant let RADAR_RANGE_BASE = 3300.
constant let SPELL_ICON = Icons.bTNSpy
constant let MAP_MAGIC_BUFF_ID = 'BHbd'
constant let RADAR_RANGE_PER_LEVEL = 200.
constant let MAP_MAGIC_RANGE_BONUS = 1500.

constant string array SPELLBOOKSPELLS = ["XGFT, XGFZ, XGFR, XGFC", "XGFT, XGFZ, XGFR, XGFC, XGFF, XGFS", "XGFT, XGFZ, XGFR, XGFC, XGFF, XGFS, XGFM"]

constant let ABILITY_ID_FIND_TINDER   = 'XGFT'
constant let ABILITY_ID_FIND_STICK    = 'XGFZ'
constant let ABILITY_ID_FIND_MUSHROOM = 'XGFR'
constant let ABILITY_ID_FIND_CLAYBALL = 'XGFC'
constant let ABILITY_ID_FIND_FLINT    = 'XGFF'
constant let ABILITY_ID_FIND_STONE    = 'XGFS'
constant let ABILITY_ID_FIND_MANA     = 'XGFM'
constant let ABILITY_ID_SPELLBOOK     = 'XGRB'

constant let TOOLTIP_EXT_FIND_STICK    = "Pings all nearby sticks in the minimap and reveals them for a short duration. Ignores items near enemies."
constant let TOOLTIP_EXT_FIND_TINDER   = "Pings all nearby tinder in the minimap and reveals them for a short duration. Ignores items near enemies."
constant let TOOLTIP_EXT_FIND_MUSHROOM = "Pings all nearby mushrooms in the minimap and reveals them for a short duration. Ignores items near enemies."
constant let TOOLTIP_EXT_FIND_CLAYBALL = "Pings all nearby clay balls in the minimap and reveals them for a short duration. Ignores items near enemies."
constant let TOOLTIP_EXT_FIND_FLINT    = "Pings all nearby flints in the minimap and reveals them for a short duration. Ignores items near enemies."
constant let TOOLTIP_EXT_FIND_STONE    = "Pings all nearby stones in the minimap and reveals them for a short duration. Ignores items near enemies."
constant let TOOLTIP_EXT_FIND_MANA     = "Pings all nearby mana crystals in the minimap and reveals them for a short duration. Ignores items near enemies."

constant let DUMMY_IDS = [  compiletime(UNIT_ID_GEN.next()),
                            compiletime(UNIT_ID_GEN.next()),
                            compiletime(UNIT_ID_GEN.next()),
                            compiletime(UNIT_ID_GEN.next()),
                            compiletime(UNIT_ID_GEN.next()),
                            compiletime(UNIT_ID_GEN.next()),
                            compiletime(UNIT_ID_GEN.next())]

constant let DUMMY_MODELS = ["Doodads\\Ruins\\Plants\\Ruins_Shrub\\Ruins_Shrub1.mdl",
                             "Doodads\\Felwood\\Props\\FelwoodLogStraight\\FelwoodLogStraight.mdl",
                             "Doodads\\Underground\\Plants\\ShroomsBlue\\ShroomsBlue.mdl",
                             "Objects\\InventoryItems\\ThunderLizardEgg\\ThunderLizardEgg.mdl",
                             "Doodads\\Outland\\Rocks\\RubbleRock\\RubbleRock5.mdl",
                             "Doodads\\LordaeronSummer\\Rocks\\Lords_Rock\\Lords_Rock6.mdl",
                             "Doodads\\Cinematic\\EyeOfSargeras\\EyeOfSargeras.mdl"]

constant let DUMMY_SCALING = [0.80, 0.40, 0.50, 1.50, 0.50, 0.33, 0.25]
constant let dummyDictionary = new HashMap<integer, integer>()
constant let itemToRadarDummy = new HashMap<widget, unit>()

class Radar
    int id = 0
    int buttonPosX  = 0
    int buttonPosY  = 0
    string hotkey   = "R"
    string name     = "Find "
    string toolTip  = "placeholder"
    string toolTipExt  = "placeholder"

    construct(int id, string itemName, string toolTipExt, string hotkey, int buttonPosX, int buttonPosY, string color)
        this.id = id
        this.hotkey   = hotkey
        this.name     += itemName
        this.toolTipExt  = toolTipExt
        this.buttonPosX  = buttonPosX
        this.buttonPosY  = buttonPosY
        this.toolTip  = GENERAL_COLOR+"[" + color + hotkey + GENERAL_COLOR + "] - " + this.name + "|r"

    function buildSpell()
        new ChannelAbilityPreset(id, 3, false)
        ..setTargetType(1, 0)
        ..setAnimationNames("spell,slam")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setArtTarget("")
        ..setArtSpecial("")
        ..setButtonPositionNormalX(buttonPosX)
        ..setButtonPositionNormalY(buttonPosY)
        ..setButtonPositionResearchX(buttonPosX)
        ..setButtonPositionResearchY(buttonPosY)
        ..setIconNormal(SPELL_ICON)
        ..setIconResearch(SPELL_ICON)
        ..setIconTurnOff(SPELL_ICON)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..setHotkeyNormal(hotkey)
        ..setName(name)
        ..setDisableOtherAbilities(1, false)
        ..setTooltipNormal(1, toolTip)
        ..setTooltipNormalExtended(1, toolTipExt)
        ..presetOptions(lvl -> 1)
        ..presetCooldown(lvl -> COOLDOWN)
        ..presetManaCost(lvl -> MANACOST)
        ..presetFollowThroughTime(lvl -> CASTTIME)

@compiletime function createSpellbook()
    new AbilityDefinitionSpellBook(ABILITY_ID_SPELLBOOK)
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(1)
    ..setButtonPositionResearchX(0)
    ..setButtonPositionResearchY(0)
    ..setIconNormal(SPELL_ICON)
    ..setIconResearch(SPELL_ICON)
    ..setIconTurnOff(SPELL_ICON)
    ..setHeroAbility(true)
    ..setItemAbility(false)
    ..setLevels(3)
    ..presetBaseOrderID(lvl -> "spellbook")
    ..setHotkeyLearn("Q")
    ..setHotkeyNormal("R")
    ..setName("Radar Spells")
    ..setTooltipLearn("Learn Radar Spells")
    ..setTooltipLearnExtended("Contains various item radar abilities for more efficient gathering.")
    ..presetMaximumSpells(lvl -> 11)
    ..presetMinimumSpells(lvl -> 11)
    ..presetSpellList(lvl -> SPELLBOOKSPELLS[lvl - 1])
    ..presetCooldown(lvl -> COOLDOWN)
    ..presetTooltipNormal(lvl -> "(|cffffcc00R|r) - Look up radar spell ")
    ..presetTooltipNormalExtended(lvl -> "Contains various item radar abilities for more efficient gathering.")
    ..presetSharedSpellCooldown(lvl -> true)

@compiletime function radarDummies()
    for i = 0 to 6
        new UnitDefinition(DUMMY_IDS[i], 'hfoo')
        ..setName("Radar Dummy")
        ..setModelFile(DUMMY_MODELS[i])
        ..setScalingValue(DUMMY_SCALING[i])
        ..setMovementHeight(0)
        ..setCollisionSize(0.0)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setSpeedBase(1)
        ..setHideMinimapDisplay(true)
        ..setShadowImageHeight(0.0)
        ..setShadowImageWidth(0.0)
        ..setFoodCost(0)
        ..setNormalAbilities("Aloc,Avul,Aeth") //Locust, invulnerable, Ghost(visible) 
        ..setAttacksEnabled(0)
        ..setIsaBuilding(true)

let radarDummyDeath = CreateTrigger()
    ..addAction(-> removeRadarDummy(GetTriggerWidget()))

let radarDummyPickup = CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
    ..addAction(-> removeRadarDummy(GetManipulatedItem()))

public function removeRadarDummy(widget w)
    if itemToRadarDummy.has(w)
        let dummy = itemToRadarDummy.getAndRemove(w)
        dummy.remove()

public function revealDummytoTeam(unit dummy, player whoseTeam)
    let team = Tribe.ofPlayer(whoseTeam).getMembers()
    if team.has(GetLocalPlayer())
        dummy.setVertexColor(255, 255, 255, 255)

function onCast(int itemId)
    var caster = GetSpellAbilityUnit()
    var casterPos = caster.getPos()
    var owner = caster.getOwner()
    var efx = addEffect("Abilities\\Spells\\Human\\Thunderclap\\ThunderClapCaster.mdl", casterPos)
    efx.setScale(1.5)
    efx.setTimeScale(1.5)
    efx.destr()

    //Calculate range
    var range = min(RADAR_RANGE_BASE + RADAR_RANGE_PER_LEVEL * caster.getLevel(), MAX_RANGE)

    if (caster.getTypeId() == UNIT_RADAR_GATHERER or caster.getTypeId() == UNIT_OMNIGATHERER)
        //Max range for subs
        range = MAX_RANGE

    //Map magic bonus
    if caster.hasAbility(MAP_MAGIC_BUFF_ID)
        range += MAP_MAGIC_RANGE_BONUS

    forItemsInMap() i ->
        if i.getPos().distanceTo(casterPos) < range and i.getTypeId() == itemId and i.isPickupable()
            if not itemToRadarDummy.has(i)
                //Make a new dummy item structure to show through fog
                let dummy = createUnit(players[PLAYER_NEUTRAL_PASSIVE], dummyDictionary.get(i.getTypeId()), i.getPos(), (270.0).asAngleDegrees())
                dummy.setVertexColor(255, 255, 255, 0)
                radarDummyDeath.registerDeathEvent(i)
                itemToRadarDummy.put(i, dummy)
                revealDummytoTeam(dummy, owner)
            else
                //Make existing dummy visible instead of making doubles
                revealDummytoTeam(itemToRadarDummy.get(i), owner)

            if not areHostilesNearItem(owner, i)
                //Vision
                var vis = createVision(owner, i.getPos(), 128, true)
                vis.start()
                doAfter(REVEAL_DURATION) ->
                    vis.destr()

                //Ping
                PingMinimapForForceEx(GetPlayersAllies(owner), i.getPos().x, i.getPos().y, 10, bj_MINIMAPPINGSTYLE_SIMPLE, 0, 255, 0)

function areHostilesNearItem(player p, item itm) returns bool
    let g = CreateGroup()..enumUnitsInRange(itm.getPos(), 350)
    for u in g
        if (u.getOwner().isEnemyOf(p) and (u.isType(UNIT_TYPE_HERO) or u.isType(UNIT_TYPE_STRUCTURE))) or IsUnitBoss(u)
            g.destr()
            return true
    g.destr()
    return false

function getRadarSpells() returns LinkedList<Radar>
    return asList(
        new Radar(ABILITY_ID_FIND_TINDER  , "Tinders"      , TOOLTIP_EXT_FIND_TINDER  , "Q", 2, 0, SPECIAL_COLOR),
        new Radar(ABILITY_ID_FIND_STICK   , "Sticks"       , TOOLTIP_EXT_FIND_STICK   , "W", 2, 0, SPECIAL_COLOR),
        new Radar(ABILITY_ID_FIND_MUSHROOM, "Mushrooms"    , TOOLTIP_EXT_FIND_MANA    , "E", 2, 0, SPECIAL_COLOR),
        new Radar(ABILITY_ID_FIND_CLAYBALL, "Clay Balls"   , TOOLTIP_EXT_FIND_CLAYBALL, "R", 2, 0, SPECIAL_COLOR),
        new Radar(ABILITY_ID_FIND_FLINT   , "Flints"       , TOOLTIP_EXT_FIND_FLINT   , "A", 2, 0, SPECIAL_COLOR),
        new Radar(ABILITY_ID_FIND_STONE   , "Stones"       , TOOLTIP_EXT_FIND_STONE   , "S", 3, 0, SPECIAL_COLOR), 
        new Radar(ABILITY_ID_FIND_MANA    , "Mana Crystals", TOOLTIP_EXT_FIND_MANA    , "D", 2, 0, SPECIAL_COLOR)
    )

@compiletime function buildRadarSpells()
    getRadarSpells().forEach(spell -> spell.buildSpell())

init
    registerSpellEffectEvent(ABILITY_ID_FIND_STONE, () -> onCast(ITEM_STONE))
    registerSpellEffectEvent(ABILITY_ID_FIND_FLINT, () -> onCast(ITEM_FLINT))
    registerSpellEffectEvent(ABILITY_ID_FIND_TINDER, () -> onCast(ITEM_TINDER))
    registerSpellEffectEvent(ABILITY_ID_FIND_STICK, () -> onCast(ITEM_STICK))
    registerSpellEffectEvent(ABILITY_ID_FIND_CLAYBALL, () -> onCast(ITEM_CLAY_BALL))
    registerSpellEffectEvent(ABILITY_ID_FIND_MUSHROOM, () -> onCast(ITEM_MUSHROOM))
    registerSpellEffectEvent(ABILITY_ID_FIND_MANA, () -> onCast(ITEM_MANA_CRYSTAL))
    dummyDictionary.put(ITEM_TINDER, DUMMY_IDS[0])
    dummyDictionary.put(ITEM_STICK, DUMMY_IDS[1])
    dummyDictionary.put(ITEM_MUSHROOM, DUMMY_IDS[2])
    dummyDictionary.put(ITEM_CLAY_BALL, DUMMY_IDS[3])
    dummyDictionary.put(ITEM_FLINT, DUMMY_IDS[4])
    dummyDictionary.put(ITEM_STONE, DUMMY_IDS[5])
    dummyDictionary.put(ITEM_MANA_CRYSTAL, DUMMY_IDS[6])
