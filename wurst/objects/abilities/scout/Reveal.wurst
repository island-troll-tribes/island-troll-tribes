package Reveal
import Icons
import ClosureEvents
import Orders
import ToolTipsUtils
import LocalObjectIDs
import ChannelAbilityPreset
import Lodash
import InstantDummyCaster
import ClosureForGroups
import ErrorHandling

let ABILITY_ID_REVEAL_DUMMY = compiletime(ABIL_ID_GEN.next())
let ABILITY_ID_RECON_REVEAL_DUMMY = compiletime(ABIL_ID_GEN.next())
let ABILITY_ID_GREATER_REVEAL_DUMMY = compiletime(ABIL_ID_GEN.next())
let DURATION = 8.
let GREATER_DURATION = 10.
let COOLDOWN = 20.
let GREATER_COOLDOWN = 20.
let AOE = 700.
let GREATER_AOE = 2700.

let CAST_TIME = 0.3
let TOOLTIP_NORM = "Reveal"
let TOOLTIP_EXTENDED = "Reveals an area around you, detects invisible units."+makeToolTipDuration(DURATION, COOLDOWN)
let CHAIN_REVEAL_TOOLTIP_EXTENDED = "Cast multiple reveal around you and on your living clays, detects invisible units."
                                    +makeToolTipDuration(GREATER_DURATION, COOLDOWN + 30)

let TOOLTIP_EXTENDED_GREATER = "Reveals an large area around you, detects invisible units."+makeToolTipDuration(GREATER_DURATION, GREATER_COOLDOWN)


@compiletime function revealDefinition()
    new AbilityDefinitionFarseerFarSight(ABILITY_ID_REVEAL_DUMMY)
        ..setDummyAbility()
        ..setLevels(3)
        ..presetAreaofEffect(lvl -> 300. + lvl * AOE)
        ..presetDurationHero(lvl -> DURATION)
        ..presetDurationNormal(lvl -> DURATION)

    new AbilityDefinitionFarseerFarSight(ABILITY_ID_GREATER_REVEAL_DUMMY)
        ..setDummyAbility()
        ..setLevels(1)
        ..setAreaofEffect(1, GREATER_AOE)
        ..presetDurationHero(lvl -> GREATER_DURATION)
        ..presetDurationNormal(lvl -> GREATER_DURATION)

    new AbilityDefinitionFarseerFarSight(ABILITY_ID_RECON_REVEAL_DUMMY)
        ..setDummyAbility()
        ..setLevels(3)
        ..presetAreaofEffect(lvl -> 400. + (lvl * 600.))
        ..presetDurationHero(lvl -> DURATION)
        ..presetDurationNormal(lvl -> DURATION)


class Reveal extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 3, true)
        this.setHeroAbility(true)
        this.setItemAbility(false)
        this.setRequiredLevel(1)
        this.setLevelSkipRequirement(1)
        this.setCheckDependencies(false)
        this.presetManaCost(lvl -> 0)
        this.presetCooldown(lvl -> COOLDOWN)
        this.presetTargetTypes(Targettype.NONE)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOLTIP_NORM, lvl))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setTooltipLearn(makeToolTipLearn(TOOLTIP_NORM))
        this.setTooltipLearnExtended(TOOLTIP_EXTENDED)
        this.setIconNormal(Icons.bTNReveal)
        this.setIconResearch(Icons.bTNReveal)
        this.setIconTurnOff(Icons.bTNReveal)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.presetFollowThroughTime(lvl -> CAST_TIME)

class GreaterReveal extends Reveal
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, hotkey, buttonPos)
        this.setHeroAbility(false)
        this.setLevels(1)
        this.setName("Greater "+TOOLTIP_NORM)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, "Greater "+TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED_GREATER)

class ChainReveal extends Reveal
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, hotkey, buttonPos)
        this.presetCooldown(lvl -> COOLDOWN + 30.)
        this.setName("Chain "+TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, "Chain "+TOOLTIP_NORM, lvl))
        this.presetTooltipNormalExtended(lvl -> CHAIN_REVEAL_TOOLTIP_EXTENDED)
        this.setTooltipLearn(makeToolTipLearn(TOOLTIP_NORM))
        this.setTooltipLearnExtended(CHAIN_REVEAL_TOOLTIP_EXTENDED)

@compiletime function createReveal()
    new Reveal(ABILITY_REVEAL_ID, "E", new Pair(1, 1))
    new GreaterReveal(ABILITY_GREATER_REVEAL_ID, "E", new Pair(1, 1))
    new ChainReveal(ABILITY_CHAIN_REVEAL, "E", new Pair(1, 1))

function onCastReveal()
    let caster = GetSpellAbilityUnit()
    let owner = caster.getOwner()
    let spellId = GetSpellAbilityId()
    let lvl = caster.getAbilityLevel(spellId)

    // Determine the Far Sight ability based on the original ability.
    let dummyToCast = spellId == ABILITY_GREATER_REVEAL_ID
        ? ABILITY_ID_GREATER_REVEAL_DUMMY
        : ABILITY_ID_REVEAL_DUMMY

    // Cast the Far Sight ability centered on the original caster.
    if not InstantDummyCaster.castPoint(owner, dummyToCast, lvl, Orders.farsight, caster.getPos())
        error("Reveal cast failed, this isn't supposed to happen, report this please.")

init
    registerSpellEffectEvent(ABILITY_REVEAL_ID, function onCastReveal)
    registerSpellEffectEvent(ABILITY_GREATER_REVEAL_ID, function onCastReveal)

    EventListener.onCast(ABILITY_CHAIN_REVEAL) (unit caster) ->
        let owner = caster.getOwner()
        let lvl = caster.getAbilityLevel(ABILITY_CHAIN_REVEAL)

        // Reveal nearby living clay.
        forUnitsOfPlayer(owner) u ->
            if u.getTypeId() == UNIT_LIVING_CLAY
                if InstantDummyCaster.castPoint(owner, ABILITY_ID_RECON_REVEAL_DUMMY, lvl, Orders.farsight, u.getPos()) == false
                    error("Reveal cast failed, this isn't supposed to happen, report this please.")

        // Get nearby enemies.
        let unitsAround = CreateGroup()..enumUnitsInRange(caster.getPos(), 2700)
        unitsAround.forEachIn() elem ->
            if elem.getOwner().isAllyOf(owner)
                unitsAround.removeUnit(elem)

        // Cast greater reveal on a random nearby unit.
        for i = 0 to lvl
            let randomUnit = unitsAround.getRandomUnit()
            if randomUnit != null
                if InstantDummyCaster.castTarget(owner, ABILITY_ID_GREATER_REVEAL_DUMMY, lvl, Orders.farsight, randomUnit) == false
                    error("Reveal cast failed, this isn't supposed to happen, report this please.")
                unitsAround.removeUnit(randomUnit)
        unitsAround.destr()
