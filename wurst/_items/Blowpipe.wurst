package Blowpipe

import LinkedList
import HashMap
import ClosureEvents
import ItemObjEditing
import AbilityObjEditing
import Assets
import ChatCommands
import ClosureForGroups
import GameConfig

@configurable constant string ICON = Icons.bTNAlleriaFlute
@configurable constant int ABILITY_ID = 'XBPA'
@configurable constant int ITEM_ID = 'XIBP'

@compiletime function createBlowpipeAbility()
    new AbilityDefinitionIllidanChannel(ABILITY_ID)
    ..setArtTarget("")
    ..setArtCaster("")
    ..setArtSpecial("")
    ..setArtEffect("")
    ..setAnimationNames("")
    ..setFollowThroughTime(1, 0)
    ..setAreaofEffect(1, 0.01)
    ..setCastRange(1, 450)
    ..setDurationHero(1, 0.01)
    ..setDurationNormal(1, 0.01)
    ..setHeroAbility(false)
    ..setItemAbility(true)
    ..setLevels(1)
    ..setManaCost(1, 0)
    ..setName("Blow Gun Ability")
    ..setOptions(1, 1)
    ..setTargetsAllowed(1, "air,ground,debris,enemy,neutral,organic")
    ..setTargetType(1, 1)

@compiletime function createBlowpipeItem()
    new ItemDefinition(ITEM_ID, 'schl')
    ..setAbilities("XBPA")
    ..setScalingValue(0.6)
    ..setButtonPositionX(3)
    ..setButtonPositionY(1)
    ..setClassification("Charged")
    ..setCooldownGroup("A01K")
    ..setDroppedWhenCarrierDies(true)
    ..setGoldCost(0)
    ..setHitPoints(75)
    ..setLumberCost(5)
    ..setStockReplenishInterval(30)
    ..setDescription("A hollowed out piece of wood. If blown through, could be used to fire small projectiles such as thistles")
    ..setHotkey("B")
    ..setName("Blow Gun")
    ..setTooltipBasic("Purchase |cffffcc00B|rlow Gun")
    ..setTooltipExtended("Used for shooting small things. Can be loaded with thistles or bones.")


class Blowpipe
    item i
    LinkedList<item> contents
    unit target

    construct(item i)
        this.i = i
        this.contents = new LinkedList<item>()
        this.target = null
        TriggerRegisterDeathEvent(cleanupTrigger, this.i)

    ondestroy
        //Drop content items
        for iterItem in contents
            iterItem.setPos(this.i.getPos())
            iterItem.setVisible(true)

        //Destroy list
        destroy contents


    function onFire(unit caster)
        item ammo = contents.get(0)

        if ammo == null
            printTimedToPlayer("No ammo!", 3, caster.getOwner())
            return
        else
            if (ammo.getTypeId() == ITEM_THISTLES)
                print("Fired thistles!")
            else if (ammo.getTypeId() == ITEM_BONE)
                print("Fired bone!")
            else if (ammo.getTypeId() == ITEM_DARK_THISTLES)
                print("Fired dark thistle!")
            else
                print("Invalid ammo!")
            caster.damageTarget(this.target, 10., ATTACK_TYPE_NORMAL)

            int charges = ammo.getCharges()

            //Reduce ammo
            if (charges > 1)
                ammo.setCharges(charges - 1)
            else    
                contents.remove(ammo)
                ammo.remove()
    function loadAmmo(unit owner, item i)
        this.contents.push(i)
        owner.removeItem(i)
        i.setVisible(false)

    function setTarget(unit target)
        this.target = target

    


function onCast()
    //This event fires first but cannot retrieve used blowgun item handle
    //Used to set target for all blowguns in inventory
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()

    for i = 0 to caster.inventorySize()-1
        var itm = caster.itemInSlot(i)
        if itm.getTypeId() == ITEM_ID
            if instances.has(itm)
                instances.get(itm).setTarget(target)
            else
                printTimedToPlayer("ERROR: Tried to target blowgun with no instance!", 10, GetTriggerUnit().getOwner())

    
function onUse()    
    //Triggers after onCast, used for actually firing the blowgun at the target specified in onCast
    var itm = GetManipulatedItem()
    if itm.getTypeId() == ITEM_ID
        if instances.has(itm)
            instances.get(itm).onFire(GetTriggerUnit())
        else
            printTimedToPlayer("ERROR: Tried to fire blowgun with no instance!", 10, GetTriggerUnit().getOwner())
 
function onPickup()
    //Create blowpipe instance when new blowpipe is acquired
    var itm = GetManipulatedItem()
    var itemId = itm.getTypeId()
    var trigUnit =  GetTriggerUnit()

    if itemId == ITEM_ID
        if not instances.has(itm)
            instances.put(itm, new Blowpipe(itm))

    //Load ammo if ammo is acquired
    if itemId == ITEM_THISTLES or itemId == ITEM_DARK_THISTLES or itemId == ITEM_BONE
        var slot1 = trigUnit.itemInSlot(0)
        if (slot1 != null and slot1.getTypeId() == ITEM_ID)
            if (instances.has(slot1))
                instances.get(slot1).loadAmmo(trigUnit, itm)


function cleanupInstances()
    //Check all instances and destroy those that have had item destroyed
    var iter = instances.iterator()
    while iter.hasNext()
        var k = iter.next()
        var instance = instances.get(k)

        if not instance.i.isAlive()
            destroy instances.getAndRemove(k)

    iter.close()




IterableMap<item, Blowpipe> instances
trigger cleanupTrigger

init
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())
    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM, () -> onUse())
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> onPickup())

    instances = new IterableMap<item, Blowpipe>()
    cleanupTrigger = CreateTrigger()
    cleanupTrigger.addAction(function cleanupInstances)


    registerCommandAll("blowpipe") (triggerPlayer, args) ->
        if (gameConfig.isTestModeEnabled() == true)
            printTimedToPlayer("Added blowpipe to selected heroes", 5., triggerPlayer)
            forUnitsSelected(triggerPlayer) u ->
                if (u.isType(UNIT_TYPE_HERO))
                    u.addItem(ITEM_ID)
        else
            printTimedToPlayer("Requires test mode!", 5., triggerPlayer)

