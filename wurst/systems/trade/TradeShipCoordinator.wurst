package TradeShipCoordinator

// Standard library imports:
import LinkedList

// Local imports:
import TradeShipList
import TradeShipSupervisor
import TradeShipRoutePair

public class TradeShipCoordinator
    var nextShip = TradeShipList.getFirst()
    let routes = new LinkedList<TradeShipRoutePair>()
    var ships = new LinkedList<TradeShipSupervisor>()

    function swap()
        for route in routes
            route.swap()

    function spawn()
        for ship in ships
            destroy ship
        destroy ships

        ships = routes
        .map(route -> new TradeShipSupervisor(route.getFirst(), nextShip.getId()))

        for ship in ships
            ship.addListener(ship -> handleEvent(ship))

        swap()
        nextShip = nextShip.getNext()

    function handleEvent(TradeShipSupervisor _ship)
        let size = ships
        .map(ship -> ship.getState())
        .filter(state -> state != TradeShipSupervisorState.EXITED)
        .size()

        if size == 0
            spawn()

    function addPair(TradeShipRoutePair pair)
        routes.add(pair)

    function getPairs() returns LinkedList<TradeShipRoutePair>
        return routes
