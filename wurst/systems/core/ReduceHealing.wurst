package ReduceHealing

// Standard library imports:
import Assets
import ClosureTimers
import ErrorHandling
import HashMap
import LinkedList
import MapBounds
import OnUnitEnterLeave
import Quest

// Third-party imports:
import Lodash

// Local imports:
import Game
import GameConfig
import HealingSystem
import Hints

// The description of this system, accessible from the quest log.
let DESCRIPTION = "" +
    "Healing is a vital apsect of combat for trolls. Their bodes have "        +
    "adapted to support rapid regeneration, allowing them to continue "        +
    "fighting even after sustaining grievous wounds. However, a troll must "   +
    "fuel this metabolic process by consuming copious amounts of food. "       +
    "Experienced trolls will typically carry a handy supply of meat into "     +
    "battle, valuing it above all else. Although these voracious creatures "   +
    "have evolved to eat incredibly quickly, their bellies will still "        +
    "eventually fill, at which point their digestion slows and healing "       +
    "begins to worsen. The mechanics of this are detailed in the food "        +
    "supply and upkeep overlays in the top right of the screen."

// The title of the quest used to describe this system.
let TITLE = "Healing From Food"

// The hint used to notify players of this system.
let HINT = ("" +
    "Your healing has been reduced for the first time. See '{0}' in the "      +
    "quest log for more information."
).format(TITLE)

// The duration in seconds for which the moving sum is tracked.
let DURATION = 90.

// The healing factor per bracket.
let BRACKETS = asOwnedList(
    new Pair(REAL_MIN, 1.00),
    new Pair(500.,     0.80),
    new Pair(1000.,    0.60),
    new Pair(1500.,    0.40),
    new Pair(REAL_MAX, 0.00)
)

// The brackers in array form, used to optimize some operations.
let NUM_BRACKETS = BRACKETS.size() - 1
real array BOUNDS
real array FACTORS

// The array used to track the hint per player.
bool array hinted

// The moving sum of the total amount healed by items per unit.
let sums = new HashMap<unit, real>()

// Displays a hint to a player the first their unit is affected.
function player.displayHint()
    // Exit if the player has hints disabled.
    if not Hint.playersF.containsPlayer(this)
        return

    // Exit if the player has already seen this hint.
    if hinted[this.getId()]
        return

    // Print the hint.
    // TODO: Support this behavior within the Hint system.
    this.print(HINT)

    // Block the player from receiving this hint again.
    hinted[this.getId()] = true


// Formats an amount as a value to be displayed in the food supply overlay.
function real.toDisplay() returns int
    // Divide by 10 because the engine limits food cap to 999.
    return (this / 10).floor()

function adjustAmountHealed(unit target, real amount, int index)
    // Exit if the unit no longer exists.
    if not sums.has(target)
        return

    // Compute the new sum.
    let sum = sums.get(target) + amount

    // Update the value.
    sums.put(target, sum)

    // Display the total healing as the food used.
    target.getOwner().setState(
        PLAYER_STATE_RESOURCE_FOOD_USED,
        sum.toDisplay()
    )

    // Display the next boundary as the cap, if applicable.
    target.getOwner().setState(
        PLAYER_STATE_RESOURCE_FOOD_CAP,
        // Allow the upper bound to default to 999.
        BOUNDS[index].toDisplay()
    )


function onUnitHealed(HealingInstance instance)
    // Only items are considered for healing reduction.
    if instance.healingType != ITEM
        return

    // Validate the state for the unit.
    if not sums.has(instance.target)
        error("No healing tracked for {0}.".format(instance.target.getName()))

    // Retrieve the current value for the target.
    var sum = sums.get(instance.target)

    // The actual value to be healed.
    var output = 0.

    // Copy the the initial amount before adjusting it.
    var amount = instance.amount

    // The index of the current bracket being considered.
    var index = 0

    // Skip brackets below the starting sum.
    while BOUNDS[index + 1] <= sum
        index++

    // Iterate until the initial amount has been split among brackets.
    while amount > 0
        // Compute the portion that falls within the current bracket.
        let current = min(amount, BOUNDS[index + 1] - sum)

        // Increment the state.
        amount -= current
        output += current * FACTORS[index]
        sum    += current
        index  += 1

    // Notify the player via hint the first time healing is reduced.
    if output < instance.amount
        instance.target.getOwner().displayHint()

    // Adjust the healing factor accordingly.
    instance.scaleMultiplier(output / instance.amount)

    // Adjust the moving sum.
    adjustAmountHealed(instance.target, instance.amount, index)

    // Schedule the operation to reduce the sum.
    doAfter(DURATION) ->
        adjustAmountHealed(instance.target, -instance.amount, index)

function onUnitEnter(unit target)
    sums.put(target, 0)

function onUnitLeave(unit target)
    sums.remove(target)

function LinkedList<T>.asArray<T>() returns T array
    // The array to be filled.
    T array output

    // Iterate over the elements.
    for index = 0 to this.size() - 1
        output[index] = this.get(index)

    // Output the filled array.
    return output

// Initializes the arrays used to optimize lookup.
function initializeArrays()
    // Compute the natural health loss per second.
    let decay = gameConfig.getStatLossAmount() / gameConfig.getStatLossInterval()

    // Compute the buffer needed to counteract the loss.
    let buffer = DURATION * decay

    // Copies and adjust the initial data.
    for index = 0 to NUM_BRACKETS
        BOUNDS[index]  = BRACKETS.get(index).a + buffer
        FACTORS[index] = BRACKETS.get(index).b

    // Fill the hinted array.
    for index = 0 to bj_MAX_PLAYER_SLOTS - 1
        hinted[index] = false

let description = ""

init
    onUnitHealed() ->
        onUnitHealed(getHealingInstance())

    onEnter() ->
        onUnitEnter(getEnterLeaveUnit())

    onLeave() ->
        onUnitLeave(getEnterLeaveUnit())

    registerGameStartEvent() ->
        initializeArrays()

        // Fake healing to initialize the player state.
        for index = 0 to bj_MAX_PLAYER_SLOTS - 1
            // Create a temporary unit to heal.
            let temp = createUnit(
                players[index],
                UnitIds.footman,
                boundMax,
                angle(0)
            )

            // Heal the unit.
            adjustAmountHealed(temp, 0, 1)

            // Remove the unit once it is no longer needed.
            temp.remove()

    // Create a quest to describe this system.
    new Quest(false)
        ..setTitle(TITLE)
        ..setDescription(DESCRIPTION)
        ..setIcon(Icons.bTNMonsterLure)
        ..setState(QuestState.DISCOVERED)
