package Tribe

// Standard library imports:
import HashMap
import LinkedList

// Third-party imports:
import Lodash
import LodashExtensions

// Local imports:
import ColorUtils
import GameConfig
import GameMode
import TribeUtils
import PlayerExtensions
import StringExtensions

let listeners = CreateTrigger()

public function registerTribeInitializationFinishEvent(code listener)
    listeners.addAction(listener)

let names = asList(
    "Darkspear",
    "Windfury",
    "Zanku",
    "Ganja",
    "Snaketongue",
    "Zaldeer",
    "Kuzu",
    "Juan'ji",
    "Bloodtusk",
    "Bonecoat",
    "Hydra",
    "Puma",
    "Firewater",
    "Woodland"
)

public class Tribe
    static let playerToTribeMap = new HashMap<player, Tribe>()
    static let tribes = new OwnedLinkedList<Tribe>()

    static let isNotDefeated = Predicate.owned<Tribe>(tribe -> not tribe.isDefeated())
    static let memberIsDead = Predicate.owned<player>(member -> not member.getTroll().isAlive())
    static let hasNoAliveMembers = Predicate.owned<Tribe>(tribe -> tribe.getMembers().every(memberIsDead))

    int tribeId
    rect spawn
    let tribePlayers = new OwnedLinkedList<player>()
    let tribe = CreateForce()
    let name = ""
    var defeated = true

    static function initialize()
        GameMode.onModeSelectionFinish(function onModesFinish)

    static function onModesFinish()
        resetAllianceState()
        let numTribes = gameConfig.getNumTribes()
        names.shuffle()
        for tribeId = 0 to numTribes - 1
            new Tribe(tribeId, names.dequeue() + " Tribe")
        listeners.execute()

    static function resetAllianceState()
        for i = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
            for j = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
                if i != j
                    SetPlayerAllianceStateBJ(players[i], players[j], bj_ALLIANCE_UNALLIED)

    static function getTribes() returns LinkedList<Tribe>
        return tribes

    static function ofPlayer(player query) returns Tribe
        return playerToTribeMap.get(query)

    construct(int id, string name)
        this.tribeId = id
        this.name = name

        let range = getPlayerIdRangeForTribe(tribeId)
        for pid = range.min to range.max
            let member = players[pid]
            if member.isIngame() and not member.isObserver()
                addMember(member)
                defeated = false

        for a in tribePlayers
            for b in tribePlayers
                if a != b
                    SetPlayerAllianceStateBJ(a, b, bj_ALLIANCE_ALLIED_VISION)

        if not defeated
            tribes.push(this)

    function addMember(player member)
        tribePlayers.push(member)
        playerToTribeMap.put(member, this)
        tribe.addPlayer(member)

    function addNonMemberPlayer(player shared)
        playerToTribeMap.put(shared, this)
        tribe.addPlayer(shared)

    function getId() returns int
        return tribeId

    function isDefeated() returns bool
        return defeated

    function makePlayersObservers()
        getMembers().forEach(member -> member.makeObserver())

    function displayDefeated()
        tribes.forEach() (Tribe t) ->
            if t != this and t.getForce().containsPlayer(localPlayer)
                printTimed("The " + this.name.color(SPECIAL_COLOR) + " tribe has been defeated", 7)

    function wasDefeated()
        makePlayersObservers()
        defeated = true
        if tribe.containsPlayer(GetLocalPlayer())
            print("You have been defeated.".color(HIGHLIGHT_COLOR))
        // TODO: Remove this once tribes mode is merged into default game.
        if gameConfig.isTribeOwnsBuildingsEnabled()
            displayDefeated()

    function wasVictorious()
        makePlayersObservers()
        if tribe.containsPlayer(GetLocalPlayer())
            print("You have won! Please play again!".color(HIGHLIGHT_COLOR))

    function getForce() returns force
        return tribe

    function getMembers() returns LinkedList<player>
        return tribePlayers

    function setSpawn(rect _spawn)
        spawn = _spawn

    function getSpawn() returns rect
        return spawn

    function getName() returns string
        return name

init
    Tribe.initialize()
