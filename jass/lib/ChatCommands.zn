
library ChatCommands requires ArgsUtils {

  public {
    type ArgFunc extends function(ArgsList);
  }

  public struct ChatCommands[] {
    private static trigger chatEvent;
    private static TableArray cmdFns;

    static method registerArgFunc(player forWho, string command, ArgFunc fn) {
      integer i;
      if (forWho == null) {
        for (0 <= i <= 11) {
          cmdFns[i][StringHash(command)] = fn;
        }
      } else
        cmdFns[GetPlayerId(forWho)][StringHash(command)] = fn;
    }

    static method deregisterArgFunc(player forWho, string command) {
      integer i;
      if (forWho == null) {
        for (0 <= i <= 11) {
          cmdFns[i].remove(StringHash(command));
        }
      } else
        cmdFns[GetPlayerId(forWho)].remove(StringHash(command));
    }

    static method triggerArgFunc() {
      executeArgFunc(GetTriggerPlayer(), GetEventPlayerChatString());
    }

    static method executeArgFunc(player p, string s) {
      ArgsList a = ArgsList.processArgs(s);
      ArgFunc fn;

      a.triggerPlayer = p;
      if (cmdFns[GetPlayerId(p)].has(StringHash(StringCase(a.cmd, false)))) {
        fn = cmdFns[GetPlayerId(p)][StringHash(StringCase(a.cmd, false))];
        fn.evaluate(a);
      }
      a.destroy();
    }

    static method onInit() {
      integer i = 0;

      cmdFns = TableArray[12];
      chatEvent = CreateTrigger();

      for (0 <= i <= 11) {
        if (GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING) {
          TriggerRegisterPlayerChatEvent(chatEvent, Player(i), "-", false);
        }
      }
      TriggerAddAction(chatEvent, static method ChatCommands.triggerArgFunc);
    }
  }
}
