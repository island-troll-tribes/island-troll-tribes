package TrollUpgrade

// Standard library imports:
import ClosureTimers
import EventHelper
import HashMap
import RegisterEvents

// Local imports:
import AutoSkill
import Classes
import ID
import Transformation

// TODO: Build this out automatically.
public constant trollUpgradeMap = new HashMap<int, int>()
    ..put(SPELL_WARRIOR,          UNIT_WARRIOR)
    ..put(SPELL_TRACKER,          UNIT_TRACKER)
    ..put(SPELL_JUGGERNAUT,       UNIT_JUGGERNAUT)
    ..put(SPELL_ELEMENTALIST,     UNIT_ELEMENTALIST_NEW)
    ..put(SPELL_HYPNOTIST,        UNIT_HYPNOTIST)
    ..put(SPELL_DEMENTIA_MASTER,  UNIT_DEMENTIA_MASTER)
    ..put(SPELL_BOOSTER,          UNIT_BOOSTER)
    ..put(SPELL_MASTER_HEALER,    UNIT_MASTER_HEALER)
    ..put(SPELL_SAGE,             UNIT_SAGE)
    ..put(SPELL_CHICKEN,          UNIT_CHICKEN_FORM)
    ..put(SPELL_SHAPESHIFTER,     UNIT_SHAPESHIFTER_WOLF)
    ..put(SPELL_ULTIMATE_FORM,    UNIT_ULTIMATE_FORM)
    ..put(SPELL_ESCAPE_ARTIST,    UNIT_ESCAPE_ARTIST)
    ..put(SPELL_CONTORTIONIST,    UNIT_CONTORTIONIST)
    ..put(SPELL_ASSASSIN,         UNIT_ASSASSIN)
    ..put(SPELL_OBSERVER,         UNIT_OBSERVER)
    ..put(SPELL_TRAPPER,          UNIT_TRAPPER)
    ..put(SPELL_SPY,              UNIT_SPY)
    ..put(SPELL_RADAR_GATHERER,   UNIT_RADAR_GATHERER)
    ..put(SPELL_HERB_MASTER,      UNIT_HERB_MASTER)
    ..put(SPELL_OMNIGATHERER,     UNIT_OMNIGATHERER)

// TODO: Do this while creating the classes.
@compiletime function registerTransformations()
    // Hunter
    registerTransformation(UNIT_HUNTER, UNIT_WARRIOR)
    registerTransformation(UNIT_HUNTER, UNIT_TRACKER)
    registerTransformation(UNIT_HUNTER, UNIT_JUGGERNAUT)
    registerTransformation(UNIT_WARRIOR, UNIT_JUGGERNAUT)
    registerTransformation(UNIT_TRACKER, UNIT_JUGGERNAUT)

    // Beastmaster
    registerTransformation(UNIT_BEAST_MASTER, UNIT_SHAPESHIFTER_WOLF)
    registerTransformation(UNIT_BEAST_MASTER, UNIT_CHICKEN_FORM)
    registerTransformation(UNIT_BEAST_MASTER, UNIT_ULTIMATE_FORM)
    registerTransformation(UNIT_SHAPESHIFTER_WOLF, UNIT_ULTIMATE_FORM)
    registerTransformation(UNIT_CHICKEN_FORM, UNIT_ULTIMATE_FORM)

    // Priest
    registerTransformation(UNIT_PRIEST, UNIT_BOOSTER)
    registerTransformation(UNIT_PRIEST, UNIT_MASTER_HEALER)
    registerTransformation(UNIT_PRIEST, UNIT_SAGE)
    registerTransformation(UNIT_BOOSTER, UNIT_SAGE)
    registerTransformation(UNIT_MASTER_HEALER, UNIT_SAGE)

    // Mage
    registerTransformation(UNIT_MAGE, UNIT_ELEMENTALIST_NEW)
    registerTransformation(UNIT_MAGE, UNIT_HYPNOTIST)
    registerTransformation(UNIT_MAGE, UNIT_DEMENTIA_MASTER)
    registerTransformation(UNIT_ELEMENTALIST_NEW, UNIT_DEMENTIA_MASTER)
    registerTransformation(UNIT_HYPNOTIST, UNIT_DEMENTIA_MASTER)

    // Scout
    registerTransformation(UNIT_SCOUT, UNIT_TRAPPER)
    registerTransformation(UNIT_SCOUT, UNIT_OBSERVER)
    registerTransformation(UNIT_SCOUT, UNIT_SPY)
    registerTransformation(UNIT_TRAPPER, UNIT_SPY)
    registerTransformation(UNIT_OBSERVER, UNIT_SPY)

    // Gatherer
    registerTransformation(UNIT_GATHERER, UNIT_RADAR_GATHERER)
    registerTransformation(UNIT_GATHERER, UNIT_HERB_MASTER)
    registerTransformation(UNIT_GATHERER, UNIT_OMNIGATHERER)
    registerTransformation(UNIT_RADAR_GATHERER, UNIT_OMNIGATHERER)
    registerTransformation(UNIT_HERB_MASTER, UNIT_OMNIGATHERER)

    // Thief
    registerTransformation(UNIT_THIEF, UNIT_CONTORTIONIST)
    registerTransformation(UNIT_THIEF, UNIT_ESCAPE_ARTIST)
    registerTransformation(UNIT_THIEF, UNIT_ASSASSIN)
    registerTransformation(UNIT_CONTORTIONIST, UNIT_ASSASSIN)
    registerTransformation(UNIT_ESCAPE_ARTIST, UNIT_ASSASSIN)


function upgradeUnit(unit origin, int targetID)
    // Save the statistics for the unit for restoration after level reduction.
    // TODO: Avoid level resetting.
    let str = origin.getStr(false)
    let agi = origin.getAgi(false)
    let inT = origin.getInt(false)

    // Transform the unit.
    transformUnit(origin, targetID)

    // Reset the experience for the unit.
    // TODO: Avoid level resetting.
    origin.removeLevels(30)

    //Refresh the instance of Building quickmake spellbook to fix bug
    origin.removeAbility(SPELL_BUILDING_CRAFT_SPELLBOOK_ID)
    origin.addAbility(SPELL_BUILDING_CRAFT_SPELLBOOK_ID)


    // Restore the statistics.
    // TODO: Avoid level resetting.
    origin.setStr(str)
    origin.setAgi(agi)
    origin.setInt(inT)

    // Apply autoskilling with the corrected level.
    // TODO: Remove level correction and use a transformation callback.
    // TODO: Move this to AutoSkill package.
    autoSkill(origin)

    // Exit out of the ability menu.
    if GetLocalPlayer() == origin.getOwner()
        ForceUICancel()

function onLearn(unit origin, int abilityID)
    // Look up the transformation denoted by the learned ability.
    let targetID = trollUpgradeMap.get(abilityID)

    // Exit if the skill does not mark an upgrade.
    if targetID == 0
        return

    // Verify that the level requirements are meant.
    // TODO: Enforce this using an automatic upgrade / research system.
    if getTrollClassType(targetID) == ClassType.SUPER_CLASS and origin.getLevel() < 9
        origin.getOwner().print("You must be at least level 9 to choose that class.")
        return
    if getTrollClassType(targetID) == ClassType.SUB_CLASS and origin.getLevel() < 6
        origin.getOwner().print("You must be at least level 6 to choose that class.")
        return

    // Perform the upgrade after allowing casting to finish.
    // TODO: Remove this once a helper unit performs the casting.
    nullTimer() ->
        upgradeUnit(origin, targetID)

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        onLearn(
            EventData.getSpellAbilityUnit(),
            EventData.getSpellAbilityId()
        )

    // Register the transformations at runtime.
    registerTransformations()
