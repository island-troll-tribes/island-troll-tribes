package BossUtilities

// Standard-library imports:
import Assets
import ClosureTimers

// Local imports:
import HealingSystem
import GroupUtils
import UnitEntity

public function checkInvulnerability(region miniBossRegion, unit miniBoss) returns bool
    // The Boss is always invulnerable when outside its arena.
    if not miniBoss.isInRegion(miniBossRegion)
        return true

    // The Boss is invulnerable unless there is a troll present in its arena.
    for troll in getTrolls()
        // Disable invulnerability if both conditions are met.
        if troll.isAlive() and troll.isInRegion(miniBossRegion)
            return false

    // Enable invulnerability if no matches were found.
    return true

public function toggleInvulnerability(region miniBossRegion, unit miniBoss)
    // Exit if The Boss is not currently alive.
    if not miniBoss.isAlive()
        return

    // Toggle the invulnerability.
    if checkInvulnerability(miniBossRegion, miniBoss)
        miniBoss.addAbility(AbilityIds.invulnerable)
        toggleHealing(miniBoss)
    else
        miniBoss.removeAbility(AbilityIds.invulnerable)

// TODO: rework this into an ability
function toggleHealing(unit miniBoss)
    let hpRegen = 4.
    let regenPeriod = 1.
    
    // Heal the boss 4 hp every 1 second
    doPeriodically(regenPeriod) (CallbackPeriodic cb) ->
        // Use healing system
        new HealingInstance(miniBoss, hpRegen, HealingType.OTHER)
        // If boss is not invulnerable or is max health
        if not miniBoss.isInvulnerable() or miniBoss.getMissingHP() == 0
            // Stop healing
            destroy cb

public function checkEntity(UnitEntity entity, region miniBossRegion, unit miniBoss)
    if entity != null
        toggleInvulnerability(miniBossRegion, miniBoss)
