package TribeBoard

// Standard library imports:
import Assets
import ClosureTimers
import HashMap
import LinkedList
import ClosureEvents

// Third-party imports:
import LodashExtensions

// Local imports:
import ColorUtils
import Boards
import Game
import PlayerExtensions
import StringExtensions
import Tribe
import UnitExtensions
import Transformation

let PERIOD = 1.0
let ENERGY_ICON = "ui\\widgets\\tooltips\\human\\tooltipmanaicon.blp"

/**
    This class create & update a board for a tribe, displaying the tribe member following stats :
    Name -  Unit Icon -  Level -  Health -  Mana -  Heat
**/
class TribeBoard
    static let boards = new HashMap<player, thistype>()

    static function findForPlayer(player p) returns thistype
        return boards.get(p)

    Tribe tribe
    multiboard board
    CallbackPeriodic cb
    boolean isInit

    construct(Tribe tribe)
        this.tribe = tribe
        this.cb = doPeriodically(PERIOD, cb -> updateBoardStat())
        createBoard()
        isInit = true

    function createBoard()
        let members = tribe.getMembers()

        board = CreateMultiboard()
            ..setColumnCount(5)
            ..setRowCount(members.size())
            ..setTitle("Team Stats")

        var row = 0
        for member in members
            boards.put(member, this)
            var column = 0

            board
                .getItem(row, column)
                ..setStyle(true, false)
                ..setValue(member.getName().color(HIGHLIGHT_COLOR))
                ..setWidth(0.1)
                ..release()
            column++

            board
                .getItem(row, column)
                ..setStyle(true, true)
                ..setValue("Level".color(HIGHLIGHT_COLOR))
                ..setWidth(0.04)
                ..release()
            column++

            board
                .getItem(row, column)
                ..setStyle(true, true)
                ..setIcon(Icons.bTNSkillz)
                ..setWidth(0.04)
                ..release()
            column++

            board
                .getItem(row, column)
                ..setStyle(true, true)
                ..setIcon(ENERGY_ICON)
                ..setWidth(0.04)
                ..release()
            column++

            board
                .getItem(row, column)
                ..setStyle(true, true)
                ..setIcon(Icons.pASBTNIncinerate)
                ..setWidth(0.04)
                ..release()

            board.display(member, true)

            row += 1

    /**
        Get the player rown number on the tribe board
    **/
    function getPlayerRow(player p) returns int
        return tribe.getMembers().indexOf(p)

    /**
        Grays out the player name
    **/
    function updateLeaverName(player p)
        let row = getPlayerRow(p)

        board
            .getItem(row, 0)
            ..setValue(p.getName().color(GRAY_COLOR))
            ..release()

    function setTrollLevel(player p)
        let row = getPlayerRow(p)

        board
            .getItem(row, 1)
            ..setValue(p.getTroll().getLevel().toString())
            ..setIcon(p.getTrollIcon())
            ..release()

    function setTrollIcon(player p)
        let row = getPlayerRow(p)

        board
            .getItem(row, 1)
            ..setIcon(p.getTrollIcon())
            ..release()

    function updateBoardStat()
        let members = tribe.getMembers()
        let title = getGameTimersBoardTitle()

        // Setting the game timers on top of the tribe board
        board.setTitle(title)

        var row = 0
        for member in members
            let troll = member.getTroll()
            var column = 2

            // Set icon & level at init
            // Updating level & icon every 1 seconds seems uneccessary
            // Instead, we update it on level up & transformation
            if isInit
                setTrollLevel(member)
                setTrollIcon(member)

            board
                .getItem(row, column)
                ..setValue(troll.getHP().toInt().toString().color(HEALTH_COLOR))
                ..release()
            column++


            board
                .getItem(row, column)
                ..setValue(troll.getMana().toInt().toString().color(ENERGY_COLOR))
                ..release()
            column++


            board
                .getItem(row, column)
                ..setValue(member.getGold().toString().color(COLOR_GOLD))
                ..release()

            row += 1
        isInit = false

    function fixDisplay()
        doAfter(0.5) ->
            for member in tribe.getMembers()
                board
                    ..display(member, false)
                    ..display(member, tribe.isDefeated() ? false : true)


init
    registerGameStartEvent() ->
        nullTimer() ->
            Tribe.getTribes().each(tribe -> new TribeBoard(tribe))

        registerPlayerEvent(EVENT_PLAYER_LEAVE) ->
            if not GetTriggerPlayer().isObserver() and not GetTriggerPlayer().isObserverNew()
                TribeBoard
                    .findForPlayer(GetTriggerPlayer())
                    ..fixDisplay()
                    ..updateLeaverName(GetTriggerPlayer())

    EventListener.add(EVENT_PLAYER_HERO_LEVEL) ->
        if GetTriggerUnit().isTroll()
            let owner = GetTriggerUnit().getOwner()
            TribeBoard
                .findForPlayer(owner)
                .setTrollLevel(owner)

    registerAfterEffect() (unit target, int unitID) ->
        if target.isTroll()
            let owner = target.getOwner()
            // For some reason, the troll level isn't updated in time with this event, but the name is
            // waiting a bit to get the correct level
            nullTimer() ->
                TribeBoard.findForPlayer(owner)
                    ..setTrollIcon(owner)
                    ..setTrollLevel(owner)
