package DementiaRunesNew
import RegisterEvents
import LinkedList
import ClosureTimers
import HashMap
import Orders

constant let NEL_ABILITY_ID = 'A06S'
constant let KA_ABILITY_ID = 'A079'
constant let LEZ_ABILITY_ID = 'A07A'
constant let LOOP_INTERVAL = 0.03125
constant let ORBIT_ANGULARSPEED = 80.
constant let ORBIT_DISTANCE = 170.
constant let MAX_RUNE_COUNT = 5

constant let RUNE_LEZ_EFFECT_PATH = "Doodads\\Cinematic\\GlowingRunes\\GlowingRunes4.mdl"
constant let RUNE_NEL_EFFECT_PATH = "Doodads\\Cinematic\\GlowingRunes\\GlowingRunes6.mdl"
constant let RUNE_KA_EFFECT_PATH = "Doodads\\Cinematic\\GlowingRunes\\GlowingRunes0.mdl"

let dementiaRunesInstances = new HashMap<unit, DementiaRunesInstance>()
let runeSpellsList = new LinkedList<DementiaRuneSpell>()

public enum Runes
    Nel
    Lez
    Ka
    None

public class DementiaRuneSpell
    int spellId
    int orderId
    string name

    construct(string name, int spellId, int orderId)
        this.name = name
        this.spellId = spellId
        this.orderId = orderId

class DementiaRune
    DementiaRunesInstance instance
    Runes runeType
    //effect FX = null
    unit dummy
    vec3 pos

    construct (DementiaRunesInstance instance, Runes runeType)
        this.instance = instance
        pos = instance.ownerUnit.getPos3Real()
        this.runeType = runeType
        if this.runeType == Runes.Lez
            dummy = createUnit(instance.ownerUnit.getOwner(), UNIT_LOCUST_LEZ, pos, angle(0))
        else if this.runeType == Runes.Nel
            dummy = createUnit(instance.ownerUnit.getOwner(), UNIT_LOCUST_NEL, pos, angle(0))
        else if this.runeType == Runes.Ka
            dummy = createUnit(instance.ownerUnit.getOwner(), UNIT_LOCUST_KA, pos, angle(0))
        //FX.setScale(1.5)
        //FX.setTimeScale(0.1)

    function setPos(vec3 newpos)
        pos = newpos
        //Adjust orbs a little lower since the SFX looks like its higher
        //FX.setPos(pos - vec3(0,0,75))
        dummy.setPos(pos.toVec2())
        dummy.setFlyHeight(50, 600)

    function setFacing(angle facing)
        dummy.setFacing(facing)
    
    function getRandomRuneSpellID() returns DementiaRuneSpell
        if this.runeType == Runes.Ka
            return runeSpellsList.get(GetRandomInt(0, 1))  
        else if this.runeType == Runes.Nel
            return runeSpellsList.get(GetRandomInt(2, 3))
        else
            return runeSpellsList.get(4)


    ondestroy
        if instance.runes.has(this)
            instance.runes.remove(this)
        dummy.remove()
        //FX.destr()

public class DementiaRunesInstance
    angle runeAngleBase
    unit ownerUnit
    real elapsedLifetime
    CallbackPeriodic runeLoop = null
    
    LinkedList<DementiaRune> runes 

    construct (unit caster)
        ownerUnit = caster
        elapsedLifetime = 0
        runeAngleBase = angle(0)
        runes = new LinkedList<DementiaRune>()
        startRuneLoop()

    function startRuneLoop()
        runeLoop = doPeriodically(LOOP_INTERVAL) runeUpdateLoop ->
            if ownerUnit.isAlive()
                elapsedLifetime += LOOP_INTERVAL
                runeAngleBase = angle(runeAngleBase.radians() + LOOP_INTERVAL * ORBIT_ANGULARSPEED * DEGTORAD)
                updateRunePositions()
            else
                destroy this
    
    function updateRunePositions()
        //Calculate orb angles and set it
        angle offset = angle((360 / runes.size())*DEGTORAD)
        int i = 0
        vec3 ownerpos = ownerUnit.getPos3Real()
        for r in runes
            angle indexRuneAngle = runeAngleBase + offset * i.toReal()
            r.setPos(ownerpos.offset2d(indexRuneAngle, ORBIT_DISTANCE))
            r.setFacing(r.pos.angleTo2d(ownerUnit.getPos()))
            i = i + 1

    function addRune(DementiaRune rune)
        if runes.size() < MAX_RUNE_COUNT
            runes.add(rune)
        else 
            destroy runes.get(0)
            runes.add(rune)


    ondestroy
        destroy runeLoop

        runes.forEach(r -> destroy r)
        destroy runes

        if dementiaRunesInstances.has(ownerUnit)
            if (dementiaRunesInstances.get(ownerUnit) == this) 
                dementiaRunesInstances.remove(ownerUnit)


function onCast()
    var caster = GetSpellAbilityUnit()
    var ID = GetSpellAbilityId()
    Runes runeType = Runes.None

    if ID == NEL_ABILITY_ID
        runeType = Runes.Nel
    else if ID == LEZ_ABILITY_ID
        runeType = Runes.Lez
    else if ID == KA_ABILITY_ID
        runeType = Runes.Ka

    
    if dementiaRunesInstances.has(caster)
        //If caster has instance, add rune
        var instance = dementiaRunesInstances.get(caster)
        instance.addRune(new DementiaRune(instance, runeType))
    else
        //If caster has no instance, create one
        var instance = new DementiaRunesInstance(caster)
        dementiaRunesInstances.put(caster, instance)
        instance.addRune(new DementiaRune(instance, runeType))

public function getRunesInstance(unit owner) returns DementiaRunesInstance
    if (dementiaRunesInstances.has(owner))
        return dementiaRunesInstances.get(owner)
    else 
        return null

function setupRuneSpellsList()
    runeSpellsList.add(new DementiaRuneSpell("Firebolt", 'A07C', Orders.creepthunderbolt))
    runeSpellsList.add(new DementiaRuneSpell("Soul burn", 'A064', Orders.soulburn))
    runeSpellsList.add(new DementiaRuneSpell("Null damage", 'A01Y', Orders.cripple))
    runeSpellsList.add(new DementiaRuneSpell("Drunken haze", 'A03E', Orders.drunkenhaze))
    runeSpellsList.add(new DementiaRuneSpell("Frost nova", 'A02A', Orders.frostnova))

init
    setupRuneSpellsList()
    registerSpellEffectEvent(NEL_ABILITY_ID, () -> onCast())
    registerSpellEffectEvent(KA_ABILITY_ID, () -> onCast())
    registerSpellEffectEvent(LEZ_ABILITY_ID, () -> onCast())
