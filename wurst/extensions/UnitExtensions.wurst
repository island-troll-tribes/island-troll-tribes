package UnitExtensions

// Standard library imports:
import Assets
import ItemObjEditing
import LinkedList
import ObjectIdGenerator

// Third-party imports:
import StackNSplit
import Lodash

// Local imports:
import Brambles
import ColorUtils
import Construction
import GameConfig
import TrollGroup
import HashMap
import IdListConstant
import LocalObjectIDs


constant DUMMY_ITEM_ID = compiletime(ITEM_ID_GEN.next())
@compiletime function createDummyItem()
    new ItemDefinition(DUMMY_ITEM_ID, 'bspd')

/**
    Adds an item by handle to the given slot.
*/
public function unit.addItemHandleToSlot(item itm, int targetSlot)
    // Compute the list of intervening empty slots.
    let emptySlots = filter(slot -> UnitItemInSlot(this, slot) == null,
                            range(0, targetSlot).toList())
    // Fill each intervening slot.
    for _ in emptySlots
        this.addItemById(DUMMY_ITEM_ID)
    // Add the item to the first available slot, which is now the target slot.
    this.addItemHandle(itm)
    // Remove the dummy items.
    for slot in emptySlots
        UnitItemInSlot(this, slot).remove()

public function unit.getHeroSkillPoints() returns integer
    return GetHeroSkillPoints(this)

public function unit.modifySkillPoints(integer value)
    UnitModifySkillPoints(this, value)

public function unit.freeSlots() returns int
    int result = 0
    for slot = 0 to this.inventorySize() - 1
        if this.itemInSlot(slot) == null
            result++
    return result

public function unit.itemCount(int itemTypeId) returns int
    var count = 0
    for i = 0 to 5
        if this.itemInSlot(i).getTypeId() == itemTypeId
            count++
    return count

public function unit.getInventoryItemCountMap() returns HashMap<int, int>
    let map = new HashMap<int, int>()
    for i = 0 to 5
        let id = this.itemInSlot(i).getTypeId()
        if map.has(id)
            map.put(id, map.get(id) + 1)
        else
            map.put(id, 1)
    return map

public function unit.getInventory() returns LinkedList<item>
    let list = new LinkedList<item>
    let size = this.inventorySize()
    for i = 0 to size - 1
        list.add(this.itemInSlot(i))
    return list

public function unit.addXp(int toAdd)
    AddHeroXP(this, toAdd, true)

public function unit.setXp(int newXpVal)
    this.setXp(newXpVal, true)

public function unit.addUnitToStock(int id, int currentStock, int stockMax)
    AddUnitToStock(this, id, currentStock, stockMax)

public function unit.removeUnitFromStock(int id)
    RemoveUnitFromStock(this, id)

public function unit.addItemToStock(int id, int currentStock, int maxStock)
    AddItemToStock(this, id, currentStock, maxStock)

public function unit.removeItemFromStock(int id)
    RemoveItemFromStock(this, id)

public function unit.shareVision(player whichPlayer, bool share)
    UnitShareVision(this, whichPlayer, share)

public function unit.removeBuffs(bool removePositive, bool removeNegative)
    UnitRemoveBuffs(this, removePositive, removeNegative)

public function unit.isStructure() returns boolean
    return IsUnitType(this, UNIT_TYPE_STRUCTURE)

public function unit.isTroll() returns boolean
    return TROLL_UNIT_LIST.has(this.getTypeId())

public function unit.getHeat() returns int
    return this.getOwner().getGold()

public function unit.setHeat(int heat)
    this.getOwner().setGold(heat.clamp(0, gameConfig.getMaxHeat()))

public function unit.addHeat(int delta)
    this.setHeat(this.getOwner().getGold() + delta)

public function unit.subHeat(int heat)
    this.addHeat(-heat)

public function unit.getItemMatching(Predicate<item> predicate) returns item
    let inventorySize = this.inventorySize()
    for i = 0 to inventorySize
        let itm = this.itemInSlot(i)
        if predicate.call(itm)
            return itm
    return null

public function unit.moveInventoryDown()
    int array freeSlots
    var bottom = 0
    var top = 0
    for slot = this.inventorySize() - 1 downto 0
        let itm = this.itemInSlot(slot)
        if itm == null
            freeSlots[top] = slot
            top += 1
        else if top != bottom
            this.dropItemSlot(itm, freeSlots[bottom])
            bottom += 1

public function unit.dropItems(int count)
    for slot = 0 to count - 1
        this.removeItemFromSlot(slot)

public function unit.dropItems()
    this.dropItems(this.inventorySize())

public function unit.addSleep(bool value)
    UnitAddSleep(this, value)

public function unit.setCreepGuard(bool value)
    SetUnitCreepGuard(this, value)

public function unit.addOrStackItem(item itm) returns bool
    //Stackables
    var result = false
    let itemTypeId = itm.getTypeId()
    if isItemStackable(itemTypeId)
        this.stackItem(itm)

        if not itm.isAlive()
            return true

        //Add leftover stacks if they were left
        var charges = itm.getCharges()
        let maxStack = getItemMaxStacks(itemTypeId)
        while charges > 0
            if this.isInventoryFull()
                result = false
                break
            if charges > maxStack
                let itemPos = itm.getPos()
                let newItemStack = createItem(itemTypeId, itemPos)
                newItemStack.setCharges(maxStack)
                this.addItemHandle(newItemStack)
                charges -= maxStack
            else
                this.addItemHandle(itm)
                result = true
                break

        itm.setCharges(charges)
    else
        //Non-stackables
        if not this.isInventoryFull()
            this.addItemHandle(itm)
            result = true
    return result

public function unit.isImmobilized() returns bool
    return (
        this.getAbilityLevel(BuffIds.ensnareGround) > 0 or
        this.getAbilityLevel(BuffIds.ensnareAir) > 0 or
        this.getAbilityLevel(BuffIds.entanglingRoots) > 0 or
        this.getAbilityLevel(BUFF_ENTANGLE_BRAMBLES_ID) > 0
    )

//  TO DO : should find a way that works and checks the return
public function unit.makeAbilitiesPermanent(LinkedList<int> abilList, boolean flag)
    abilList.forEach(elem -> this.makeAbilityPermanent(elem, flag))

public function unit.isEnemyBuildingAround(real radius) returns bool
    let nearbyUnits = CreateGroup()..enumUnitsInRange(this.getPos(), radius)
    while nearbyUnits.hasNext()
        let u = nearbyUnits.next()
        if u.isEnemyOf(this.getOwner()) and u.isStructure()
            nearbyUnits.destr()
            return true
    nearbyUnits.destr()
    return false

public function unit.isEnemyDefense() returns bool
    return this.getTypeId() == UNIT_ENSNARE_TRAP
        or this.getTypeId() == UNIT_OMNITOWER
        or this.getTypeId() == UNIT_MUD_HUT
        or this.getTypeId() == UNIT_TROLL_HUT
        or this.getTypeId() == UNIT_TENT

public function unit.isConstructing() returns bool
    return isConstructing(this)

public function unit.registerTroll()
    addTroll(this)

public function unit.deregisterTroll()
    removeTroll(this)

public function unit.isItemInSlot(int slot) returns bool
    return this.itemInSlot(slot) != null

public function unit.isItemInSlot(int slot, int id) returns bool
    let target = this.itemInSlot(slot)
    return target != null and target.getTypeId() == id

public function unit.isBoss() returns bool
    return BOSS_LIST.has(this.getTypeId())

// Corrects the color of the unit to match the color of the player. Some color-
// coded effects, e.g. hero glow, will use the slot color incorrectly.
// TODO: Use UnitEnterLeave so that this is called automatically.
public function unit.correctColor()
    this.setColor(this.getOwner().getColor())

/**
    This was made solely to disable quick make ability
    TODO: Handle multiple requirement string
*/
public function unit.disableAbility(int abilId, string requirement)
    let abil = this.getAbility(abilId)
    let tooltipNormExt = abil.getField(ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, 0)
    let requirementString = (
            "Requires :\n" +
            "    " + requirement + "\n\n").color(COLOR_YELLOW)
    abil.setField(ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, 0, requirementString + tooltipNormExt)
    this.disableAbility(abilId, true, false)

/**
    This was made solely to enable quick make ability
*/
public function unit.enableAbility(int abilId)
    let abil = this.getAbility(abilId)
    // Fun fact, this method takes an abilId as parameter, it actually update all abilities with this id
    let tooltipNormExt = getAbilityExtendedTooltip(abilId, 0)
    // This method takes an ability handle to update the tooltip, it actually update the tooltip only for this
    // precise ability and will not alter abilities with similar ID
    abil.setField(ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, 0, tooltipNormExt)
    this.disableAbility(abilId, false, false)
