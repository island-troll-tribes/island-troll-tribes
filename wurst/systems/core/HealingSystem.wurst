package HealingSystem

trigger eventTrigger = CreateTrigger()
HealingInstance eventHealing = null

public function getHealingInstance() returns HealingInstance
    return eventHealing

public function getHealingAmount() returns real
    return eventHealing.amount

public function getHealingMultiplier() returns real
    return eventHealing.multiplier

public function getHealingTarget() returns unit
    return eventHealing.target

public function onUnitHealed(code c) returns triggercondition
    return eventTrigger.addCondition(Condition(c))

public class HealingInstance
    real amount
    real multiplier
    unit target

    construct(unit target, real amount)
        this.amount = amount
        this.multiplier = 1
        this.target = target
        execute()

    private function fireHealingEvent()
        let prev = eventHealing
        eventHealing = this
        eventTrigger.evaluate()
        eventHealing = prev

    private function execute()
        this.fireHealingEvent()
        let modifiedHealAmount = this.amount * this.multiplier
        target.setHP(target.getHP() + modifiedHealAmount)

    function reduceHealAmount(real reduction) returns real
        this.amount = max(0, this.amount-reduction)
        return this.multiplier

    function increaseHealAmount(real increase) returns real
        this.amount = max(0, this.amount+increase)
        return this.multiplier

    function reduceMultiplier(real reduction) returns real
        this.multiplier = max(0, this.multiplier - reduction)
        return this.multiplier

    function increaseMultiplier(real increase)
        this.multiplier = max(0, this.multiplier + increase)

    function getTarget() returns unit
        return this.target
