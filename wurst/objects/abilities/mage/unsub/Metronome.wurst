package Metronome

// Standard Library Import :
import Table
import Orders
import Assets
import ClosureTimers
import AbilityObjEditing
import DummyCaster
import ObjectIds
import ClosureEvents

// Third party Dependencies :
import Lodash

// Local Import :
import LocalObjectIDs
import ToolTipsUtils

let MANACOST = 20
let COOLDOWN = 45.
let TOOLTIP = "Metronome"
let TOOLTIP_EXTENDED = "Barrages enemies with random, chaining effects. Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())

class Metronome extends AbilityDefinitionFirelordSoulBurn
    construct(int newAbility, string hotkey, Pair<int, int> buttonPos)
        super(newAbility)
        this.setDamageAmount(1, 0)
        this.setDamagePenalty(1, 0)
        this.setDamagePeriod(1, 0)
        this.setIconNormal(Icons.bTNWandOfManaSteal)
        this.setTargetsAllowed(1, commaList(
            TargetsAllowed.air,
            TargetsAllowed.enemies,
            TargetsAllowed.ground,
            TargetsAllowed.neutral,
            TargetsAllowed.organic
        ))
        this.setHeroAbility(false)
        this.setManaCost(1, MANACOST)
        this.setDurationHero(1, 0.01)
        this.setDurationNormal(1, 0.01)
        this.setLevels(1)
        this.setCooldown(1, COOLDOWN)
        this.setName(TOOLTIP)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setHotkeyNormal(hotkey)

@compiletime function createMetroImpale() returns AbilityDefinitionImpaleCreep
    return new AbilityDefinitionImpaleCreep(ABILITY_METRONOME_IMPALE)
            ..setDummyAbility()
            ..setDamageDealt(1, 10.0)
            ..setEditorSuffix("(Wurst)")
            ..setDurationHero(0, 0.5)
            ..setName("Metronome Impale")

@compiletime function createMetroNova() returns AbilityDefinitionFrostNovacreep
    return new AbilityDefinitionFrostNovacreep(ABILITY_METRONOME_FROSTNOVA)
            ..setDummyAbility()
            ..setAreaofEffectDamage(1, 10)
            ..setSpecificTargetDamage(1, 15)
            ..setEditorSuffix("(Wurst)")
            ..setName("Metronome Nova")

@compiletime function createMetroManaBurn() returns AbilityDefinitionManaBurndemon
    return new AbilityDefinitionManaBurndemon(ABILITY_METRONOME_MANABURN)
            ..setDummyAbility()
            ..setEditorSuffix("(Wurst)")
            ..setMaxManaDrained(1, 6.0)
            ..setBoltLifetime(1, 0.5)
            ..setName("Metronome Mana Burn")

@compiletime function createMetroNovaUlt() returns AbilityDefinitionFrostNovacreep
    return new AbilityDefinitionFrostNovacreep(ABILITY_METRONOME_FROSTNOVAULT)
            ..setDummyAbility()
            ..setAreaofEffect(1, 600)
            ..setAreaofEffectDamage(1, 15)
            ..setSpecificTargetDamage(1, 45)
            ..setArtEffect(Abilities.blizzardTarget)
            ..setDurationHero(1, 5)
            ..setEditorSuffix("(Wurst)")
            ..setName("Metronome Nova Ultimate")

@compiletime function createMetronome()
    new Metronome(ABILITY_METRONOME, "D", new Pair(2, 1))


class MasterCaster
    static constant impale        = ABILITY_METRONOME_IMPALE
    static constant tsunami       = ABILITY_TSUNAMI
    static constant frostNova     = ABILITY_METRONOME_FROSTNOVA
    static constant poisonThistle = ABILITY_THISTLE
    static constant manaBurn      = ABILITY_METRONOME_MANABURN
    static constant frostNovaUlt  = ABILITY_METRONOME_FROSTNOVAULT

constant table = new Table()

function initSpellTable()
    table.saveInt(0, MasterCaster.impale)
    table.saveInt(1, MasterCaster.impale)
    table.saveInt(2, MasterCaster.tsunami)
    table.saveInt(3, MasterCaster.tsunami)
    table.saveInt(4, MasterCaster.frostNova)
    table.saveInt(5, MasterCaster.frostNova)
    table.saveInt(6, MasterCaster.poisonThistle)
    table.saveInt(7, MasterCaster.manaBurn)
    table.saveInt(8, MasterCaster.manaBurn)
    // Unlucky, lonely spell
    table.saveInt(9, MasterCaster.frostNovaUlt)

    table.saveInt(MasterCaster.impale       , Orders.impale)
    table.saveInt(MasterCaster.tsunami      , Orders.carrionswarm)
    table.saveInt(MasterCaster.frostNova    , Orders.frostnova)
    table.saveInt(MasterCaster.poisonThistle, Orders.shadowstrike)
    table.saveInt(MasterCaster.manaBurn     , Orders.manaburn)
    table.saveInt(MasterCaster.frostNovaUlt , Orders.frostnova)

function onCast(unit caster, unit target)
    let targetPos = target.getPos()
    var dummyPos = targetPos.polarOffset(GetRandomReal(0, 360).fromDeg(), GetRandomReal(0, 100))
    let owner = caster.getOwner()
    var abilityId = table.loadInt(9)

    // Trying to cast frost nova ultimate, 1 chance out of 3?
    if GetRandomInt(0, 2) == 0
        // Temporary vision required by dummy
        let vis = createVision(owner, target.getPos(), 300, true)
        vis.start()
        doAfter(0.2) ->
            vis.destr()
        new DummyCaster()
            ..owner(owner)
            ..delay(1)
            ..origin(dummyPos)
            ..castTarget(abilityId, 1, table.loadInt(abilityId), target)

        // Do cast additional spells, frost nova ult by itself does 60 instant damage
        return

    // Load up first ability
    abilityId = table.loadInt(GetRandomInt(0, 8))
    // Temporary vision required by dummy
    let vis2 = createVision(owner, target.getPos(), 300, true)
    vis2.start()
    doAfter(0.2) ->
        vis2.destr()
    new DummyCaster()
        ..owner(owner)
        ..delay(1)
        ..origin(dummyPos)
        ..castTarget(abilityId, 1, table.loadInt(abilityId), target)

    // Cast between 3 - 5 spells with 1 second interval
    // Note: manaburn casting fails on units without mana
    doPeriodicallyCounted(1.00, GetRandomInt(3, 5)) cb ->
        //Temporary vision required by dummy
        let vis3 = createVision(owner, target.getPos(), 300, true)
        vis3.start()
        doAfter(0.2) ->
            vis3.destr()
        abilityId = table.loadInt(GetRandomInt(0, 8))
        // Moving dummy around target so spell casting looks cool
        dummyPos = targetPos.polarOffset(GetRandomReal(0, 360).fromDeg(), GetRandomReal(0, 200))
        new DummyCaster()
            ..owner(owner)
            ..delay(1)
            ..origin(dummyPos)
        ..castTarget(abilityId, 1, table.loadInt(abilityId), target)


init
    initSpellTable()
    EventListener.onTargetCast(ABILITY_METRONOME, (unit caster, unit target) -> onCast(caster, target))
