package Spears

// Standard library imports:
import ClosureEvents
import ClosureTimers
import DummyCaster
import HashMap
import Orders
import AbilityObjEditing
import ObjectIds
import ObjectIdGenerator
import UnitExtensions
import Assets

// Third-party imports:
import ManaBurn

// Local imports:
import LocalObjectIDs

let ABILITY_SPEAR_HIT_DETECTION = compiletime(ABIL_ID_GEN.next())

public let DUMMY_ABILITY_SPEAR = compiletime(ABIL_ID_GEN.next())
public let DUMMY_ABILITY_SPEAR_IRON = compiletime(ABIL_ID_GEN.next())
public let DUMMY_ABILITY_SPEAR_STEEL = compiletime(ABIL_ID_GEN.next())
public let DUMMY_ABILITY_SPEAR_POISON = compiletime(ABIL_ID_GEN.next())
public let DUMMY_ABILITY_SPEAR_RPOISON = compiletime(ABIL_ID_GEN.next())
public let DUMMY_ABILITY_SPEAR_UPOISON = compiletime(ABIL_ID_GEN.next())
public let DUMMY_ABILITY_SPEAR_DARK = compiletime(ABIL_ID_GEN.next())

// If you change the following, update tooltip manually in SpearsDefinition
public let SPEAR_RESPAWN_CHANCE   = 0.666
public let IRON_RESPAWN_CHANCE    = 0.666
public let STEEL_RESPAWN_CHANCE   = 0.666
public let DARK_RESPAWN_CHANCE    = 0.
public let POISON_RESPAWN_CHANCE  = 0.
public let RPOISON_RESPAWN_CHANCE = 0.
public let UPOISON_RESPAWN_CHANCE = 0.

let DARK_SPEAR_MANA_BURN_PERCENTAGE = .40
let DARK_SPEAR_MIN_MANA_BURN        = 10.

enum SpearType
    Spear
    DarkSpear
    IronSpear
    SteelSpear
    PoisonSpear
    UltraPoisonSpear
    RefinedPoisonSpear

class SpearDefinition
    SpearType spearType
    int itemId
    int abilityId
    real recoveryChance
    real deathRecoveryChance

    construct(SpearType aSpearType, int aItemId, int aAbilityId, real aRecoveryChance, real aDeathRecoveryChance)
        spearType = aSpearType
        itemId = aItemId
        abilityId = aAbilityId
        recoveryChance = aRecoveryChance
        deathRecoveryChance = aDeathRecoveryChance

 
let spellToDefinition = new HashMap<int, SpearDefinition>()
let darkSpearCounters = new HashMap<unit, int>()

function createSpearsDefinition()
    spellToDefinition.put(ABILITY_SPEAR, new SpearDefinition(SpearType.Spear, ITEM_SPEAR, DUMMY_ABILITY_SPEAR, SPEAR_RESPAWN_CHANCE, 1.))
    spellToDefinition.put(ABILITY_SPEAR_IRON, new SpearDefinition(SpearType.IronSpear, ITEM_IRON_SPEAR, DUMMY_ABILITY_SPEAR_IRON, IRON_RESPAWN_CHANCE, 1.))
    spellToDefinition.put(ABILITY_SPEAR_STEEL, new SpearDefinition(SpearType.SteelSpear, ITEM_STEEL_SPEAR, DUMMY_ABILITY_SPEAR_STEEL, STEEL_RESPAWN_CHANCE, 1.))
    spellToDefinition.put(ABILITY_SPEAR_POISON, new SpearDefinition(SpearType.PoisonSpear, ITEM_POISON_SPEAR, DUMMY_ABILITY_SPEAR_POISON, POISON_RESPAWN_CHANCE, 0.))
    spellToDefinition.put(ABILITY_SPEAR_RPOISON, new SpearDefinition(SpearType.RefinedPoisonSpear, ITEM_REFINED_POISON_SPEAR, DUMMY_ABILITY_SPEAR_RPOISON, RPOISON_RESPAWN_CHANCE, 0.))
    spellToDefinition.put(ABILITY_SPEAR_UPOISON, new SpearDefinition(SpearType.UltraPoisonSpear, ITEM_ULTRA_POISON_SPEAR, DUMMY_ABILITY_SPEAR_UPOISON, UPOISON_RESPAWN_CHANCE, 0.))
    spellToDefinition.put(ABILITY_SPEAR_DARK, new SpearDefinition(SpearType.DarkSpear, ITEM_DARK_SPEAR, DUMMY_ABILITY_SPEAR_DARK, DARK_RESPAWN_CHANCE, 0.))

function onSpear(unit caster, unit target, SpearDefinition spearDefinition)
    let dummyCaster = new DummyCaster()
        ..delay(8)
        ..owner(caster.getOwner())
        ..origin(caster.getPos())

    Log.debug("Casting")
    let dummy = dummyCaster.castTarget(spearDefinition.abilityId, 1, Orders.creepthunderbolt, target)

    EventListener listener = null
    EventListener deathListener = null

    listener = EventListener.add(EVENT_PLAYER_UNIT_DAMAGED) ->
        if GetEventDamageSource() == dummy and GetEventDamage() != 0. and GetTriggerUnit() == target
            onSpearImpact(caster, target, spearDefinition)

    deathListener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
        if GetKillingUnit() == dummy and GetTriggerUnit() == target
            onSpearKill(caster, target, spearDefinition)

    doAfter(8.) ->
        destroy listener
        destroy deathListener

function onSpearKill(unit _caster, unit target, SpearDefinition spearDefinition)
    if target.isTroll()
        spawnItemChance(spearDefinition.deathRecoveryChance, spearDefinition.itemId, target.getPos())

function onSpearImpact(unit caster, unit target, SpearDefinition spearDefinition)
    if target.isTroll()
        if spearDefinition.spearType == SpearType.DarkSpear
            let burnAmount = DARK_SPEAR_MIN_MANA_BURN +
                (target.getMana() * DARK_SPEAR_MANA_BURN_PERCENTAGE)

            // Perform the mana reduction.
            caster.drainMana(target, burnAmount)
        else
            addSpearResistance(target)
    else
        spawnItemChance(spearDefinition.recoveryChance, spearDefinition.itemId, target.getPos())

function addSpearResistance(unit u)
    SetPlayerAbilityAvailable(u.getOwner(), ABILITY_SPEAR_RESIST, false)
    if not u.hasAbility(ABILITY_SPEAR_RESIST)
        u.addAbility(ABILITY_SPEAR_RESIST)
    else if u.getAbilityLevel(ABILITY_SPEAR_RESIST) < 6
        u.incAbilityLevel(ABILITY_SPEAR_RESIST)

    doAfter(1) ->
        if u.getAbilityLevel(ABILITY_SPEAR_RESIST) > 1
            u.decAbilityLevel(ABILITY_SPEAR_RESIST)
        else
            u.removeAbility(ABILITY_SPEAR_RESIST)

function spawnItemChance(real chance, int itemId, vec2 pos)
    if GetRandomReal(0, 1) <= chance
        createItem(itemId, pos)

function onSpell()
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()
    let spell = GetSpellAbilityId()
    let spearDefinition = spellToDefinition.get(spell)
    if spearDefinition != null
        onSpear(caster, target, spearDefinition)

init
    createSpearsDefinition()
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
        onSpell()
