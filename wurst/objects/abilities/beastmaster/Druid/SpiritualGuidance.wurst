package SpiritualGuidance


// Standard Library Imports:
import BuffObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import LinkedList

// Local Imports:
import ColorUtils
import LocalAssets
import LocalObjectIDs
import MagicResistance
import Pets
import PlayerExtensions
import ToolTipsUtils

let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let BUFF_ORIGINAL_ID = 'Blrl'

// Aura gives 2 stat bonuses in each category to the pet while in range.
let PET_STAT_BONUS = 2

// Aura gives health regen to all allies in range.
let HP_REGEN = 0.33

// Range of the aura.
let RANGE = 800.

// How often the location of the pet is checked.
let PET_PROXIMITY_INTERVAL = 0.3

let ABIL_TT = "Spiritual Guidance"
let ABIL_TT_EXT = "The Druid takes great care of the spirit of those around him, granting allies {0} health regeneration.\n".format(HP_REGEN.toString().color(HEALTH_COLOR))
                    + "\nAdditionally pets affected by " + ABIL_TT.color(GENERAL_COLOR)
                    + " are able to transcend into their spirit form, gaining {0} points for every stats (armor & attack damage).".format(PET_STAT_BONUS.toString().color(HEALTH_COLOR))
let BUFF_TT = "This unit's soul is being cared for by the druid."
let BUFF_TT_EXT = "Granting it {0} health regeneration a second.".format(HP_REGEN.toString().color(HEALTH_COLOR))
let NAME = "Spiritual Guidance"
let ICON = LocalIcons.pASBTNSpiritualGuidance

// List of the pets currently in spirit form.
// Used to decide whether or not stats need to be changed.
let SPIRITS = new LinkedList<unit>

@compiletime function createBuff() returns BuffDefinition
    return new BuffDefinition(BUFF_ID, BUFF_ORIGINAL_ID)
        ..setName(1, NAME)
        ..setTooltipNormal(1, BUFF_TT)
        ..setTooltipNormalExtended(1, BUFF_TT_EXT)
        ..setIcon(ICON)

@compiletime function createSpiritualGuidance() returns AbilityDefinitionUnholyAuracreep
    return new AbilityDefinitionUnholyAuracreep(ABILITY_SPIRITUAL_GUIDANCE)
        ..setLifeRegenerationIncrease(1, HP_REGEN)
        ..setArtTarget(LocalAbilities.spiritualGuidance)
        ..setTooltipNormal(1, makeToolTipNormAura(ABIL_TT))
        ..setTooltipNormalExtended(1, ABIL_TT_EXT)
        ..setMovementSpeedIncrease(1, 0)
        ..setPercentBonus(1, false)
        ..setAreaofEffect(1, RANGE)
        ..setBuffs(1, toRawCode(BUFF_ID))
        ..setIconNormal(ICON)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(0)
        ..setHeroAbility(true)
        ..setCheckDependencies(false)

// Used to toggle the spirit form of the pet when entering/leaving aura range.
public function toggleSpiritForm(unit pet, bool inRange)
    // If the pet is in range and not already a spirit.
    if inRange and not SPIRITS.has(pet)
        // Set the color and transparency to look spirity.
        pet.setVertexColor(150, 255, 150, 180)

        // Increase the damage by 2.
        pet.setBaseDamage(pet.getBaseDamage(0) + PET_STAT_BONUS , 0)

        // Increase the armor by 2.
        pet.setArmor(pet.getArmor() + PET_STAT_BONUS)

        //Increase magic resistance by 2 levels.
        pet.setMagicResist(pet.getMagicResist() + PET_STAT_BONUS)

        // Add this unit to the list of spirits.
        SPIRITS.add(pet)

    // If the unit is out of range and is a spirit.
    else if not inRange and SPIRITS.has(pet)
        removeSpiritForm(pet)

function removeSpiritForm(unit pet)
    // Return the pet to it's normal color and transparency.
    pet.setVertexColor(255, 255, 255, 255)

    // Reduce the damage by 2.
    pet.setBaseDamage(pet.getBaseDamage(0) - PET_STAT_BONUS , 0)

    // Reduce the armor by 2.
    pet.setArmor(pet.getArmor() - PET_STAT_BONUS)

    // Reduce magic resistance by 2 levels.
    pet.setMagicResist(pet.getMagicResist() - PET_STAT_BONUS)

    // Remove this unit from the list of spirits.
    SPIRITS.remove(pet)

// Used to continuously check if the pet is in range of the aura.
function checkPetRadius()
    doPeriodically(PET_PROXIMITY_INTERVAL) (CallbackPeriodic cb) ->
        pets.forEach() (player key, unit value) ->
            // Verify the pet's master has learned Spiritual Guidance.
            if key.getTroll().hasAbility(ABILITY_SPIRITUAL_GUIDANCE)
                // If the pet is in range of the aura.
                if IsUnitInRange(key.getTroll(), value, RANGE)
                    // Transform the pet into it's spirit form.
                    toggleSpiritForm(value, true)

                // If the pet is not in range of the aura.
                else
                    // Transform the pet back into it's non-spirit form.
                    toggleSpiritForm(value, false)

// Used to remove a pet from SPIRITS when it evolves.
// This is done to ensure stats are properly adjusted within the aura.
function onGrow(unit u)
    // If the pet was a spirit before it evolved.
    if SPIRITS.has(u)
        removeSpiritForm(u)

init
    // TODO: Change this to start with a callback system.
    checkPetRadius()

    // Used the detect a pet evolving.
    EventListener.onCast(ABILITY_GROW_PET) (unit caster) ->
        onGrow(EventData.getTriggerUnit())
