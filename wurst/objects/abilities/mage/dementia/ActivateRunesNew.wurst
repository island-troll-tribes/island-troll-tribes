package ActivateRunesNew

// Standard library imports:
import Assets
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import DummyCaster
import LinkedList
import Orders

// Third-party imports:
import Lodash
import LodashExtensions

// Local imports:
import ColorUtils
import DarkGateNew
import DementiaRunesNew
import LocalObjectIDs
import StringExtensions
import ToolTipsUtils

let PORTAL_OFFSET = 350.
let RUNE_CAST_RADIUS = 350.
let SUMMON_EFFECT_PATH = Abilities.ancestralSpiritCaster

let KA  = "Ka".color(COLOR_RED)
let NEL = "Nel".color(COLOR_GREEN)
let LEZ = "Lez".color(COLOR_LIGHT_BLUE)

let KA_RECIPE = KA+" "+LEZ+" "+KA+" "+NEL+" "+KA
let NEL_RECIPE = NEL+" "+NEL+" "+KA+" "+NEL+" "+LEZ
let LEZ_RECIPE = LEZ+" "+NEL+" "+LEZ+" "+LEZ+" "+KA
let SUMMONS_RECIPE = KA_RECIPE+"\n"+NEL_RECIPE+"\n"+LEZ_RECIPE+"\n"

let COOLDOWN = 10.
let DEMENTIA_SUMMON_TOOLTIP_NORM     = "Dementia Summoning"
let DEMENTIA_SUMMON_TOOLTIP_EXTENDED = ("Passively gives the Dementia Master the ability to summon a monster from dementia space using Dementia Runes. "+
                                       "Summoning must be performed close to the center of an open dark gate and you must have a correct rune order. "+
                                       "The Dementia Master managed to decipher the following rune order from the ancient dark book.\n"+
                                       SUMMONS_RECIPE)+("Warning! Dementia Summonings can be unpredictable and dangerous. No creature wants "+
                                       "to be summoned for no reason!|r").color(COLOR_RED)

let ACTIVATE_RUNES_TOOLTIP_NORM     = "Activates Runes"
let ACTIVATE_RUNES_TOOLTIP_EXTENDED = "Casting this spell causes nearby runes to become active and seek targets. Runes will seek any enemies inside "+
                                      "a dark gate if the caster casts this inside the gate as well. This skill can also be used in a gate to perform "+
                                      "a dementia summoning. Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())

class DementiaSummoning extends AbilityDefinitionEvasioncreep
    construct(int newAbilityId, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setChancetoEvade(1, 0)
        this.setIconNormal(Icons.pASBTNGenericSpellImmunity)
        this.setName(DEMENTIA_SUMMON_TOOLTIP_NORM)
        this.setTooltipNormal(1, makeToolTipNormAura(DEMENTIA_SUMMON_TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, DEMENTIA_SUMMON_TOOLTIP_EXTENDED)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)

class ActivateRunes extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setArtTarget("")
        this.setArtEffect("")
        this.setIconNormal(Icons.bTNFaerieFire)
        this.setArtCaster("")
        this.setTargetAttachmentPoint1("")
        this.setCasterAttachmentPoint1("")
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setHeroAbility(false)
        this.setCooldown(1, COOLDOWN)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, ACTIVATE_RUNES_TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, ACTIVATE_RUNES_TOOLTIP_EXTENDED)
        this.setName(ACTIVATE_RUNES_TOOLTIP_NORM)
        this.setHotkeyNormal(hotkey)

@compiletime function createSpells()
    new ActivateRunes(ABILITY_ACTIVATE_RUNE, "A", new Pair(0, 0))
    new DementiaSummoning(ABILITY_DEMENTIA_SUMMONING, new Pair(1, 0))

LinkedList<SummonData> summonsList = new LinkedList<SummonData>()

public class SummonData
    OwnedLinkedList<Runes> runeOrder
    string name
    int orderId
    real cooldown
    int summonUnitID
    construct(Runes r1, Runes r2, Runes r3, Runes r4, Runes r5, string name, int orderId, real cooldown, int summonUnitID)
        runeOrder = new OwnedLinkedList<Runes>()
        runeOrder.push(r1)
        runeOrder.push(r2)
        runeOrder.push(r3)
        runeOrder.push(r4)
        runeOrder.push(r5)
        this.name = name
        this.orderId = orderId
        this.cooldown = cooldown
        this.summonUnitID = summonUnitID

function onCast()
    var caster = GetSpellAbilityUnit()
    DementiaRunesInstance runesInstance = getRunesInstance(caster)
    DarkPortalInstance portalInstance = getDementiaGate(caster)

    if runesInstance == null
        return

    if not trySummonDemon(caster, runesInstance, portalInstance)
        runesCastSpells(caster, runesInstance)

function isValidTarget(unit caster, unit target) returns boolean
    var owner = caster.getOwner()
    return target.getOwner().isEnemyOf(owner) and not target.isInvulnerable() and not target.isType(UNIT_TYPE_STRUCTURE) and target.isAlive() and IsUnitVisible(target, owner)

function runesCastSpells(unit caster, DementiaRunesInstance runesInstance)
    unit target = null
    var owner = caster.getOwner()
    var casterPos = caster.getPos()
    forUnitsInRange(caster.getPos(), RUNE_CAST_RADIUS) t ->
        if isValidTarget(caster, t)
            if (target == null)
                target = t
            else if (target.getPos().distanceToSq(casterPos) > t.getPos().distanceToSq(casterPos))
                target = t

            for r in runesInstance.runes
                DementiaRuneSpell spell = r.getRandomRuneSpellID()
                new DummyCaster()
                    ..delay(1)
                    ..owner(owner)
                    ..origin(r.pos.toVec2())
                    ..castTarget(spell.spellId, 1, spell.orderId, target)
                destroy r

function Runes.toString() returns string
    switch this
        case Ka
            return "Ka"
        case Nel
            return "Nel"
        case Lez
            return "Lez"
        default
            print("ERROR: Unsupported rune type")
            return ""

function findMatchingSummonData(OwnedLinkedList<Runes> runes) returns SummonData
    for summonInfo in summonsList
        if summonInfo.runeOrder.equals(runes)
            return summonInfo
    return null

function trySummonDemon(unit caster, DementiaRunesInstance runesInstance, DarkPortalInstance portalInstance) returns bool
    if runesInstance != null and portalInstance != null and runesInstance.runes.size() > 0 and caster.hasAbility(ABILITY_DEMENTIA_SUMMONING)
        if portalInstance.isUnitInsidePortal(caster)
            //Have portal, and standing inside portal
            var runeSequence = new OwnedLinkedList<Runes>()
            for r in runesInstance.runes
                runeSequence.push(r.runeType)

            //Find matching summon for rune sequence and summon if found
            var summonData = findMatchingSummonData(runeSequence)
            destroy runeSequence
            if summonData != null
                doSummon(summonData, portalInstance, caster.getOwner())
                for r in runesInstance.runes
                    destroy r
                return true
    return false

function doSummon(SummonData summon, DarkPortalInstance portalInstance, player owner)
    //Spawn-effect
    var efx = addEffect(SUMMON_EFFECT_PATH, portalInstance.centerPos + vec3(0, 0, 300))
    efx.setScale(2)

    //On the right timing after spawned effect, do actions
    doAfter(1.25) ->
        efx.destr()
        PlaySound(Sounds.shadowHunterReady1)
        printTimedToPlayer("You have summoned ".color(GENERAL_COLOR) + summon.name + "!".color(GENERAL_COLOR), 5, owner)
        portalInstance.summons.push(new Summon(createUnit(owner, summon.summonUnitID, portalInstance.centerPos, angle(-90 * DEGTORAD)), summon.cooldown, summon.orderId))


function initSummonsData()
    summonsList.push(new SummonData(Runes.Ka , Runes.Lez, Runes.Ka , Runes.Nel, Runes.Ka , "Kalezka Nelka".color(COLOR_RED)    , Orders.acidbomb   , 1  , UNIT_LOCUST_FIRE_LORD))
    summonsList.push(new SummonData(Runes.Lez, Runes.Nel, Runes.Lez, Runes.Lez, Runes.Ka , "Leznel Lezlezka".color(COLOR_TEAL) , Orders.thunderbolt, 1  , UNIT_LOCUST_WATER_LORD))
    summonsList.push(new SummonData(Runes.Nel, Runes.Nel, Runes.Ka , Runes.Nel, Runes.Lez, "Nelnelka Nellez".color(COLOR_GREEN), Orders.soulburn   , 1.5, UNIT_LOCUST_GHOST))

init
    initSummonsData()
    registerSpellEffectEvent(ABILITY_ACTIVATE_RUNE, () -> onCast())
