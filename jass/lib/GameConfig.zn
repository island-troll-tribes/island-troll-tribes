library GameConfig {
  public struct GameConfig {
    public integer numTribes = 2;
    public integer playersPerTribe = 6;
    public boolean enableTransportShips = true;
    public integer heatPerCast = 15;
    public real hostileSpawnRate = 1.0;
    public boolean allTrollEnabled = false;
    public integer allTrollUnitId = 0;
    public boolean forcedDuelEnabled = false;
    public real forcedDuelAfter = 0;
    public real gracePeriodDuration = 8.0;
    public boolean respawnSystemEnabled = false;
    public boolean randomizeSpawns = false;
    public boolean startWithFire = false;
    public boolean startWithOneFire = false;
    public boolean startWithSpiritWard = false;
    public boolean oldRandomEnabled = false;
    public integer selectionTimeAllowed = 40;
    public boolean eliminationMode = false;
    public integer heatMaximum = 100;
    public boolean tradeEnabled = true;
    public boolean forestFireEnabled = false;
    public real forestFireDistance = 0;
    public real forestFireAfter = 0;
    public boolean coralBlockers = false;
    public boolean testMode = false;

    static thistype instance;

    public static method getInstance() -> thistype {
      return instance;
    }

    public method setAllTrollEnabled(integer unitId) -> thistype {
      this.allTrollEnabled = true;
      this.allTrollUnitId = unitId;
      return this;
    }

    public method isAllTrollEnabled() -> boolean {
      return this.allTrollEnabled;
    }

    public method getAllTrollUnitId() -> integer {
      return allTrollUnitId;
    }

    public method setNumPlayersPerTribe(integer n) -> thistype {
      this.numTribes = 12 / n;
      this.playersPerTribe = n;
      return this;
    }

    public method getNumTribes() -> integer {
      return this.numTribes;
    }

    public method getNumPlayersPerTribe() -> integer {
      return this.playersPerTribe;
    }

    public method setForcedDuel(real numMinutes) -> boolean {
      if (numMinutes < this.gracePeriodDuration) {
        return false;
      }
      this.forcedDuelEnabled = true;
      this.forcedDuelAfter = numMinutes;
      return true;
    }

    public method isForcedDuelEnabled() -> boolean {
      return this.forcedDuelEnabled;
    }

    public method getForcedDuelAfter() -> real {
      return this.forcedDuelAfter;
    }

    public method isRespawnSystemEnabled() -> boolean {
      return this.respawnSystemEnabled;
    }

    public method setRespawnSystemEnabled(boolean value) {
      this.respawnSystemEnabled = value;
    }

    public method setGracePeriodDuration(real numMinutes) -> boolean {
      if (this.forcedDuelEnabled && numMinutes > this.forcedDuelAfter) {
        return false;
      }
      this.gracePeriodDuration = numMinutes;
      return true;
    }

    public method getGracePeriodDuration() -> real {
      return this.gracePeriodDuration;
    }

    public method isGracePeriodEnabled() -> boolean {
      return this.gracePeriodDuration > 0;
    }

    public method setRandomSpawns(boolean value) {
      this.randomizeSpawns = value;
    }

    public method isRandomSpawns() -> boolean {
      return this.randomizeSpawns;
    }

    public method setStartWithFire(boolean value) {
      this.startWithFire = true;
    }

    public method isStartWithFire() -> boolean {
      return this.startWithFire;
    }

    public method setStartWithOneFire(boolean value) {
      this.startWithOneFire = true;
    }

    public method isStartWithOneFire() -> boolean {
      return this.startWithOneFire;
    }

    public method setStartWithSpiritWard(boolean value) {
      this.startWithSpiritWard = true;
    }

    public method isStartWithSpiritWard() -> boolean {
      return this.startWithSpiritWard;
    }

    public method getHostileSpawnRate() -> real {
      return udg_BADDIE_BASE;
    }

    public method setHostileSpawnRate(real value) {
      udg_BADDIE_BASE = value;
    }

    public method setOldRandomEnabled(boolean value) {
      oldRandomEnabled = value;
    }

    public method isOldRandomEnabled() -> boolean {
      return oldRandomEnabled;
    }

    public method setSelectionTimeAllowed(integer value) {
      this.selectionTimeAllowed = value;
    }

    public method getSelectionTimeAllowed() -> integer {
      return this.selectionTimeAllowed;
    }

    public method setEliminationEnabled(boolean value) {
      this.eliminationMode = true;
      udg_ELIMINATION = true;
    }

    public method getEliminationEnabled() -> boolean {
      return this.eliminationMode;
    }

    public method setHeatMaximum(integer amount) {
      this.heatMaximum = amount;
      udg_MAX_HEAT = amount;
      thistype.adjustMaxHeat();
    }

    public method getHeatMaximum() -> integer {
      return this.heatMaximum;
    }

    public method setTradeEnabled(boolean value) {
      this.tradeEnabled = value;
    }

    public method getTradeEnabled() -> boolean {
      return this.tradeEnabled;
    }

    static method adjustMaxHeat() {
      ForForce(bj_FORCE_ALL_PLAYERS, function() {
        SetPlayerState(GetEnumPlayer(), PLAYER_STATE_RESOURCE_GOLD, udg_MAX_HEAT);
      });
    }

    public method setForestFire(real numMinutes, real distance) {
      this.forestFireEnabled = true;
      this.forestFireAfter = numMinutes;
      this.forestFireDistance = distance;
    }

    public method isForestFireEnabled() -> boolean {
      return this.forestFireEnabled;
    }

    public method getForestFireAfter() -> real {
      return this.forestFireAfter;
    }

    public method getForestFireDistance() -> real {
      return this.forestFireDistance;
    }

    public method isCoralBlockersEnabled() -> boolean {
      return this.coralBlockers;
    }

    public method setCoralBlockers(boolean value) {
      this.coralBlockers = value;
    }

    public method setTestMode(boolean value) {
      this.testMode = value;
    }

    public method getTestMode() -> boolean {
      return this.testMode;
    }

    static method onInit() {
      instance = thistype.create();
    }
  }
}
