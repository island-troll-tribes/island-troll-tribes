package DarkGate

import RegisterEvents
import HashMap
import LinkedList
import ClosureTimers
import Orders
import ClosureForGroups
import DummyCaster
import Assets
import ChannelAbilityPreset
import Lodash
import ToolTipsUtils
import LocalObjectIDs

let TMP_CHAIN_LIGHTNING_ID  = 'PRTA'
let TMP_FROST_NOVA_ID       = 'PRTC'
let TMP_FORKED_LIGHTNING_ID = 'PRTD'
let TMP_MANA_BURN_ID        = 'PRTE'
let TMP_TSUNAMI_ID          = 'PRTG'
let TMP_FIRE_BOLT_ID        = 'PRTH'
let TMP_IMPALE_ID           = 'PRTF'

let GROW_DURATION = 10.
let MINIMUM_GROW_DURATION = 1.5
let DURATION_MAX = 40.
let ORB_COUNT = 7
let ORB_LOOP_INTERVAL = 0.03125
let ORB_ANGULARSPEED_SUMMON = 80.
let ORB_ANGULARSPEED_ACTIVE = 10.
let SPELLCAST_INTERVAL_FASTEST = 1.5
let SPELLCAST_INTERVAL_START = 2.5
let PORTAL_GROWSPEED = 100.
let SPELLCAST_EFFECT_PATH = Abilities.darkPortalTarget
let TRAIL_EFFECT_PATH = Abilities.avengerMissile
let ORB_EFFECT_PATH = Objects.crystalShard

let MANACOST = 80
let COOLDOWN = 70.
let ANIMATION_NAMES = "spell,throw"
let TOOLTIP_NORM = "Open Dark Gate"
let TOOLTIP_EXTENDED = "The Dementia Summoner channels pure balls or dark energy which he uses to construct a gate. "+
                       "As the balls dissipate, they cast spells on enemies inside the gate. The longer the gate is channeled "+
                       "the longer it lasts and the faster the orbs cast spells. Runes carried by the Dementia Master have increased "+
                       "range inside the gate and he can use the gate and Dementia Summoning to summon monsters from the Dementia Realm. "+
                       "Can last up to {0} seconds, has {1} seconds cooldown.".format(DURATION_MAX.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())

class DarkGate extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setFollowThroughTime(1, GROW_DURATION)
        this.setIconNormal(Icons.bTNPortal)
        this.setAnimationNames(ANIMATION_NAMES)
        this.setTargetAttachmentPoint1("")
        this.setCasterAttachmentPoint1("")
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setHeroAbility(false)
        this.setManaCost(1, MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setName(TOOLTIP_NORM)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        this.setHotkeyNormal(hotkey)
        this.setBaseOrderID(1, "immolation")

function createDummyChainlightning()
    new AbilityDefinitionChainLightningcreep(TMP_CHAIN_LIGHTNING_ID)
    ..setAnimationNames("")
    ..setDamageReductionperTarget(1, 0.1)
    ..setDamageperTarget(1, 20)
    ..setNumberofTargetsHit(1, 4)
    ..setAreaofEffect(1, 2000)
    ..setCastRange(1, 2000)
    ..setCastingTime(1, 0)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setCooldown(1,0)

function createDummyFrostnova()
    new AbilityDefinitionFrostNovacreep(TMP_FROST_NOVA_ID)
    ..setAnimationNames("")
    ..setCastRange(1, 4000)
    ..setCastingTime(1, 0)
    ..setDurationHero(1, 4)
    ..setDurationNormal(1, 4)
    ..setAreaofEffectDamage(1, 10)
    ..setSpecificTargetDamage(1, 15)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setCooldown(1,0)

function createDummyForkedlightning()
    new AbilityDefinitionSeaWitchForkedLightning(TMP_FORKED_LIGHTNING_ID)
    ..setCastRange(1, 4000)
    ..setAnimationNames("")
    ..setCastingTime(1, 0)
    ..setDamageperTarget(1, 20)
    ..setDistance(1, 2000)
    ..setNumberofTargetsHit(1, 2)
    ..setAreaofEffect(1, 500)
    ..setFinalArea(1, 500)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setCooldown(1,0)

function createDummyManaburn()
    new AbilityDefinitionManaBurndemon(TMP_MANA_BURN_ID)
    ..setCastRange(1, 4000)
    ..setAnimationNames("")
    ..setCastingTime(1, 0)
    ..setMaxManaDrained(1, 10)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setCooldown(1,0)

function createDummyTsunami()
    new AbilityDefinitionCrushingWave(TMP_TSUNAMI_ID)
    ..setAnimationNames("")
    ..setCastRange(1, 4000)
    ..setDistance(1, 2000)
    ..setCastingTime(1, 0)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setDamage(1, 25)
    ..setDistance(1, GROW_DURATION * PORTAL_GROWSPEED * 2)
    ..setMaxDamage(1, 200)
    ..setCooldown(1,0)

function createDummyFirebolt()
    new AbilityDefinitionFireBoltcreep(TMP_FIRE_BOLT_ID)
    ..setAnimationNames("")
    ..setCastRange(1, 2000)
    ..setCastingTime(1, 0)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setDamage(1, 25)
    ..setDurationHero(1, 0.7)
    ..setDurationNormal(1, 2.1)
    ..setCooldown(1,0)

function createDummyImpale()
    new AbilityDefinitionImpaleCreep(TMP_IMPALE_ID)
    ..setAnimationNames("")
    ..setCastRange(1, 2500)
    ..setAirTimeseconds(1, 0.7)
    ..setCastingTime(1, 0)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setDamageDealt(1, 10)
    ..setWaveDistance(1, GROW_DURATION * PORTAL_GROWSPEED * 2)
    ..setWaveTimeseconds(1, 0)
    ..setDurationHero(1, 0.5)
    ..setDurationNormal(1, 2)
    ..setCooldown(1,0)

@compiletime function createDarkGateSpells()
    new DarkGate(ABILITY_DARK_GATE, "Q", new Pair(0, 0))
    createDummyChainlightning()
    createDummyFrostnova()
    createDummyForkedlightning()
    createDummyManaburn()
    createDummyTsunami()
    createDummyFirebolt()
    createDummyImpale()

let darkPortalInstances = new HashMap<unit, DarkPortalInstance>()
let spellList = new LinkedList<OrbSpell>()

enum TARGET_TYPE
    ground
    targeted

class OrbSpell
    int spellId
    int orderId
    string name
    construct(string name, int spellId, int orderId)
        this.spellId = spellId
        this.orderId = orderId
        this.name = name

class PortalOrb
    DarkPortalInstance instance
    effect orbFX = null
    effect trailFX = null
    vec3 pos

    construct (DarkPortalInstance portal, vec3 startPos)
        instance = portal
        pos = startPos
        orbFX = addEffect(ORB_EFFECT_PATH, startPos)
        orbFX.setTimeScale(0)
        trailFX = addEffect(TRAIL_EFFECT_PATH, startPos)

    function setPos(vec3 newpos)
        pos = newpos
        //Adjust orbs a little lower since the SFX looks like its higher
        orbFX.setPos(pos - vec3(0,0,75))
        trailFX.setPos(pos)

    function setFacing(angle facing)
        orbFX.setRoll(facing)

    function castRandomSpell(unit t)
        let owner = instance.ownerUnit.getOwner()
        var randomSpell = spellList.get( GetRandomInt(0, spellList.size() - 1))
        //Dont use manaburn on units without mana pools
        while (t.getMaxMana() <= 10 and randomSpell.name == "Manaburn")
            randomSpell = spellList.get( GetRandomInt(0, spellList.size() - 1))

        if (randomSpell.name == "Crushingwave")
            new DummyCaster()
                ..owner(owner)
                ..origin(this.pos.toVec2())
                ..delay(2.5)
                ..castTarget(randomSpell.spellId, 1, randomSpell.orderId, t)
        else
            new DummyCaster()
                ..owner(owner)
                ..origin(this.pos.toVec2())
                ..castTarget(randomSpell.spellId, 1, randomSpell.orderId, t)
        addEffect(SPELLCAST_EFFECT_PATH, this.pos).destr()

    ondestroy
        instance.orbs.remove(this)
        orbFX.destr()
        trailFX.destr()

public class Summon
    unit summonUnit
    real cooldown
    real elapsedLifetime
    real lastAttack
    int orderId
    construct(unit u, real cooldown, int orderId)
        this.summonUnit = u
        this.cooldown = cooldown
        this.orderId = orderId
        this.elapsedLifetime = 0
        this.lastAttack = -cooldown //Attack right away after spawn


    ondestroy
        this.summonUnit.kill()
        //this.summonUnit.remove()


// TODO: something's off with the orb position, it is barely above the ground
// gotta check it out at some point
public class DarkPortalInstance
    angle orbAngle
    unit ownerUnit
    bool isChanneling
    real portalRadius
    real elapsedLifetime
    real channeledTime
    real lastSpellCastTimestamp
    real spellIntervalCurrent
    real durationBuildup
    vec3 centerPos
    CallbackCounted portalActiveLoop = null
    CallbackCounted portalCreationLoop = null

    LinkedList<PortalOrb> orbs = new LinkedList<PortalOrb>()
    LinkedList<Summon> summons = new LinkedList<Summon>()
    Comparator<unit> summonAttackComparator = null

    construct (unit caster, vec3 pos)
        ownerUnit = caster
        isChanneling = true
        portalRadius = 50
        centerPos = pos
        elapsedLifetime = 0
        channeledTime = 0
        durationBuildup = 0
        lastSpellCastTimestamp = -9999
        orbAngle = angle(0)
        spellIntervalCurrent = SPELLCAST_INTERVAL_START
        this.summonAttackComparator = (a, b) -> summonAttackOrderSort(a, b)
        startPortalCreation()

    function startPortalCreation()
        for i = 1 to ORB_COUNT
            orbs.push(new PortalOrb(this, centerPos))

        portalCreationLoop = doPeriodicallyTimed(ORB_LOOP_INTERVAL, GROW_DURATION) portalGrowLoop ->
            if not isChanneling or portalGrowLoop.isLast()
                portalGrowLoop.stop()
                this.startPortalLoop()
            else
                portalGrowLoopUpdate()

    function portalGrowLoopUpdate()
        //Avoid creating vision on every loop cycle with mod check
        if (portalCreationLoop.getCount() mod 30 == 0)
            let vis = createVision(ownerUnit.getOwner(), centerPos.toVec2(), portalRadius+100, true)
            vis.start()
            //Should be the full duration of portal calculated below for vision mods destruction
            doAfter(durationBuildup + GROW_DURATION - elapsedLifetime) ->
                vis.destr()

        //Update things that change with channeling time
        spellIntervalCurrent = SPELLCAST_INTERVAL_START - (SPELLCAST_INTERVAL_START - SPELLCAST_INTERVAL_FASTEST) * (elapsedLifetime/GROW_DURATION)
        elapsedLifetime += ORB_LOOP_INTERVAL
        channeledTime += ORB_LOOP_INTERVAL
        portalRadius += ORB_LOOP_INTERVAL * PORTAL_GROWSPEED
        durationBuildup = (channeledTime / GROW_DURATION) * DURATION_MAX
        orbAngle = angle(orbAngle.radians() + ORB_LOOP_INTERVAL * ORB_ANGULARSPEED_SUMMON * DEGTORAD)

        //Move orbs around
        updateOrbAngles()

    function isUnitInsidePortal(unit u) returns boolean
        return this.centerPos.toVec2().distanceTo(u.getPos()) <= this.portalRadius

    function randomOrbCastSpell()
        let orb = this.orbs.get( GetRandomInt(0, orbs.size() - 1))
        let centerPosVec2 = centerPos.toVec2()

        //Find random target and cast + spawn effect on orb
        let targets = CreateGroup()..enumUnitsInRange(centerPosVec2, portalRadius)
        targets.forEachIn(u -> begin
            if not isValidEnemyTarget(u)
                targets.removeUnit(u)
        end)
        let target = targets.getRandomUnit()
        if target != null
            orb.castRandomSpell(target)
        targets.destr()

    function updateOrbAngles()
        //Calculate orb angles and set it
        let orbOffset = angle((360 / orbs.size())*DEGTORAD)
        int i = 0
        for o in orbs
            let indexOrbAngle = orbAngle + orbOffset * i.toReal()
            o.setPos(centerPos.offset2d(indexOrbAngle, portalRadius))
            o.setFacing(o.pos.angleTo2d(centerPos))
            i = i + 1

    function startPortalLoop()
        if channeledTime < MINIMUM_GROW_DURATION
            destroy this
        else
            portalActiveLoop = doPeriodicallyTimed(ORB_LOOP_INTERVAL, durationBuildup) portalLoop ->
                //Check for destruction conditions first before accessing any objects
                if (portalLoop.isLast())
                    destroy this
                else
                    portalLoopUpdate()

    function portalLoopUpdate()
        //Check time since last spell was cast and cast
        if (this.elapsedLifetime - this.lastSpellCastTimestamp >= this.spellIntervalCurrent)
            this.lastSpellCastTimestamp = this.elapsedLifetime
            randomOrbCastSpell()
        elapsedLifetime += ORB_LOOP_INTERVAL
        orbAngle = angle(orbAngle.radians() + ORB_LOOP_INTERVAL * ORB_ANGULARSPEED_ACTIVE * DEGTORAD)
        updateOrbAngles()
        updateSummons()

    function isValidEnemyTarget(unit t) returns boolean
        return t.getOwner().isEnemyOf(ownerUnit.getOwner()) and not t.isInvulnerable() and not t.isType(UNIT_TYPE_STRUCTURE) and t.isAlive() and IsUnitVisible(t, ownerUnit.getOwner())

    function isValidAllyTarget(unit t) returns boolean
        return not t.isInvulnerable() and not t.isType(UNIT_TYPE_STRUCTURE) and t.isAlive() and IsUnitVisible(t, ownerUnit.getOwner())

    private function summonAttackOrderSort(unit a, unit b) returns int
        //Sort by enemies - allies
        let aIsEnemy = a.getOwner().isEnemyOf(ownerUnit.getOwner())
        let bIsEnemy = b.getOwner().isEnemyOf(ownerUnit.getOwner())
        if (aIsEnemy and not bIsEnemy)
            return -1
        if (not aIsEnemy and bIsEnemy)
            return 1

        //Sort by units without buff - with buff - BUFF_UNHOLY_FIRE -> Unholy Flames, B00Q -> Bad Breath
        let aHasBuff = a.hasAbility(BUFF_UNHOLY_FIRE) or a.hasAbility(BUFF_GHOST_DEMON_SOUL_BURN)
        let bHasBuff = b.hasAbility(BUFF_UNHOLY_FIRE) or b.hasAbility(BUFF_GHOST_DEMON_SOUL_BURN)
        if (not aHasBuff and bHasBuff)
            return -1
        if (aHasBuff and not bHasBuff)
            return 1

        //Sort by lowest distance
        return (a.getPos().distanceToSq(centerPos.toVec2()) - b.getPos().distanceToSq(centerPos.toVec2())).round()

    function summonTryAttacking(Summon s)
        //Checking time since last attack
        if (s.elapsedLifetime - s.lastAttack >= s.cooldown)

            //Create group and filter valid targets
            let targets = CreateGroup()..enumUnitsInRange(centerPos.toVec2(), portalRadius)
            targets.forEachIn(u -> begin
                if not (isValidAllyTarget(u) or isValidEnemyTarget(u))
                    targets.removeUnit(u)
            end)

            //Convert into list and sort
            let targetlist = targets.asList()
            let target = targetlist
                ..sortWith(summonAttackComparator)
                .getFirst()

            if target != null and not target.isInvulnerable()
                s.summonUnit.issueTargetOrderById(s.orderId, target)
                s.lastAttack = s.elapsedLifetime

            //Destroy temporary group and list
            targets.destr()
            destroy targetlist

            //Create object for closure to store unit
            /*
            unitObject _summonTarget = new unitObject(null)
            forUnitsInRange(centerPos.toVec2(), portalRadius) t ->
                //Try to find enemies first, pick targets without buffs over those who have em
                if _summonTarget.value == null or _summonTarget.value.hasAbility(BUFF_UNHOLY_FIRE) or _summonTarget.value.hasAbility(BUFF_GHOST_DEMON_SOUL_BURN)
                    if isValidEnemyTarget(t)
                        _summonTarget.value = t

                if _summonTarget.value == null or _summonTarget.value.hasAbility(BUFF_UNHOLY_FIRE) or _summonTarget.value.hasAbility(BUFF_GHOST_DEMON_SOUL_BURN)
                    if isValidAllyTarget(t)
                        _summonTarget.value = t

            if _summonTarget.value != null
                s.summonUnit.issueTargetOrderById(s.orderId, _summonTarget.value)
                s.lastAttack = s.elapsedLifetime

            destroy _summonTarget
            */

    function updateSummons()
        for s in summons
            summonTryAttacking(s)
            s.elapsedLifetime += ORB_LOOP_INTERVAL

    ondestroy
        orbs.forEach(o -> destroy o)
        destroy orbs

        summons.forEach(s -> destroy s)
        destroy summons

        destroy summonAttackComparator

        if darkPortalInstances.has(ownerUnit)
            if (darkPortalInstances.get(ownerUnit) == this)
                darkPortalInstances.remove(ownerUnit)

function onCast()
    let caster = GetSpellAbilityUnit()

    //Destroy previous instance
    if darkPortalInstances.has(caster)
        let previous = darkPortalInstances.get(caster)
        if previous.portalActiveLoop != null
            previous.portalActiveLoop.stop()
        if previous.portalActiveLoop != null
            previous.portalActiveLoop.stop()

    //Spawn the portal, a bit higher than the caster on Z axis
    darkPortalInstances.put(caster, new DarkPortalInstance(caster, caster.getPos3Real() + vec3(0, 0, 50)))

function onEndCast()
    if GetSpellAbilityId() == ABILITY_DARK_GATE
        let caster = GetSpellAbilityUnit()
        var instance = darkPortalInstances.get(caster)
        instance.isChanneling = false

function createSpellList()
    spellList.push(new OrbSpell("Chain lightning" ,TMP_CHAIN_LIGHTNING_ID , Orders.chainlightning ))
    spellList.push(new OrbSpell("Thistle poison"  ,ABILITY_THISTLE        , Orders.shadowstrike   ))
    spellList.push(new OrbSpell("Frost nova"      ,TMP_FROST_NOVA_ID      , Orders.frostnova      ))
    spellList.push(new OrbSpell("Forked lightning",TMP_FORKED_LIGHTNING_ID, Orders.forkedlightning))
    spellList.push(new OrbSpell("Manaburn"        ,TMP_MANA_BURN_ID       , Orders.manaburn       ))
    spellList.push(new OrbSpell("Crushingwave"    ,TMP_TSUNAMI_ID         , Orders.carrionswarm   ))
    spellList.push(new OrbSpell("Firebolt"        ,TMP_FIRE_BOLT_ID       , Orders.firebolt       ))
    spellList.push(new OrbSpell("Impale"          ,TMP_IMPALE_ID          , Orders.impale         ))

public function getDementiaGate(unit owner) returns DarkPortalInstance
    if (darkPortalInstances.has(owner))
        return darkPortalInstances.get(owner)
    else
        return null

init
    createSpellList()
    registerSpellEffectEvent(ABILITY_DARK_GATE, () -> onCast())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onEndCast())
