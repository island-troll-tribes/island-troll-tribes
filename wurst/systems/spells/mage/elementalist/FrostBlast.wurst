package FrostBlast

import ClosureEvents
import ClosureTimers
import AbilityObjEditing
import OverCharge
import Assets
import ObjectIdGenerator
import ClosureForGroups
import Orders
import BuffObjEditing
import ObjectIds
import DummyCaster

constant let ABILITY_ID = 'ESFB'
constant let DUMMY_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
constant let DUMMY_ABILITY_BUFF_ID = compiletime(BUFF_ID_GEN.next())
constant let COOLDOWN = 35.
constant let MISSILE_SPEED = 1100.
constant let MISSILE_LIFETIME = 1.5
constant let MANACOST = 15
constant let IMPACT_TRIGGER_AOE = 130.
constant let MISSILE_FLY_HEIGHT = 140.
constant let IMPACT_EFFECT_AOE = 250.
constant let OVERCHARGE_DAMAGE_MULTIPLIER = 0.3
constant let OVERCHARGE_PROJECTILE_COUNT = 7
constant let OVERCHARGE_PROJECTILE_INTERVAL = 0.35
constant let IMPACT_EFFECT_MIN_DAMAGE = 25.
constant let IMPACT_EFFECT_MAX_DAMAGE = 65.
constant let IMPACT_EFFECT_MIN_SLOW_AMOUNT = 0.35
constant let IMPACT_EFFECT_MAX_SLOW_AMOUNT = 0.75
constant let IMPACT_EFFECT_MIN_DURATION = 2
constant let IMPACT_EFFECT_MAX_DURATION = 5
constant let SPAWN_OFFSET_DISTANCE = 50.
constant let LOOP_INTERVAL = 0.03125
constant let SPELL_ICON = Icons.bTNFrostBolt
constant let PROJECTILE_EFFECT_PATH = "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl"
constant let PROJECTILE_EFFECT_PATH_OVERCHARGED = "Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl" //"Abilities\\Spells\\Other\\FrostBolt\\FrostBoltMissile.mdl"

constant let IMPACT_EFFECT_PATH = "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl"
constant let TOOLTIP_NORM = "|c00ffcc00E|r - Frost Blast"
constant let TOOLTIP_EXT = "Shoots out a missile of frost that explodes on impact, dealing |c00ff000025 - 65|r damage to units in a small area and slows their movement and attack speeds by 35% - 75% for 2 - 5 seconds with effects increasing by distance travelled before impact."

@compiletime function createBuff()
    new BuffDefinition(DUMMY_ABILITY_BUFF_ID, 'Bfro')
    ..setTooltipNormal(1, "Frost Blast slow")
    ..setTooltipNormalExtended(1, "Slowed by Frost Blast")
    ..setIcon(SPELL_ICON)
    ..setIconNormal(1, SPELL_ICON)

@compiletime function createDummySlow()
    new AbilityDefinitionSlowCreep(DUMMY_ABILITY_ID)
    ..setLevels(10)
    ..setArtCaster("")
    ..setArtEffect("")
    ..setArtTarget("")
    ..setArtSpecial("")
    ..presetBuffs(lvl -> toRawCode(DUMMY_ABILITY_BUFF_ID))
    ..presetCastingTime(lvl -> 0)
    ..presetCastRange(lvl -> 9999)
    ..presetAreaofEffect(lvl -> 0)
    ..presetManaCost(lvl -> 0)
    ..presetCooldown(lvl -> 0)
    ..presetAttackSpeedFactor(lvl -> IMPACT_EFFECT_MIN_SLOW_AMOUNT + (IMPACT_EFFECT_MAX_SLOW_AMOUNT-IMPACT_EFFECT_MIN_SLOW_AMOUNT)/9* (lvl-1))
    ..presetMovementSpeedFactor(lvl -> IMPACT_EFFECT_MIN_SLOW_AMOUNT + (IMPACT_EFFECT_MAX_SLOW_AMOUNT-IMPACT_EFFECT_MIN_SLOW_AMOUNT)/9* (lvl-1))
    ..presetDurationHero(lvl -> IMPACT_EFFECT_MIN_DURATION + (IMPACT_EFFECT_MAX_DURATION-IMPACT_EFFECT_MIN_DURATION)/9 * (lvl-1))
    ..presetDurationNormal(lvl -> IMPACT_EFFECT_MIN_DURATION + (IMPACT_EFFECT_MAX_DURATION-IMPACT_EFFECT_MIN_DURATION)/9 * (lvl-1))
    ..setLevelSkipRequirement(0)
    ..setHeroAbility(false)
    ..setItemAbility(false)


@compiletime function createSpell()
    new AbilityDefinitionIllidanChannel(ABILITY_ID)
    ..setTargetType(1, 0)
    ..setAnimationNames("")
    ..setArtCaster("")
    ..setArtEffect("")
    ..setArtTarget("")
    ..setArtSpecial("")
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(1)
    ..setButtonPositionResearchX(0)
    ..setButtonPositionResearchY(1)
    ..setIconNormal(SPELL_ICON)
    ..setIconResearch(SPELL_ICON)
    ..setIconTurnOff(SPELL_ICON)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setHotkeyNormal("E")
    ..setName("Frost Blast")
    ..setDisableOtherAbilities(1, false)
    ..setFollowThroughTime(1, 0)
    ..setCastingTime(1, 0)
    ..setTooltipNormal(1, TOOLTIP_NORM)
    ..setTooltipNormalExtended(1, TOOLTIP_EXT)
    ..setBaseOrderID(1, "frostarmoroff")
    ..setOrderStringUseTurnOn("frostarmoroff")
    ..setOrderStringActivate("frostarmoroff")
    ..setOrderStringDeactivate("frostarmoroff")
    ..setOrderStringTurnOff("frostarmoroff")
    ..setOptions(1, 1)
    ..setCooldown(1, COOLDOWN)
    ..setManaCost(1, MANACOST)
    ..setTargetType(1, 3)
    ..setCastRange(1, MISSILE_SPEED * MISSILE_LIFETIME)

class FrostBlastProjectile
    real lifeTime
    unit ownerUnit
    angle ang
    vec3 pos
    effect efx
    bool foundTarget
    bool exploded
    bool isOvercharged

    construct(unit owner, vec3 pos, angle ang, bool isOvercharged)
        this.ownerUnit = owner
        this.lifeTime = 0
        this.isOvercharged = isOvercharged
        this.ang = ang
        this.pos = pos
        if isOvercharged
            this.efx = addEffect(PROJECTILE_EFFECT_PATH_OVERCHARGED, pos)
            efx.setScale(1.5)
        else
            this.efx = addEffect(PROJECTILE_EFFECT_PATH, pos)
        this.foundTarget = false
        this.exploded = false
        this.efx.setRoll(ang)


    ondestroy
        if this.efx != null
            this.efx.destr()

    function updateLoop()
        //Dont do anything and wait for destruction by closure if already exploded
        if this.exploded
            return
        this.lifeTime += LOOP_INTERVAL
        vec3 newPos = this.pos.offset2d(this.ang, MISSILE_SPEED * LOOP_INTERVAL)
        let terrainZ = newPos.getTerrainZ()
        newPos.z = terrainZ + MISSILE_FLY_HEIGHT
        this.efx.setPos(newPos)
        this.pos = newPos
        checkForImpacts()
        if (this.foundTarget)
            spawnTemporaryVision(450, 2)
            explode()

    function checkForImpacts()
        this.foundTarget = false
        forUnitsInRange(this.pos.toVec2(), IMPACT_TRIGGER_AOE) u ->
            if isValidTarget(ownerUnit, u)
                this.foundTarget = true

    function spawnTemporaryVision(real radius, real duration)
        let vis = createVision(ownerUnit.getOwner(), this.pos.toVec2(), radius, true)
        vis.start()
        doAfter(duration) ->
            vis.destr()

    function explode()
        //Scale slow and damage by missile flight time relative to 80% of max lifetime
        var effectScalingValue = this.lifeTime/(MISSILE_LIFETIME*0.75)
        if effectScalingValue > 1
            effectScalingValue = 1

        int slowTier = 1 + (9*effectScalingValue).round()
        real damage = IMPACT_EFFECT_MIN_DAMAGE + (IMPACT_EFFECT_MAX_DAMAGE-IMPACT_EFFECT_MIN_DAMAGE)*effectScalingValue
        if (isOvercharged)
            damage = damage * OVERCHARGE_DAMAGE_MULTIPLIER

        forUnitsInRange(this.pos.toVec2(), IMPACT_EFFECT_AOE) u ->
            if isValidTarget(this.ownerUnit, u)
                if effectScalingValue >= 0.7
                    flashEffect(IMPACT_EFFECT_PATH, u, "chest")
                UnitDamageTarget(ownerUnit, u, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
                new DummyCaster()
                    ..owner(this.ownerUnit.getOwner())
                    ..origin(this.efx.getPos())
                    ..castTarget(DUMMY_ABILITY_ID, slowTier, Orders.slow, u)
        this.exploded = true
        this.efx.destr()
        this.efx = null

function onCast()
    let caster = GetSpellAbilityUnit()
    let casterPos = caster.getPos()
    let targetX = GetSpellTargetX()
    let targetY = GetSpellTargetY()
    let targetPos = vec2(targetX, targetY)
    let targetAngle = casterPos.angleTo(targetPos)
    let isOverCharged = consumeOvercharge(caster)
    if not isOverCharged
        spawnProjectile(caster, targetAngle)
    else
        sprayOverchargedProjectiles(caster, targetPos)

function sprayOverchargedProjectiles(unit caster, vec2 targetPos)
    doPeriodicallyCounted(OVERCHARGE_PROJECTILE_INTERVAL, OVERCHARGE_PROJECTILE_COUNT) cb ->
        if caster.isAlive()
            let casterPos = caster.getPos()
            let ang = casterPos.angleTo(targetPos)
            let spawnPos = casterPos.polarOffset(ang, SPAWN_OFFSET_DISTANCE).withTerrainZ(MISSILE_FLY_HEIGHT)
            var projectile = new FrostBlastProjectile(caster, spawnPos, ang, true)

            doPeriodicallyTimed(LOOP_INTERVAL, MISSILE_LIFETIME) updateLoop ->
                if (updateLoop.isLast())
                    if projectile != null
                        destroy projectile
                else
                    if projectile != null
                        projectile.updateLoop()
        else
            cb.stop()

function spawnProjectile(unit caster, angle ang)
    let casterPos = caster.getPos()
    let spawnPos = casterPos.polarOffset(ang, SPAWN_OFFSET_DISTANCE).withTerrainZ(MISSILE_FLY_HEIGHT)
    var projectile = new FrostBlastProjectile(caster, spawnPos, ang, false)

    doPeriodicallyTimed(LOOP_INTERVAL, MISSILE_LIFETIME) updateLoop ->
        if (updateLoop.isLast())
            if projectile != null
                destroy projectile
        else
            if projectile != null
                projectile.updateLoop()

function isValidTarget(unit caster, unit target) returns bool
    return target.getOwner().isEnemyOf(caster.getOwner())
        and not target.isInvulnerable()
        and not target.isType(UNIT_TYPE_FLYING)
        and target.isAlive()
        and not target.isHidden()
        and not target.isType(UNIT_TYPE_STRUCTURE)


init
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())
