package Sleep

// Standard library imports:
import RegisterEvents
import HashMap

// Local imports:
import ColorUtils
import ChatCommands
import ChatUtils
import LocalObjectIDs
import StringExtensions
import UnitExtensions

public constant ABILITY_SLEEP_INSIDE = 'A004'
public constant ABILITY_SLEEP_OUTSIDE = 'A007'

let protectionEnabled = new HashMap<player, boolean>()

init
    registerSpellEffectEvent(ABILITY_SLEEP_INSIDE) ->
        let building = GetSpellAbilityUnit()
        let hero = GetSpellTargetUnit()
        let energy = building.getTypeId() == UNIT_TENT ? 80.0 : 200.0
        hero.addMana(energy)

    registerSpellEffectEvent(ABILITY_SLEEP_OUTSIDE) ->
        GetSpellTargetUnit()
            ..addMana(80)
            ..subHP(20)
            ..subHeat(15)

    registerSpellEffectEvent(ABILITY_SLEEP_OUTSIDE) ->
        let caster = GetSpellAbilityUnit()
        let target = GetSpellTargetUnit()
        if caster != target and protectionEnabled.get(target.getOwner())
            caster.issueImmediateOrder("stop")

    registerCommandAll("sleep") (triggerPlayer, args) ->
        let currentValue = protectionEnabled.get(triggerPlayer)
        let newValue = args.size() == 1 ? not currentValue : args.get(0).isConfirmation()
        let msg = "{0}Sleep protection turned|r {1}".format(GENERAL_COLOR.toColorString(), newValue.toOnOff().color(GOLD_COLOR))
        printTimedToPlayer(msg, 5, triggerPlayer)
        protectionEnabled.put(triggerPlayer, newValue)
