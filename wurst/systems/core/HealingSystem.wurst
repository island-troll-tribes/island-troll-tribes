package HealingSystem

trigger eventTrigger = CreateTrigger()
HealingInstance eventHealing = null

/** Gets the class instance uof the current healing event.
Can be modified during the event to change the healing done via multiplier or amount.*/
public function getHealingInstance() returns HealingInstance
    return eventHealing

public function getHealingAmount() returns real
    return eventHealing.amount

public function getHealingMultiplier() returns real
    return eventHealing.multiplier

public function getHealingTarget() returns unit
    return eventHealing.target

/** Only supports healing done by HealingSystem package. So no support stock WC3 healing abilities. */
public function onUnitHealed(code c) returns triggercondition
    return eventTrigger.addCondition(Condition(c))

public enum HealingType
    ITEM
    ABILITY
    OTHER

public class HealingInstance
    HealingType healingType
    real amount
    real multiplier
    unit target

    /** Creates a new HealingInstance, fires onUnitHealed events for it and applies the healing after possible event modifications */
    construct(unit target, real amount, HealingType healingType)
        this.healingType = healingType
        this.amount = amount
        this.multiplier = 1
        this.target = target
        execute()

    private function fireHealingEvent()
        let prev = eventHealing
        eventHealing = this
        eventTrigger.evaluate()
        eventHealing = prev

    private function execute()
        this.fireHealingEvent()
        let modifiedHealAmount = this.amount * this.multiplier
        target.setHP(target.getHP() + modifiedHealAmount)
        destroy this

    function reduceHealAmount(real reduction) returns real
        this.amount = max(0, this.amount - reduction)
        return this.multiplier

    function increaseHealAmount(real increase) returns real
        this.amount = max(0, this.amount + increase)
        return this.multiplier

    function reduceMultiplier(real reduction) returns real
        this.multiplier = max(0, this.multiplier - reduction)
        return this.multiplier

    function increaseMultiplier(real increase) returns real
        this.multiplier = max(0, this.multiplier + increase)
        return this.multiplier

    function scaleMultiplier(real factor) returns real
        this.multiplier = max(0, this.multiplier*factor)
        return this.multiplier

    function getTarget() returns unit
        return this.target
