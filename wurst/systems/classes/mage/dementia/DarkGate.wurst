package DarkGate
import RegisterEvents
import LinkedList
import Table
import ClosureTimers
import InstantDummyCaster
import Orders

@configurable constant int ABILITY_ID = 'A076'
@configurable constant int DUMMY_ID = UNIT_LOCUST_DARK_NODE
@configurable constant real INTERVAL = 0.05
@configurable constant real TURN_SPEED = 80
@configurable constant real RUN_SPEED = 100
@configurable constant real DISTANCE = 100
@configurable constant int MAX_DUMMY_COUNT = 6
@configurable constant real GROW_DURATION = 10
@configurable constant real MIN_GROW_DURATION = 1.5
@configurable constant real AURA_DURATION = 40
@configurable constant EFFECT_PATH = "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl"

constant INTERVAL_RUN_SPEED = INTERVAL * RUN_SPEED
constant INTERVAL_TURN_SPEED = (INTERVAL * TURN_SPEED).fromDeg()
constant INTERVAL_DURATION_GROWTH = INTERVAL * AURA_DURATION

constant ongoing = new LinkedList<DarkGate>()

public function getActiveDarkGates() returns LinkedList<DarkGate>
    return ongoing

constant instances = new Table()
constant table = new Table()

function initSpellTable()
    table.saveInt(0, 'A038')
    table.saveInt(1, 'A038')
    table.saveInt(2, 'A01K')
    table.saveInt(3, 'A01K')
    table.saveInt(4, 'A02A')
    table.saveInt(5, 'A02A')
    table.saveInt(6, 'A028')
    table.saveInt(7, 'A065')
    table.saveInt(8, 'A02V')
    table.saveInt(9, 'ACfl')
    table.saveInt(10, 'ACtb')
    table.saveInt(11, 'A020')
    table.saveInt(12, 'A01X')

    table.saveInt('A038', Orders.carrionswarm)
    table.saveInt('A01K', Orders.shadowstrike)
    table.saveInt('A02A', Orders.frostnova)
    table.saveInt('A028', Orders.impale)
    table.saveInt('A065', Orders.manaburn)
    table.saveInt('A02V', Orders.creepthunderbolt)
    table.saveInt('ACfl', Orders.forkedlightning)
    table.saveInt('ACtb', Orders.creepthunderbolt)
    table.saveInt('A020', Orders.frostnova)
    table.saveInt('A01X', Orders.chainlightning)

public class DarkGate
    constant orbs = new LinkedList<unit>()
    constant summons = new LinkedList<unit>()
    unit caster
    vec2 pos
    var remaining = 0.00
    var channeling = true
    var distance = DISTANCE

    construct(unit caster)
        var owner = caster.getOwner()
        var pos = caster.getPos()
        var inc = 360 / MAX_DUMMY_COUNT
        this.caster = caster
        this.pos = pos

        for i = 0 to MAX_DUMMY_COUNT - 1
            var angle = (i * inc).fromDeg()
            var dpos = pos.polarOffset(angle, distance)
            orbs.push(createUnit(owner, DUMMY_ID, dpos, angle))
        instances.saveInt(caster.getHandleId(), this castTo int)

    ondestroy
        var duration = (remaining <= MIN_GROW_DURATION) ? 0.2 : 1.8
        for orb in orbs
            duration += 0.2
            orb.setTimedLife(duration)
        summons.forEach(e -> e.setTimedLife(duration))

        var last = instances.loadInt(caster.getHandleId()) castTo thistype
        if last == this
            instances.removeInt(caster.getHandleId())
        ongoing.remove(this)
        destroy orbs
        destroy summons

player filterPlayer = null
function filterTarget(unit u) returns boolean
    return u.getOwner().isEnemyOf(filterPlayer) and u.isAlive() and not u.isType(UNIT_TYPE_STRUCTURE)

function orbCastSpell(DarkGate gate, int index)
    filterPlayer = gate.caster.getOwner()
    ENUM_GROUP.enumUnitsInRange(gate.pos, gate.distance, Filter(() -> filterTarget(GetFilterUnit())))
    var target = ENUM_GROUP.getRandomUnit()

    if target != null
        var orb = gate.orbs.get(index)
        var abilityId = table.loadInt(GetRandomInt(0, 12))
        var efx = orb.addEffect(EFFECT_PATH, "origin")
        InstantDummyCaster.castTarget(filterPlayer, abilityId, 1, table.loadInt(abilityId), target, orb.getPos())
        doAfter(1.5, () -> efx.destr())

function onCast()
    var caster = GetSpellAbilityUnit()
    var gate = new DarkGate(caster)

    doPeriodicallyTimed(INTERVAL, GROW_DURATION) cb ->
        gate.remaining += INTERVAL_DURATION_GROWTH
        if not caster.isAlive()
            cb.stop()
            destroy gate
        else if cb.isLast() or not gate.channeling
            cb.stop()
            if gate.remaining <= (MIN_GROW_DURATION / GROW_DURATION) * AURA_DURATION
                destroy gate
            else
                var scale = gate.remaining / AURA_DURATION
                var interval = 2.5 - scale
                ongoing.push(gate)
                doPeriodicallyTimed(interval, gate.remaining) cb2 ->
                    gate.remaining -= interval
                    orbCastSpell(gate, cb2.getCount() mod MAX_DUMMY_COUNT)
                    if cb2.isLast()
                        destroy gate
        else
            gate.distance += INTERVAL_RUN_SPEED
            for orb in gate.orbs
                var angle = orb.getFacingAngle() + INTERVAL_TURN_SPEED
                var resultPos = gate.pos.polarOffset(angle, gate.distance)
                orb.setFacing(angle)
                orb.setXY(resultPos)

function onEndcast()
    if GetSpellAbilityId() == ABILITY_ID
        var caster = GetSpellAbilityUnit()
        var gate = instances.loadInt(caster.getHandleId()) castTo DarkGate
        gate.channeling = false

init
    initSpellTable()
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onEndcast())
