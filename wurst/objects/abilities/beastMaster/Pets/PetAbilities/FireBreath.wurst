package FireBreath

// Standard Library Imports
import UpgradeObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import Assets
import OrderIds
import InstantDummyCaster

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import ColorUtils
import StringExtensions
import CustomProjectile
import SpiritualGuidance


let ABILITY_DUMMY_STUN_ID = compiletime(ABIL_ID_GEN.next())
let BUFF_STUN = "BSTN" // Stunned

let FIRE_BREATH_COOLDOWN = 90.

let FIRE_BREATH_AOE = 160.
let FIRE_BREATH_AOE_INCREASE = 40.

let FIRE_BREATH_CAST_RANGE = 300.
let FIRE_BREATH_CAST_RANGE_INCREASE = 50.

let GROUND_BURN_INTERVAL = 0.2

let INITIAL_DAMAGE = 20.
let INITIAL_DAMAGE_INCREASE = 4.

let GROUND_BURN_DPS = 8.
let GROUND_BURN_DPS_INCREASE = 2.

let GROUND_BURN_DURATION = 4.
let GROUND_BURN_DURATION_INCREASE = 1.

let IMPACT_STUN_DURATION_HERO = 0.5
let IMPACT_STUN_DURATION_NORMAL = 1.5

let ADDITIONAL_EFFECT_STR = "\nGain an additional effect when the unit reach adulthood.".color(HIGHLIGHT_COLOR) + "\n\nAdditional Effect : ".color(GOLD_COLOR)

let FIRE_BREATH_TOOLTIP = "Fire Breath"
let FIRE_BREATH_TOOLTIP_EXT = "Spit a fire ball on the target position. Deals damage to enemy units and destroys trees on impact area of effect."
                              + makeToolTipCooldown(FIRE_BREATH_COOLDOWN)
                              + ADDITIONAL_EFFECT_STR
                              + "Stun enemies for {0} seconds and burn the grounds, enemies walking in the fire suffer damage each seconds, "
                              .format(IMPACT_STUN_DURATION_HERO.toString().color(COLOR_LIGHT_BLUE))
                              + "deals twice less damage against buildings, burning corpses will be cooked into Cooked Meat."

// Druid Spiritual guidance allow max level to be reached
let MAX_LEVEL = 7
let MAX_UPGD_ABIL_LEVEL = MAX_LEVEL - PET_UPGRADE_BONUS

let UPGD_MANA_COST = 5 // mana cost * abilLevel

@compiletime function createDummyStunSpell() returns AbilityDefinitionFireBolt
    return new AbilityDefinitionFireBolt(ABILITY_DUMMY_STUN_ID)
        ..setAnimationNames("")
        ..setMissileSpeed(9000)
        ..setMissileArt("")
        ..setMissileHomingEnabled(true)
        ..setCastingTime(1, 0)
        ..setBuffs(1, BUFF_STUN)
        ..setCastRange(1, 9999)
        ..setCooldown(1, 0)
        ..setDamage(1, 0)
        ..setDurationHero(1, IMPACT_STUN_DURATION_HERO)
        ..setDurationNormal(1, IMPACT_STUN_DURATION_NORMAL)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..setLevels(1)
        ..setManaCost(1, 0)
        ..setRace(Race.Creeps)
        ..setName("Fire Breath Stun Dummy Spell")
        ..setEditorSuffix("(Wurst)")

@compiletime function createFireBreathUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_FIRE_BREATH)
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_FIRE_BREATH.toRawCode())
        ..setLevels(MAX_LEVEL)
        ..setName(1, "Fire Breath bonus")
        ..setIcon(1, Icons.bTNFireBolt)

@compiletime function createUpgradeAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_FIRE_BREATH_UPGD, MAX_UPGD_ABIL_LEVEL, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..presetCooldown(lvl -> 0)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetArtDuration(lvl -> 0)
        ..setAnimationNames("")
        ..setName("Increase Fire Breath")
        ..setIconNormal(Icons.bTNSkillz)
        ..presetButtonPosNormal(0, 2)
        ..setHotkeyNormal("Z")
        ..setArtCaster(Abilities.aIsmTarget)
        ..presetManaCost(lvl -> UPGD_MANA_COST * lvl)
        ..presetTooltipNormal(lvl -> makeToolTipNormUpgradeLevel("Z", FIRE_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> "Increase Fire Breath ability to the next level."  + "\n\n"
            + "Impact damage : "             .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(INITIAL_DAMAGE        , INITIAL_DAMAGE_INCREASE        , lvl, MAX_LEVEL, COLOR_RED, true)
            + "\nBurning ground damage : "   .color(GOLD_COLOR)    + toolTipAbilityEffectPerLevel(GROUND_BURN_DPS       , GROUND_BURN_DPS_INCREASE       , lvl, MAX_LEVEL, COLOR_RED, true) + " per seconds".color(GOLD_COLOR)
            + "\nBurning ground duration : " .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(GROUND_BURN_DURATION  , GROUND_BURN_DURATION_INCREASE  , lvl, MAX_LEVEL, COLOR_RED, true) + " seconds.".color(SPECIAL_COLOR)
            + "\nArea of effect : "          .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(FIRE_BREATH_AOE       , FIRE_BREATH_AOE_INCREASE       , lvl, MAX_LEVEL, COLOR_RED, true)
            + "\nCast range : "              .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(FIRE_BREATH_CAST_RANGE, FIRE_BREATH_CAST_RANGE_INCREASE, lvl, MAX_LEVEL, COLOR_RED, true)
            )
        ..setEditorSuffix("(Wurst)")

@compiletime function createFireBreath() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_FIRE_BREATH, MAX_LEVEL, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> FIRE_BREATH_COOLDOWN)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..presetTargetTypes(Targettype.POINT)
        ..setName(FIRE_BREATH_TOOLTIP)
        ..presetTooltipNormal(lvl -> makeToolTipNormLevel("A", FIRE_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> FIRE_BREATH_TOOLTIP_EXT  + "\n\n"
            + "Impact damage : "             .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(INITIAL_DAMAGE        , INITIAL_DAMAGE_INCREASE        , lvl, MAX_LEVEL, COLOR_RED, true)
            + "\nBurning ground damage : "   .color(GOLD_COLOR)    + toolTipAbilityEffectPerLevel(GROUND_BURN_DPS       , GROUND_BURN_DPS_INCREASE       , lvl, MAX_LEVEL, COLOR_RED, true) + " per seconds".color(GOLD_COLOR)
            + "\nBurning ground duration : " .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(GROUND_BURN_DURATION  , GROUND_BURN_DURATION_INCREASE  , lvl, MAX_LEVEL, COLOR_RED, true) + " seconds.".color(SPECIAL_COLOR)
            + "\nArea of effect : "          .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(FIRE_BREATH_AOE       , FIRE_BREATH_AOE_INCREASE       , lvl, MAX_LEVEL, COLOR_RED, true)
            + "\nCast range : "              .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(FIRE_BREATH_CAST_RANGE, FIRE_BREATH_CAST_RANGE_INCREASE, lvl, MAX_LEVEL, COLOR_RED, true)
            )
        ..setIconNormal(Icons.bTNFireBolt)
        ..setIconResearch(Icons.bTNFireBolt)
        ..setIconTurnOff(Icons.bTNFireBolt)
        ..presetFollowThroughTime(lvl -> 1.3)
        ..setAnimationNames("")
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> FIRE_BREATH_AOE + FIRE_BREATH_AOE_INCREASE * lvl)
        ..presetButtonPosNormal(0, 1)
        ..presetCastRange(lvl -> FIRE_BREATH_CAST_RANGE + FIRE_BREATH_CAST_RANGE_INCREASE * lvl)
        ..setEditorSuffix("(Wurst)")


// Spell projectile, manual adjust the numbers so it looks cool ingame
class FireBreathProjectile extends CustomProjectile
    int abilLevel
    unit caster

    construct(vec3 startPos, vec3 targetPos, real groundSpeed, string effectPath, int abilLevel, unit caster)
        super(startPos, targetPos, groundSpeed, 20, effectPath)
        this.abilLevel = abilLevel
        this.caster = caster
        this.missileFx.setScale(abilLevel * 0.2 + 0.4)

    override function onImpact()
        // Booom
        flashEffect(Objects.neutralBuildingExplosion, targetPos, abilLevel * 0.4)

        // Initial Damage
        forUnitsInRange(targetPos.toVec2(), FIRE_BREATH_AOE + FIRE_BREATH_AOE_INCREASE * abilLevel) u ->
            if u.isAlive() and u.getOwner().isEnemyOf(caster.getOwner())
                and not u.isType(UNIT_TYPE_FLYING)
                and not u.isInvulnerable()
                and not u.isHidden()
                and not u.isType(UNIT_TYPE_STRUCTURE)
            UnitDamageTarget(caster, u, INITIAL_DAMAGE + INITIAL_DAMAGE_INCREASE * abilLevel, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)

        // Destroy trees
        forDestructablesInRange(targetPos.toVec2(), FIRE_BREATH_AOE + FIRE_BREATH_AOE_INCREASE * abilLevel) (destructable d) ->
            d.kill()

        if caster.getTypeId() == UNIT_FIRE_DRAGON
            // Stun enemies in AoE
            forUnitsInRange(targetPos.toVec2(), FIRE_BREATH_AOE + FIRE_BREATH_AOE_INCREASE * abilLevel) (unit u) ->
                if u.isAlive() and u.getOwner().isEnemyOf(caster.getOwner())
                    and not u.isType(UNIT_TYPE_FLYING)
                    and not u.isInvulnerable()
                    and not u.isHidden()
                    and not u.isType(UNIT_TYPE_STRUCTURE)
                    InstantDummyCaster.castTarget(caster.getOwner(), ABILITY_DUMMY_STUN_ID, 1, OrderIds.firebolt, u)

            handleGroundBurning()

    function handleGroundBurning()
        let owner = caster.getOwner()

        let fxAmount = 10 + (abilLevel * 10)
        // Spawn fire FX on ground
        for i = 0 to fxAmount
            let randAngle = angle(GetRandomReal(0, 2*bj_PI))
            let randomDist = GetRandomReal(15, FIRE_BREATH_AOE + FIRE_BREATH_AOE_INCREASE * abilLevel)
            let fireFX = addEffect(Abilities.breathOfFireDamage, targetPos.toVec2().polarOffset(randAngle, randomDist).withTerrainZ(0))
            fireFX.setScale(0.7)
            doAfter(GROUND_BURN_DURATION - 0.5) ->
                fireFX.destr()

        // Damage the units in area
        doPeriodicallyTimed(GROUND_BURN_INTERVAL, GROUND_BURN_DURATION) burnAOE ->
            forUnitsInRange(targetPos.toVec2(), FIRE_BREATH_AOE + FIRE_BREATH_AOE_INCREASE * abilLevel) u ->
                // Instantly kill Ice Block unit
                if u.getTypeId() == UNIT_ICE_BLOCK
                    u.kill()

                else if u.isAlive() and u.getOwner().isEnemyOf(owner)
                     and not u.isType(UNIT_TYPE_FLYING)
                     and not u.isInvulnerable()
                     and not u.isHidden()
                     // Twice less damage against buildings
                    if u.isType(UNIT_TYPE_STRUCTURE)
                        UnitDamageTarget(caster, u, ((GROUND_BURN_DPS + GROUND_BURN_DPS_INCREASE * abilLevel) / 2) * GROUND_BURN_INTERVAL, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
                    else
                        UnitDamageTarget(caster, u, (GROUND_BURN_DPS + GROUND_BURN_DPS_INCREASE * abilLevel) * GROUND_BURN_INTERVAL, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)

                // Its hot! Cook the corpse!
                else if u.getTypeId() == UNIT_MEAT
                    createItem(ITEM_COOKED_MEAT, u.getPos())
                    u.remove()

init
    EventListener.onPointCast(ABILITY_FIRE_BREATH) (unit caster, vec2 target) ->
        // Get correct Z value when dragon fly over cliff
        let casterPos3D = caster.getPos().withTerrainZ().op_plus(vec3(0, 0, caster.getPos3Fly().z))
        let lvl = caster.getAbilityLevel(ABILITY_FIRE_BREATH)

        // Adjust fx following the model, small fireball for hatchling
        let fxPath = caster.getTypeId() == UNIT_FIRE_DRAGON ? Abilities.redDragonMissile : Abilities.fireBallMissile

        new FireBreathProjectile(
            casterPos3D + vec3(0, 40, -30), // Trying to adjust starting pos with dragon mouth
            target.withTerrainZ(),
            500,
            fxPath,
            lvl,
            caster
            )
