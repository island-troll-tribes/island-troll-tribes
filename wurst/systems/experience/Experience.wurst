package Experience
import RegisterEvents
import PlayerExtensions
import PlayerUtils
import UnitExtensions
import MathUtils
import ClosureTimers
import Classes
import LinkedList
import GroupExtensions
import TrollExtensions

constant creepExp = [3, 25]
constant heroExp = [0, 100, 120, 160, 220, 300]
constant expPerLevel = [0, 200]
constant expRange = 1200.0

public function getMultiplier(unit troll) returns integer
    switch getTrollClassType(troll)
        case BASE_CLASS
            return 4
        case SUB_CLASS
            return 3
        case SUPER_CLASS
            return 2
        default
            return 1

init
    for i = 2 to 30
        creepExp[i] = creepExp[i - 1] + (i + 1) * 5
        expPerLevel[i] = expPerLevel[i - 1] * 2 - expPerLevel[i - 2] + 100

    for i = 6 to 30
        heroExp[i] = heroExp[i - 1] + 100

    for i = 0 to PLAYER_NEUTRAL_PASSIVE - 1
        players[i].setHandicapXP(0)

    doPeriodically(ANIMATION_PERIOD) (cb) ->
        for troll in udg_trolls
            let owner = troll.getOwner()
            if (troll.getMana() < 1 or troll.getHeat() < 1) and troll.isAlive()
                let pos = troll.getPos()
                let killer = ENUM_GROUP
                    ..enumUnitsInRange(pos, expRange, Filter(() -> begin
                        return GetFilterUnit().getOwner().getId() < bj_MAX_PLAYER_SLOTS
                    end))
                    .toLinkedList()
                    .filter(x -> not x.getOwner().isAllyOf(owner))
                    ..sortWith((a, b) -> (a.getPos().distanceToSq(pos) - b.getPos().distanceToSq(pos)).toInt())
                    .getFirst()

                if killer == null
                    troll.kill()
                else
                    killer.damageTarget(troll, troll.getHP() * 2, ATTACK_TYPE_CHAOS)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        let dead = GetDyingUnit()
        let killer = GetKillingUnit()
        if not killer.getOwner().isAllyOf(dead.getOwner())
            let heroes = GetUnitsInRangeMatching(expRange, dead.getX(), dead.getY(), Condition(() -> begin
                let filterUnit = GetFilterUnit()
                return filterUnit.isType(UNIT_TYPE_HERO) and filterUnit.getOwner().isAllyOf(GetKillingUnit().getOwner()) and filterUnit.isAlive()
            end))

            if killer.isType(UNIT_TYPE_HERO)
                heroes.addUnit(killer)
            else if killer.getName() == "Dummy Caster" or killer.getTypeId() == UNIT_MASTER_CASTER
                heroes.addUnit(killer.getOwner().getHero())

            let count = heroes.size()
            let deadUnitLevel = dead.getLevel()
            let baseExp = dead.isType(UNIT_TYPE_HERO) ? heroExp[deadUnitLevel] : creepExp[deadUnitLevel]
            let reduceExpGain = dead.getOwner().getId()  >= PLAYER_NEUTRAL_AGGRESSIVE

            for hero from heroes
                let multiplier = getMultiplier(hero)
                var experience = floor(baseExp * multiplier / count)
                var level = hero.getLevel()
                var heroCurrentXp = hero.getXp()

                while experience > 0
                    let expReduction = reduceExpGain ? max(0.4, 0.9 - 0.1 * level) : 1.0
                    let expThisLevel = expPerLevel[level] - heroCurrentXp
                    let expGain = (experience * expReduction).toInt()
                    if expGain > expThisLevel
                        heroCurrentXp += expThisLevel
                        experience -= (expThisLevel / expReduction).toInt()
                        level += 1
                    else
                        heroCurrentXp += expGain
                        experience = 0

                hero.setXp(heroCurrentXp)
