package StormBreath

// Standard Library Imports
import UpgradeObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import Assets
import BuffObjEditing
import TimerUtils
import HashMap
import InstantDummyCaster
import OrderIds

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import ColorUtils
import StringExtensions
import SpiritualGuidance

constant BUFF_LESSER_PARALYZE_GROUND = compiletime(BUFF_ID_GEN.next())
constant BUFF_LESSER_PARALYZE_AIR    = compiletime(BUFF_ID_GEN.next())

let STORM_BREATH_COOLDOWN = 45.

let STORM_BREATH_DURATION = 1.
let STORM_BREATH_DURATION_INCREASE = 0.2

let STORM_BREATH_CAST_RANGE = 250.
let STORM_BREATH_CAST_RANGE_INCREASE = 50.

let STORM_BREATH_AOE = 100.
let STORM_BREATH_AOE_INCREASE = 10.

let STORM_BREATH_PARALYZE_DURATION = 2.
let STORM_BREATH_PARALYZE_DURATION_INCREASE = 0.2

let ADDITIONAL_EFFECT_STR = "\nGain an additional effect when the unit reach adulthood.".color(HIGHLIGHT_COLOR) + "\n\nAdditional Effect : ".color(GOLD_COLOR)

let STORM_BREATH_TOOLTIP = "Storm Breath"
let STORM_BREATH_TOOLTIP_EXT = "Cast lightning in a line for the channeling duration, the longer the channeling, the longer distance the lightning travelled."
                               + "\nEach enemy unit hit by the lightning gets paralyzed and cannot move for the duration."
                               + makeToolTipCooldown(STORM_BREATH_COOLDOWN)
                               + ADDITIONAL_EFFECT_STR
                               + "Paralyzed units cannot attack for the duration, trees hit by the lightning get burned, transforming them into rotten tree, destroyable by normal attack."

// Druid Spiritual guidance allow max level to be reached
let MAX_LEVEL = 7
let MAX_UPGD_ABIL_LEVEL = MAX_LEVEL - PET_UPGRADE_BONUS

let UPGD_MANA_COST = 4 // mana cost * abilLevel

@compiletime function createStormBreathUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_STORM_BREATH)
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_STORM_BREATH.toRawCode())
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_PARALYZE.toRawCode())
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_LESSER_PARALYZE.toRawCode())
        ..setLevels(MAX_LEVEL)
        ..setName(1, "Storm Breath bonus")
        ..setIcon(1, Icons.bTNManaFlare)

@compiletime function createUpgradeAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_STORM_BREATH_UPGD, MAX_UPGD_ABIL_LEVEL, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..presetCooldown(lvl -> 0)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetArtDuration(lvl -> 0)
        ..setAnimationNames("")
        ..setName("Increase Storm Breath")
        ..setIconNormal(Icons.bTNSkillz)
        ..presetButtonPosNormal(0, 2)
        ..setHotkeyNormal("Z")
        ..setArtCaster(Abilities.aIsmTarget)
        ..presetManaCost(lvl -> UPGD_MANA_COST * lvl)
        ..presetTooltipNormal(lvl -> makeToolTipNormUpgradeLevel("Z", STORM_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> "Increase Storm Breath ability level." + "\n\n"
            + "Paralyze duration : "    .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_PARALYZE_DURATION , STORM_BREATH_PARALYZE_DURATION_INCREASE , lvl, MAX_LEVEL, GOLD_COLOR, false) + " seconds.".color(SPECIAL_COLOR)
            + "\nChanneling duration : ".color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_DURATION          , STORM_BREATH_DURATION_INCREASE          , lvl, MAX_LEVEL, GOLD_COLOR, false) + " seconds.".color(SPECIAL_COLOR)
            + "\nArea of effect : "     .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_AOE               , STORM_BREATH_AOE_INCREASE               , lvl, MAX_LEVEL, GOLD_COLOR, true )
            + "\nCast range : "         .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_CAST_RANGE        , STORM_BREATH_CAST_RANGE_INCREASE        , lvl, MAX_LEVEL, GOLD_COLOR, true )
            )
        ..setEditorSuffix("(Wurst)")

@compiletime function createStormBreath() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_STORM_BREATH, MAX_LEVEL, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> STORM_BREATH_COOLDOWN)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..presetTargetTypes(Targettype.POINT)
        ..setName(STORM_BREATH_TOOLTIP)
        ..presetTooltipNormal(lvl -> makeToolTipNormLevel("A", STORM_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> STORM_BREATH_TOOLTIP_EXT  + "\n\n"
            + "Paralyze duration : "    .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_PARALYZE_DURATION , STORM_BREATH_PARALYZE_DURATION_INCREASE , lvl, MAX_LEVEL, GOLD_COLOR, false) + " seconds.".color(SPECIAL_COLOR)
            + "\nChanneling duration : ".color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_DURATION          , STORM_BREATH_DURATION_INCREASE          , lvl, MAX_LEVEL, GOLD_COLOR, false) + " seconds.".color(SPECIAL_COLOR)
            + "\nArea of effect : "     .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_AOE               , STORM_BREATH_AOE_INCREASE               , lvl, MAX_LEVEL, GOLD_COLOR, true )
            + "\nCast range : "         .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(STORM_BREATH_CAST_RANGE        , STORM_BREATH_CAST_RANGE_INCREASE        , lvl, MAX_LEVEL, GOLD_COLOR, true )
            )
        ..setIconNormal(Icons.bTNManaFlare)
        ..setIconResearch(Icons.bTNManaFlare)
        ..setIconTurnOff(Icons.bTNManaFlare)
        ..presetFollowThroughTime(lvl -> STORM_BREATH_DURATION + lvl * STORM_BREATH_DURATION_INCREASE)
        ..setAnimationNames("")
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> STORM_BREATH_AOE + STORM_BREATH_AOE_INCREASE * lvl)
        ..presetButtonPosNormal(0, 1)
        ..presetCastRange(lvl -> STORM_BREATH_CAST_RANGE + STORM_BREATH_CAST_RANGE_INCREASE * lvl)
        ..setEditorSuffix("(Wurst)")

@compiletime function createParalyze() returns AbilityDefinitionEntanglingRootscreep
    return new AbilityDefinitionEntanglingRootscreep(ABILITY_PARALYZE)
        ..setDummyAbility()
        ..setMissileArt("")
        ..setArtTarget(Abilities.chimaeraLightningMissile)
        ..setName("Paralyze")
        ..setLevels(MAX_LEVEL)
        ..presetTargetsAllowed(lvl -> commaList(
            TargetsAllowed.ground,
            TargetsAllowed.enemies,
            TargetsAllowed.organic
            )
        )
        ..presetDamageperSecond(lvl -> 0)
        ..presetDurationHero(lvl -> STORM_BREATH_PARALYZE_DURATION + lvl * STORM_BREATH_PARALYZE_DURATION_INCREASE)
        ..presetDurationNormal(lvl -> STORM_BREATH_PARALYZE_DURATION + lvl * STORM_BREATH_PARALYZE_DURATION_INCREASE)
        ..presetBuffs(lvl -> "Bprg")
        ..setEditorSuffix("(Wurst)")

@compiletime function createLesserParalyzeBuffs()
    new BuffDefinition(BUFF_LESSER_PARALYZE_GROUND, 'Beng') // Ensnare ground buff
        ..setIcon(Icons.bTNPurge)
        ..setArtTarget(Abilities.purgeBuffTarget)
        ..setTargetAttachmentPoint0(1, "origin")
        ..setTooltipNormal(1, "Lesser Paralyze")
        ..setTooltipNormalExtended(1, "This unit has been hit by lightning; its movement are restrained.")

    new BuffDefinition(BUFF_LESSER_PARALYZE_AIR, 'Bena') // Ensnare air buff
        ..setIcon(Icons.bTNPurge)
        ..setArtTarget(Abilities.purgeBuffTarget)
        ..setTargetAttachmentPoint0(1, "origin")
        ..setTooltipNormal(1, "Lesser Paralyze")
        ..setTooltipNormalExtended(1, "This unit has been hit by lightning; its movement are restrained.")

@compiletime function createLesserParalyze() returns AbilityDefinitionEnsnareCreep
    return new AbilityDefinitionEnsnareCreep(ABILITY_LESSER_PARALYZE)
        ..setDummyAbility()
        ..setMissileArt("")
        ..setArtTarget(Abilities.chimaeraLightningMissile)
        ..presetTargetsAllowed(lvl -> commaList(
            TargetsAllowed.ground,
            TargetsAllowed.enemies,
            TargetsAllowed.organic
            )
        )
        ..setName("Lesser Paralyze")
        ..setLevels(MAX_LEVEL)
        ..presetDurationHero(lvl -> STORM_BREATH_PARALYZE_DURATION + lvl * STORM_BREATH_PARALYZE_DURATION_INCREASE)
        ..presetDurationNormal(lvl -> STORM_BREATH_PARALYZE_DURATION + lvl * STORM_BREATH_PARALYZE_DURATION_INCREASE)
        ..setEditorSuffix("(Wurst)")
        ..presetBuffs(lvl -> commaList(BUFF_LESSER_PARALYZE_GROUND, BUFF_LESSER_PARALYZE_AIR))

HashMap<destructable, StormBreathLightning> treeToBurn = new HashMap<destructable, StormBreathLightning>()

// TODO: Checkout multiple tree on same spot issue
// Spell projectile, manual adjust the numbers so it looks cool ingame
class StormBreathLightning
    use TimedLoop
    boolean isChanneling
    unit caster
    vec2 targetPos
    int abilLevel
    real duration
    lightning fx
    real speed = 500
    real time_elapsed = 0
    vec3 casterPos

    construct(unit caster, vec2 targetPos, real duration, int abilLevel)
        this.caster = caster
        this.abilLevel = abilLevel
        this.targetPos = targetPos
        this.duration = duration + abilLevel * STORM_BREATH_DURATION_INCREASE

        // Get correct Z value when dragon fly over cliff
        this.casterPos = caster.getPos().withTerrainZ().op_plus(vec3(0, 0, caster.getPos3Fly().z))

        this.fx = addLightning(
            LIGHTNING_LIGHTNING_ATTACK,
            true,
            casterPos + vec3(0, 60, -20), // Trying to adjust starting pos with dragon mouth
            targetPos.withTerrainZ()
            )
        this.isChanneling = true

        EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
            if EventData.getSpellAbilityId() == ABILITY_STORM_BREATH
                this.isChanneling = false

        // Smasl electric burst on the ground
        let lightningFx = addEffect(Abilities.chimaeraLightningMissile, this.targetPos)
                          ..setScale(0.6 + abilLevel * 0.2)
                          ..playAnimation(ANIM_TYPE_DEATH)

        doPeriodicallyTimed(0.2, this.duration - 0.2) (CallbackCounted cb) ->
            if not this.isChanneling
                lightningFx.destr()
                cb.stop()
            else
                lightningFx.setPos(this.targetPos.withTerrainZ())
                lightningFx.playAnimation(ANIM_TYPE_DEATH)
        startTimedLoop()

    override function onTimedLoop()
        if duration < time_elapsed
            stopTimedLoopAndDestroy()

        // Move lightning edge to new pos
        targetPos = targetPos.polarOffset(caster.getPos().angleTo(targetPos), ANIMATION_PERIOD * speed)
        fx.move(true, casterPos, targetPos.withTerrainZ())

        forUnitsInRange(targetPos, STORM_BREATH_AOE + STORM_BREATH_AOE_INCREASE * abilLevel) (unit u) ->
            if u.getOwner().isEnemyOf(caster.getOwner())
                and not u.isHidden()
                and not u.isType(UNIT_TYPE_STRUCTURE)
                and not u.isType(UNIT_TYPE_FLYING)
                and not u.isInvulnerable()
                and not u.hasAbility(BUFF_LESSER_PARALYZE_GROUND)
                and not u.hasAbility(BUFF_LESSER_PARALYZE_AIR)
                and not u.hasAbility('Bprg') // Purge buff
                and u.isAlive()
                let abilToCast = caster.getTypeId() == UNIT_STORM_DRAGON ? ABILITY_PARALYZE : ABILITY_LESSER_PARALYZE
                let orderId    = caster.getTypeId() == UNIT_STORM_DRAGON ? OrderIds.entanglingroots : OrderIds.ensnare
                InstantDummyCaster.castTarget(caster.getOwner(), abilToCast, abilLevel, orderId, u)


        if caster.getTypeId() == UNIT_STORM_DRAGON
            forDestructablesInRange(targetPos, STORM_BREATH_AOE + STORM_BREATH_AOE_INCREASE * abilLevel) (destructable d) ->
                // lightning should burn down trees
                if (d.getTypeId() == DEST_CANOPY_TREE or d.getTypeId() == DEST_NORMAL_TREE)
                    and not treeToBurn.has(d) // Avoiding burning the same tree multiple time
                    and d.isAliveTrick()
                    treeToBurn.put(d, this)
                    let pos = d.getPos()


                    flashEffect(Abilities.chimaeraLightningMissile, pos)
                    let fx = addEffect(Abilities.flameStrikeEmbers, pos.withTerrainZ())..setScale(2)
                    doAfter(5) ->
                        fx.destr()
                        createDestructable(DEST_ROTTEN_TREE, pos, angle(GetRandomReal(0, 2*bj_PI)), GetRandomReal(0.65, 1.05), GetRandomInt(1, 10))
                        treeToBurn.remove(d)
                        d.remove()

        time_elapsed += ANIMATION_PERIOD

    ondestroy
        fx.destr()


init
    EventListener.onPointCast(ABILITY_STORM_BREATH) (unit caster, vec2 target) ->
        new StormBreathLightning(caster, target, STORM_BREATH_DURATION, caster.getAbilityLevel(ABILITY_STORM_BREATH))
