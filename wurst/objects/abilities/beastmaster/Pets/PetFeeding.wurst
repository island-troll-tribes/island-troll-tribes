package PetFeeding

// Standard library imports:
import AbilityObjEditing
import ClosureEvents
import UpgradeObjEditing
import ObjectIds
import ClosureTimers

// Local imports:
import LocalObjectIDs
import Pets
import PlayerExtensions
import ColorUtils
import StringExtensions
import ToolTipsUtils
import LocalAssets
import PetMana

let MANA_GAINED = 1
let HOTKEY = "D"
let ICON = LocalIcons.aTCCannibalize
let TOOLTIP = "Eat Corpse"
let TOOLTIP_EXT = "Eat a raw corpse to gain {0} energy. energy can be used to grow your pet, or increase its stats. \n".format(MANA_GAINED.toString().color(ENERGY_COLOR)) +
                    "You can upgrade any stat a total of {0} times every time your troll levels up.".format("3".color(GOLD_COLOR))

@compiletime function createManaDummyUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_PET_EATING_ALLOWED)
        ..setName(1, "Maximum unused upgrade points reached.")

@compiletime function createAbilityFeedPet() returns AbilityDefinitionRaiseDead
    return new AbilityDefinitionRaiseDead(ABILITY_FEED_PET)
        ..setIconNormal(ICON)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(1)
        ..setHotkeyNormal(HOTKEY)
        ..setButtonPositionTurnOffX(1)
        ..setButtonPositionTurnOffY(1)
        ..setIconTurnOff(ICON)
        ..setTooltipNormal(1, makeToolTipNorm(HOTKEY, TOOLTIP))
        ..setTooltipNormalExtended(1, TOOLTIP_EXT)
        // The corpse is removed without an effect.
        ..setArtEffect("")
        ..setLevels(1)
        ..presetUnitTypeOne(lvl -> "")
        ..presetUnitsSummonedTypeOne(lvl -> 0)
        ..presetUnitsSummonedTypeTwo(lvl -> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0)
        // The radius from which the order can be issued.
        ..presetAreaofEffect(lvl -> 800)
        // The ability is cast at melee range.
        ..presetCastRange(lvl -> 128)
        ..setRequirements(UPGD_PET_EATING_ALLOWED.toRawCode())
        ..setRequirementsLevels("1")


        
function onCast(unit caster)
    // Exit if the caster is not a pet.
    if not caster.isPet() or caster.getMana() == caster.getMaxMana()
        return

    // Grant the pet mana for eating a corpse.
    caster.setMana(caster.getMana() + MANA_GAINED)

    // Update true value for pet's mana.
    updatePetMana(caster, MANA_GAINED.toReal())

    // Check if research needs to be swapped for pet.
    setResearch(caster)

public function setResearch(unit caster)
    // Wait for mana to actually be reduced after casting.
    nullTimer() ->
        // If the pet does not have full mana.
        if not caster.getMana() == caster.getMaxMana()
            // Enable the research to allow eating.
            caster.getOwner().setTechResearched(UPGD_PET_EATING_ALLOWED, 1)

        // If the pet does have full mana.
        else 
            // Disable research so eating is not allowed.
            caster.getOwner().setTechResearched(UPGD_PET_EATING_ALLOWED, 0)

function allowEating(player owner)
    // Allow the pet to eat when first tamed.
    owner.setTechResearched(UPGD_PET_EATING_ALLOWED, 1)

init 
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) -> 
        if EventData.getSpellAbilityId() == ABILITY_FEED_PET
            onCast(EventData.getTriggerUnit())
        if EventData.getTriggerUnit().isPet()
            setResearch(EventData.getTriggerUnit())

    EventListener.onCast(ABILITY_PET_TAME) (unit caster) ->
        allowEating(caster.getOwner())
    EventListener.onCast(ABILITY_PET_TAME_SHAPESHIFTER) (unit caster) ->
        allowEating(caster.getOwner())
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) -> 
        if EventData.getTriggerUnit().isPet()
            allowEating(EventData.getTriggerPlayer())
