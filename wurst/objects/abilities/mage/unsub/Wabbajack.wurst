package Wabbajack

// Standard library imports:
import Assets
import Orders
import ClosureForGroups
import ClosureEvents
import ClosureTimers
import InstantDummyCaster
import BuffObjEditing
import ChannelAbilityPreset
import TimerUtils

// Local imports:
import ToolTipsUtils
import LocalObjectIDs
import ColorUtils
import StringExtensions
import UnitExtensions

let MISSILE_SPEED = 700.
let MISSILE_LIFETIME = 2
let MANACOST = 10
let IMPACT_TRIGGER_AOE = 100.
let MISSILE_FLY_HEIGHT = 120.
let SPAWN_OFFSET_DISTANCE = 50.
let LOOP_INTERVAL = ANIMATION_PERIOD

let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let BUFF_ID_AIR = compiletime(BUFF_ID_GEN.next())

let DURATION_HERO = 1.75
let DURATION_NORMAL = 5.0
let COOLDOWN = 20.
let VISION_RANGE = 350.

let BUFF_TOOLTIP = "This unit has been tormented by a restless soul and cannot move."
let TOOLTIP_EXT = "Unleash a tormented soul in a straight line, caging and revealing the first enemy hit." + makeToolTipDuration(DURATION_HERO, DURATION_NORMAL, COOLDOWN)


function createCageBuffGround(int newId) returns BuffDefinition
    return new BuffDefinition(newId, 'Beng')
        ..setIcon(Icons.bTNLament)
        ..setTargetAttachments(1, 1)
        ..setArtTarget(1, Abilities.zigguratMissile)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setTooltipNormal(1, "Wabbajack's Torment")
        ..setTooltipNormalExtended(1, BUFF_TOOLTIP)
        ..setEditorSuffix(1, "(Wurst)")

function createCageBuffAir(int newId) returns BuffDefinition
    return new BuffDefinition(newId, 'Bena')
        ..setIcon(Icons.bTNLament)
        ..setTargetAttachments(1, 1)
        ..setArtTarget(1, Abilities.zigguratMissile)
        ..setTargetAttachmentPoint0(1, "chest")
        ..setTooltipNormal(1, "Wabbajack's Torment")
        ..setTooltipNormalExtended(1, BUFF_TOOLTIP)
        ..setEditorSuffix(1, "(Wurst)")

@compiletime function createCageBuffs()
    createCageBuffGround(BUFF_ID)
    createCageBuffAir(BUFF_ID_AIR)

@compiletime function createCagingAbility() returns AbilityDefinitionEnsnareCreep
    return new AbilityDefinitionEnsnareCreep(ABILITY_WABBAJACK_CAGE)
        ..setMissileArt("")
        ..setName("Wabbajack Cage Dummy")
        ..setDummyAbility()
        ..setDurationHero(1, DURATION_HERO)
        ..setDurationNormal(1, DURATION_NORMAL)
        ..setTargetsAllowed(1, "friend,enemies,ground,neutral,nonancient,organic")
        ..setEditorSuffix("(Wurst)")
        ..setBuffs(1, commaList(BUFF_ID, BUFF_ID_AIR))

class Wabbajack extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey)
        super(newAbilityId, 1, true)
        this.setIconNormal(Icons.bTNWitchDoctorMaster)
        this.setIconResearch(Icons.bTNWitchDoctorMaster)
        this.setIconTurnOff(Icons.bTNWitchDoctorMaster)
        this.setHeroAbility(false)
        this.setHotkeyNormal(hotkey)
        this.setName("Wabbajack's Tormenter")
        this.setDisableOtherAbilities(1, false)
        this.setCastingTime(1, 0)
        this.setTooltipNormal(1,"Wabbajack's Tormenter".color(GENERAL_COLOR))
        this.setTooltipNormalExtended(1, TOOLTIP_EXT)
        this.setCooldown(1, COOLDOWN)
        this.setManaCost(1, MANACOST)
        this.presetTargetTypes(Targettype.POINT)
        this.setButtonPositionNormalX(1)
        this.setButtonPositionNormalY(1)
        this.setCastRange(1, MISSILE_SPEED * MISSILE_LIFETIME)
        this.setFollowThroughTime(1, 0.5)

@compiletime function createWabbajack()
    new Wabbajack(ABILITY_WABBAJACK, "Q")

class WabbajackProjectile
    use TimedLoop
    real lifeTime
    unit ownerUnit
    angle ang
    vec3 pos
    effect efx
    bool exploded
    bool isOvercharged
    unit target

    construct(unit caster, vec2 casterPos, angle ang)
        this.ownerUnit = caster
        this.lifeTime = 0
        this.ang = ang
        this.pos = casterPos.polarOffset(ang, SPAWN_OFFSET_DISTANCE).withTerrainZ(MISSILE_FLY_HEIGHT)
        this.efx = addEffect(Abilities.zigguratMissile, pos)
        this.exploded = false
        this.efx.setRoll(ang)
        this.target = null
        this.startTimedLoop()

    override function onTimedLoop()
        if this.exploded or this.lifeTime >= MISSILE_LIFETIME
            stopTimedLoopAndDestroy()
        this.lifeTime += LOOP_INTERVAL
        vec3 newPos = this.pos.offset2d(this.ang, MISSILE_SPEED * LOOP_INTERVAL)
        let terrainZ = newPos.getTerrainZ()
        newPos.z = terrainZ + MISSILE_FLY_HEIGHT
        this.efx.setPos(newPos)
        this.pos = newPos
        checkForImpacts()

    function checkForImpacts()
        forUnitsInRange(this.pos.toVec2(), IMPACT_TRIGGER_AOE) u ->
            if isValidTarget(ownerUnit, u)
                this.target = u
                if u.isTroll()
                    spawnTemporaryVision(VISION_RANGE, DURATION_HERO)
                else
                    spawnTemporaryVision(VISION_RANGE, DURATION_NORMAL)
                onImpact()

    function onImpact()
        this.exploded = true
        InstantDummyCaster.castTarget(this.ownerUnit.getOwner(), ABILITY_WABBAJACK_CAGE, 1, Orders.ensnare, this.target)

    function spawnTemporaryVision(real radius, real duration)
        let vis = createVision(ownerUnit.getOwner(), this.pos.toVec2(), radius, true)
        vis.start()
        doAfter(duration) ->
            vis.destr()

    ondestroy
        this.efx.destr()

function isValidTarget(unit caster, unit target) returns bool
    return target.getOwner().isEnemyOf(caster.getOwner())
        and not target.isInvulnerable()
        and not target.isType(UNIT_TYPE_FLYING)
        and target.isAlive()
        and not target.isHidden()
        and not target.isType(UNIT_TYPE_STRUCTURE)
        and target != caster


init
    EventListener.onPointCast(ABILITY_WABBAJACK) (unit caster, vec2 target) ->
        new WabbajackProjectile(caster, caster.getPos(), caster.getPos().angleTo(target))
