package ReplenishEnergy

// Standard library imports:
import Assets
import BuffObjEditing
import ChannelAbilityPreset

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import ToolTipsUtils

let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let BUFF_ORIGINAL_ID = 'Blrl'

let AOE = 800.
let MANA_REGEN = 0.33
let TOOLTIP_NORM = "Replenish Energy"
let TOOLTIP_EXTENDED = "The Master Healer emanates a refreshing aura to himself and his allies, "+
                        "granting {0} energy regeneration per seconds.".format(MANA_REGEN.toString().color(COLOR_LIGHT_BLUE))

let TARGET_ALLOWED = commaList(
    TargetsAllowed.hero,
    TargetsAllowed.friend,
    TargetsAllowed.self
)

function createBuff()
    new BuffDefinition(BUFF_ID, BUFF_ORIGINAL_ID)
        ..setIcon(Icons.bTNTranquility)
        ..setTooltipNormal(1, TOOLTIP_NORM)
        ..setTooltipNormalExtended(1, "This unit is gaining energy from a nearby Master Healer.")

class ReplenishEnergy extends AbilityDefinitionArchMageBrillianceAura
    construct(int newAbilityId, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNormAura(TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(Icons.pASBTNRegenerate)
        this.setIconResearch(Icons.pASBTNRegenerate)
        this.setBuffs(1, toRawCode(BUFF_ID))
        this.setCheckDependencies(false)
        this.setHeroAbility(false)
        this.setAreaofEffect(1, AOE)
        this.setTargetsAllowed(1, TARGET_ALLOWED)

@compiletime function createReplenishEnergy()
    new ReplenishEnergy(ABILITY_REPLENISH_ENERGY, new Pair(2, 1))
    new ReplenishEnergy(ABILITY_SAGE_REPLENISH_ENERGY, new Pair(0, 2))
    createBuff()
