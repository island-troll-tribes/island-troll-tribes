package PetReleasing

// Standard library imports:
import ClosureEvents

// Local imports:
import Classes
import ColorUtils
import LocalObjectIDs
import PetAbilities
import Pets
import StringExtensions
import Transformation
import Tribe

public function releasePet(unit caster)
    // Look up the pet.
    let originalOwner = caster.getOwner()
    let pet = originalOwner.getPet()

    // Deregister the pet.
    originalOwner.removePet()

    // Revert the available abilities.
    setPetAbilities(originalOwner, false)

    // Compute the new owner.
    let newOwner = pet.getPetGrowthChain().indexOf(pet.getTypeId()) == 0
        ? PLAYER_NEUTRAL_PASSIVE
        : PLAYER_NEUTRAL_AGGRESSIVE

    // Transfer the ownership of the pet.
    pet.setOwner(Player(newOwner), true)

    // Notify the owning tribe.
    let tribe = Tribe.ofPlayer(originalOwner)
    if tribe != null
        tribe.getMembers().forEach() (player member) ->
            member.print("A pet was released!".color(GENERAL_COLOR))

// Releases the pet upon choosing a sub-class.
function handleTransformation(unit origin, int targetID)
    // Exit if the unit is not originally a base class.
    if getTrollClassType(origin) != ClassType.BASE_CLASS
        return

    // Exit if the unit is not becoming a sub-class.
    if getTrollClassType(targetID) != ClassType.SUB_CLASS
        return

    // Exit if the unit does not currently own a pet.
    if origin.getOwner().getPet() == null
        return

    // Release the pet if all conditions are met.
    releasePet(origin)

init
    EventListener.onCast(ABILITY_PET_RELEASE) (unit caster) ->
        releasePet(caster)

    // Release pets if the new class does not have them.
    registerPriorEffect() (unit target, int unitID) ->
        handleTransformation(target, unitID)
