package Rejuvenation

// Standard Library Imports:
import AbilityObjEditing
import ObjectIds
import ClosureEvents
import ClosureTimers

// Local Imports:
import LocalObjectIDs
import ToolTipsUtils
import HealingSystem


let COOLDOWN = 30.
let MANA_COST = 30
let HEAL_AMOUNT = 150.
let HEAL_TICKS = 3
let DURATION = 10.
let CAST_RANGE = 15.
let BUTTON_POS_X = 2
let BUTTON_POS_Y = 0
let HOTKEY = "E"
let NAME = "Rejuvenation"
let TOOLTIP_BASIC = "Rejuvenation"
let TOOLTIP_EXT   = "Heal target ally for " + HEAL_AMOUNT.toToolTipGreen() + " over " + DURATION.toToolTipOrange()
                    + " seconds. " + makeToolTipCooldown(COOLDOWN)

@compiletime function createRejuvenationAbility() returns AbilityDefinitionRejuvination
    return new AbilityDefinitionRejuvination(ABILITY_REJUVENATION)
        ..setName(NAME)
        ..presetManaPointsGained(LVL -> 0)
        // This cannot be 0 or the spell won't cast.
        ..presetHitPointsGained(LVL -> 0.1)
        ..presetAllowWhenFull(LVL -> 1)
        ..presetDurationHero(LVL -> DURATION)
        ..presetDurationNormal(LVL -> DURATION)
        ..presetCooldown(LVL -> COOLDOWN)
        ..presetManaCost(LVL -> MANA_COST)
        ..presetCastRange(LVL -> CAST_RANGE)
        ..presetButtonPosNormal(BUTTON_POS_X, BUTTON_POS_Y)
        ..presetHotkey(HOTKEY)
        ..presetTooltipNormal(LVL -> TOOLTIP_BASIC)
        ..presetTooltipNormalExtended(LVL -> TOOLTIP_EXT)
        ..setRequirements("")

function onHeal(unit caster, unit target)
    doPeriodicallyCounted(DURATION/HEAL_TICKS, HEAL_TICKS) (CallbackCounted cb) ->
        new HealingInstance(target, caster, HEAL_AMOUNT/HEAL_TICKS, HealingType.ABILITY)

init
    EventListener.onTargetCast(ABILITY_REJUVENATION) (unit caster, unit target) ->
        onHeal(caster, target)
        
