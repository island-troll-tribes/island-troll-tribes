package ObserverBoard

// Standard library imports:
import Dialog
import ClosureTimers
import HashMap
import LinkedList

// Third-party imports:
import Lodash

// Local imports:
import Boards
import DialogExtensions
import GameMode
import PlayerExtensions
import RegisterEvents
import StringUtils
import Tribe

let OPTION_NAME_COLOR = colorA(180, 180, 180, 255)
let OPTION_VALUE_COLOR = colorA(115, 152, 255, 255)

abstract class ObserverBoardControl
    string name
    player whichPlayer

    construct(string name, player whichPlayer)
        this.name = name
        this.whichPlayer = whichPlayer

    function getName() returns string
        return name

    abstract function getInitialValue() returns string
    abstract function onSelect(VoidFunction<string> callback)

class ObserverBoardVisionControl extends ObserverBoardControl
    let options = new LinkedList<string>()

    construct(player whichPlayer)
        super("Vision", whichPlayer)
        options
            ..add("Players")
            ..add("Neutral")
            ..add("Players + Neutral")

        if whichPlayer.isObserverNew()
            for tribe in Tribe.getTribes()
                options.add("Tribe " + (tribe.getId() + 1).toString())

    function setVision(string toWhat)
        switch toWhat
            case "Players"
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, i < bj_MAX_PLAYERS)
            case "Neutral"
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, i >= bj_MAX_PLAYERS)
            case "Players + Neutral"
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, true)
            default
                let tribeId = toWhat.split(" ").get(1).toInt() - 1
                for i = 0 to bj_MAX_PLAYER_SLOTS - 1
                    let tribe = Tribe.ofPlayer(players[i])
                    let share = tribe != null and tribe.getId() == tribeId
                    players[i].setPlayerAlliance(whichPlayer, ALLIANCE_SHARED_VISION, share)

    override function getInitialValue() returns string
        return options.get(0)

    override function onSelect(VoidFunction<string> callback)
        let diag = DialogCreate()
        for option in options
            diag
            .addButton(option, 0)
            .onClick() btn ->
                setVision(option)
                callback.call(option)

        diag.display(whichPlayer, true)

class ObserverBoardZoomControl extends ObserverBoardControl
    static let MAX = 1000

    var currentValue = 0

    construct(player whichPlayer)
        super("Zoom", whichPlayer)
        currentValue = whichPlayer.getZoom().toInt()

    function setZoom(int amt)
        this.whichPlayer.setZoom(amt.toReal())

    override function getInitialValue() returns string
        return currentValue.toString()

    override function onSelect(VoidFunction<string> callback)
        let diag = DialogCreate()
        for zoom = 0 to MAX step 100
            let zoomStr = zoom.toString()
            diag
            .addButton(zoomStr, 0)
            .onClick() btn ->
                setZoom(zoom)
                callback.call(zoomStr)

        diag.display(whichPlayer, true)

class ObserverBoard
    static let boards = new HashMap<player, thistype>()

    player observer
    LinkedList<ObserverBoardControl> options
    let board = CreateMultiboard()
    var selected = 0
    var minimized = false

    construct(player observer, LinkedList<ObserverBoardControl> options)
        this.observer = observer
        this.options = options

        boards.put(observer, this)

        board
            ..setColumnCount(2)
            ..setRowCount(options.size())
            ..display(observer, true)
            ..setItemsWidth(0.1)

        var row = 0
        for option in options
            board
                .getItem(row, 0)
                ..setValue(option.getName())
                ..setValueColor(OPTION_NAME_COLOR)
                ..setStyle(true, false)
                ..setWidth(0.05)
                ..release()

            board
                .getItem(row, 1)
                ..setValue(option.getInitialValue())
                ..setValueColor(OPTION_VALUE_COLOR)
                ..setStyle(true, false)
                ..release()

            row += 1

        doPeriodically(0.1) cb ->
            board.setTitle(getGameTimersBoardTitle())
            let isMinimized = board.isMinimized()
            if minimized and not isMinimized
                displayOptions()
            minimized = isMinimized

    function displayOptions()
        let diag = DialogCreate()
        for option in options
            diag
            .addButton(option.getName(), 0)
            .onClick(btn -> begin
                let row = options.indexOf(option)
                option.onSelect(value -> begin
                    board
                        .getItem(row, 1)
                        ..setValue(value)
                        ..release()
                end)
            end)

        diag
            .addButton("Quit", 0)
            .onClick(btn -> skip)

        diag.display(observer, true)

function getObservers() returns LinkedList<player>
    let observers = new LinkedList<player>()
    for i = 0 to bj_MAX_PLAYERS - 1
        let current = players[i]
        if current.isObserver() and current.isIngame()
            observers.add(current)
    return observers

init
    GameMode.onModeSelectionFinish() ->
        let observers = getObservers()
        for observer in observers
            let options = asList<ObserverBoardControl>(
                new ObserverBoardVisionControl(observer),
                new ObserverBoardZoomControl(observer)
            )
            new ObserverBoard(observer, options)

        destroy observers

    registerPlayerEvent(EVENT_PLAYER_END_CINEMATIC) ->
        let observer = GetTriggerPlayer()
        if observer.isObserverNew()
            ObserverBoard.boards.get(observer).displayOptions()

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED) ->
        let observer = GetTriggerPlayer()
        if observer.isObserverNew()
            let owner = GetTriggerUnit().getOwner()
            observer.setGold(owner.getGold())
            observer.setLumber(owner.getLumber())
