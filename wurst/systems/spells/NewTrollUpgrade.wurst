package NewTrollUpgrade

import ID
import HashMap
import RegisterEvents
import LegacyTriggers
import MeatSystem
import ReleasePet

public constant trollUpgradeMap = new HashMap<int, int>()
..put(SPELL_WARRIOR         , UNIT_WARRIOR)
..put(SPELL_TRACKER         , UNIT_TRACKER)
..put(SPELL_JUGGERNAUT      , UNIT_JUGGERNAUT)
..put(SPELL_ELEMENTALIST    , UNIT_ELEMENTALIST_NEW)
..put(SPELL_HYPNOTIST       , UNIT_HYPNOTIST)
..put(SPELL_DEMENTIA_MASTER , UNIT_DEMENTIA_MASTER)
..put(SPELL_BOOSTER         , UNIT_BOOSTER)
..put(SPELL_MASTER_HEALER   , UNIT_MASTER_HEALER)
..put(SPELL_SAGE            , UNIT_SAGE)
..put(SPELL_CHICKEN         , UNIT_CHICKEN_FORM)
..put(SPELL_SHAPESHIFTER    , UNIT_SHAPESHIFTER_WOLF)
..put(SPELL_ULTIMATE_FORM   , UNIT_ULTIMATE_FORM)
..put(SPELL_ESCAPE_ARTIST   , UNIT_ESCAPE_ARTIST)
..put(SPELL_CONTORTIONIST   , UNIT_CONTORTIONIST)
..put(SPELL_ASSASSIN        , UNIT_ASSASSIN)
..put(SPELL_OBSERVER        , UNIT_OBSERVER)
..put(SPELL_RADAR_SCOUT     , UNIT_RADAR_SCOUT)
..put(SPELL_TRAPPER         , UNIT_TRAPPER)
..put(SPELL_SPY             , UNIT_SPY)
..put(SPELL_RADAR_GATHERER  , UNIT_RADAR_GATHERER)
..put(SPELL_HERB_MASTER     , UNIT_HERB_MASTER)
..put(SPELL_OMNIGATHERER    , UNIT_OMNIGATHERER)

function replaceUnit(int newUnitId, unit oldUnit) returns unit
    let owner = GetOwningPlayer(oldUnit)
    let pos = oldUnit.getPos()
    let angle = oldUnit.getFacingAngle()

    ShowUnit(oldUnit, false)
    let newUnit = createUnit(owner, newUnitId, pos, angle)
    newUnit.setMana(oldUnit.getMana())
    newUnit.setHP(oldUnit.getHP())

    //Transfer raw meat inventory
    if meatInventoryInstances.has(oldUnit)
        meatInventoryInstances.get(oldUnit).transferMeatInventoryToUnit(newUnit)

    for items in oldUnit.inventory()
        UnitAddItem(newUnit, items)
    RemoveUnit(oldUnit)
    return newUnit

function upgradeUnit(int newUnitId, unit oldUnit)
    let newUnit = replaceUnit(newUnitId, oldUnit)
    let owner = GetOwningPlayer(oldUnit)
    int str = GetHeroStr(oldUnit, false)
    int agi = GetHeroAgi(oldUnit, false)
    int inte = GetHeroInt(oldUnit, false)

    newUnit.setStr(str)
    newUnit.setAgi(agi)
    newUnit.setInt(inte)

    //Change globals to new unit
    GroupRemoveUnit(udg_trolls, oldUnit)
    GroupAddUnit(udg_trolls, newUnit)
    udg_PUnits[GetPlayerId(owner)] = newUnit

    if newUnitId == UNIT_CHICKEN_FORM or newUnitId == UNIT_SHAPESHIFTER_WOLF
        udg_parameterUnit = newUnit
        TriggerExecute(gg_trg_Release_Pets)
        SetPlayerTechResearched(owner, 'Roch', 1)
    else if newUnitId == UNIT_TRUE_FORM or newUnitId == UNIT_ULTIMATE_FORM
        udg_parameterUnit = newUnit
        TriggerExecute(gg_trg_Rest_BM_SKills)
        SetPlayerTechResearched(owner, 'Roch', 1)


    // "Preserve or release BM pet When subbing" -> no such thing in the current state
    // of the game so I didn't recode it
    // Edit : Nevermind, pet doesn't get realese, ended up with 4 wolfs (2 bm 2 wolf pet) in a game :o

    //Avoid desync with localplayer check
    if GetLocalPlayer() == owner
        SelectUnit(newUnit, true)
        ForceUICancel()

function upgradeAction()
    let spell = GetLearnedSkill()
    let oldUnit = GetLearningUnit()
    var _newUnitId = 0

    _newUnitId = trollUpgradeMap.get(spell)
    if _newUnitId != 0
        upgradeUnit(_newUnitId, oldUnit)

init
    registerPlayerUnitEvent(EVENT_PLAYER_HERO_SKILL, () -> upgradeAction())
