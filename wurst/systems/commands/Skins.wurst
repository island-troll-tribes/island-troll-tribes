package Skins

// Standard library imports:
import ClosureTimers
import HashMap
import HashSet
import LinkedList
import OnUnitEnterLeave

// Local imports:
import ChatCommands
import Classes
import ColorUtils
import LocalObjectIDs
import StringExtensions
import Transformation

let TIMEOUT = 10.0

// The base message used for notifying users of the exchange.
let MSG = compiletime(
    asList(
        "Congratulations on unlocking a skin for this class! Type".color(GENERAL_COLOR),
        "-{0}".color(ENERGY_COLOR),
        "within the next".color(GENERAL_COLOR),
        TIMEOUT.toInt().toString().color(HIGHLIGHT_COLOR),
        "seconds to use.".color(GENERAL_COLOR)
    ).joinBy(" ")
)

class CustomSkin
    // A global list of skins per unit type ID.
    // TODO: Support multiple skins per unit.
    static let skins = new HashMap<integer, thistype>()

    // The type ID for the unit that this skin applies to
    integer originID

    // The type ID for the unit that holds the new skin.
    integer targetID

    // The name of the skin, used to select it via text command.
    string name

    // The names of players this feature is enabled for.
    HashSet<string> enabled

    construct(integer originID, integer targetID, string name)
        // Initialize the state.
        this.originID = originID
        this.targetID = targetID
        this.name = name
        this.enabled = new HashSet<string>()

        // Update the global mapping.
        skins.put(originID, this)

        // Enable skins for local testing automatically.
        register("Local Player")

    static function lookup(int originID) returns thistype
        return skins.get(originID)

    static function lookup(unit target) returns thistype
        return lookup(target.getTypeId())

    function register(vararg string names)
        for name in names
            enabled.add(name.toLowerCase())

    function isEnabled(string name) returns bool
        return enabled.has(name.toLowerCase())

    function isEnabled(player target) returns bool
        return enabled.has(target.getName())

// TODO: Run this at compiletime once transformations are used.
function buildSkins()
    new CustomSkin(UNIT_BEAST_MASTER,     UNIT_BEAST_MASTER_1,  "skin-bm-1"     )
    new CustomSkin(UNIT_HUNTER,           UNIT_HUNTER_1,        "skin-hunter-1" )
    new CustomSkin(UNIT_MAGE,             UNIT_MAGE_1,          "skin-mage-1"   )
    new CustomSkin(UNIT_MASTER_HEALER,    UNIT_MASTER_HEALER_1, "skin-mh-1"     )
    new CustomSkin(UNIT_BOOSTER,          UNIT_BOOSTER_1,       "skin-booster-1")
    new CustomSkin(UNIT_ELEMENTALIST_NEW, UNIT_ELEMENTALIST_1,  "skin-ele-1"    )

// This handler is responsible for allowing players to transform new units
// using the BlzSetUnitSkin native. This function does not change the type ID
// of the unit, which facilitates operations that depend on that. However, it
// removes any art effects currently on the target and those are not refreshed
// unless the source of those effects is refreshed. For example, the visual aura
// associated with Immolation will disappear, only reappearing if Immolation is
// toggled. The system could instead use the transformation library, which does
// not have this problems, if the various systems that check exact type IDs are
// corrected to treat original units and their skins the same. This would also
// require that object definitions for the skins be based directly on the origin
// unit definition in order to guarantee that all fields other than appearance
// remain synced.
// TODO: Use the transformation library instead of BlzSetUnitSkin.
function onEnterHandler(unit target)
    // Look up the feature corresponding to the custom skin for the unit.
    let skin = CustomSkin.lookup(target)

    // Exit if the unit does not have a skin.
    if skin == null
        return

    // Exit if the owner is not enabled for the custom skin.
    if not skin.isEnabled(target.getOwner())
        return

    // Notify the owner of the option to use the custom skin.
    target.getOwner().print(MSG.format(skin.name), TIMEOUT)

    // Register the command used to switch to the custom skin.
    registerCommand(target.getOwner(), skin.name) (owner, args) ->
        // Transform the unit to impart the custom skin.
        BlzSetUnitSkin(target, skin.targetID)

        // Refresh the ability responsible for hero glow, which is not
        // attached properly automatically following a skin change.
        if target.hasAbility(ABILITY_HERO_GLOW)
            target.removeAbility(ABILITY_HERO_GLOW)
            target.addAbility(ABILITY_HERO_GLOW)

    // Prevent the user from using the transformation during gameplay.
    doAfter(TIMEOUT) ->
        deregisterCommand(target.getOwner(), skin.name)

init
    // Build the registry at runtime.
    buildSkins()

    // Register the callback used to handle skins for new units.
    onEnter() ->
        onEnterHandler(getEnterLeaveUnit())

    // Register the callback used to handle skins for sub-classes.
    registerAfterEffect() (unit target, int unitID) ->
        // Verify that the unit changed classes.
        if getTrollClassType(target) != getTrollClassType(unitID)
            onEnterHandler(target)

    CustomSkin.lookup(UNIT_BOOSTER).register(
        "Mambo#11709,",
        "MasterTroll#11111"
    )

    CustomSkin.lookup(UNIT_HUNTER).register(
        "Mambo#11709,"
    )

    CustomSkin.lookup(UNIT_MASTER_HEALER).register(
    )

    CustomSkin.lookup(UNIT_MAGE).register(
        "Mambo#11709,"
    )

    CustomSkin.lookup(UNIT_ELEMENTALIST_NEW).register(
        "Mambo#11709,"
    )

    CustomSkin.lookup(UNIT_BEAST_MASTER).register(
    )
