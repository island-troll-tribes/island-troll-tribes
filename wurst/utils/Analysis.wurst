package Analysis

import LinkedList
import TerrainUtils

function rect.getArea() returns real
    return this.height() * this.width()

function LinkedList<rect>.getTotalArea() returns real
    real total_area = 0
    for r in this
        total_area += r.getArea()
    return total_area


function LinkedList<rect>.selectRandomRectWeighted() returns rect
    //Takes into account the portion that the rect has of the total area
    //Used for picking random point from multiple rects evenly
    let total_area = this.getTotalArea()
    let random = GetRandomReal(0, total_area)

    real randomPickTemporary = 0
    for r in this
        randomPickTemporary += r.getArea()
        if (random <= randomPickTemporary)
            return r

    print("ERROR: SelectRandomRectWeighted returned null!")
    return null

function approximateRectsLandmassRandomPoints(LinkedList<rect> rects, int testPoints, bool printOutput) returns real
    int waterPoints = 0
    int walkableLandPoints = 0
    int nonWalkableLandPoints = 0

    for i = 1 to testPoints
        if (i mod 750 == 0) //Break up execution to avoid op limit
            TriggerSleepAction(0.1)

        let randomPointRect = rects.selectRandomRectWeighted()
        let randomPoint = randomPointRect.randomPoint()
        if randomPoint.isTerrainShallowWater() or randomPoint.isTerrainDeepWater()
            waterPoints += 1
        else if randomPoint.isTerrainLand()
            if randomPoint.isTerrainWalkable()
                walkableLandPoints += 1
            else
                nonWalkableLandPoints += 1

    let totalPoints = waterPoints + walkableLandPoints + nonWalkableLandPoints
    let walkableLandRatio = walkableLandPoints / totalPoints
    let totalLandRatio = (walkableLandPoints + nonWalkableLandPoints) / totalPoints
    let waterRatio = waterPoints / totalPoints
    let totalArea = rects.getTotalArea()

    let walkableArea = (totalArea*walkableLandRatio)
    let totalLandArea = (totalArea*totalLandRatio)
    let waterArea = (totalArea*waterRatio)
    if printOutput
        print("Sample points analyzed: " + testPoints.toString())
        print("Rects had total area of " + totalArea.toString(0) + " units.")
        print("Walkable Land area ratio: " + (walkableLandRatio*100).toString(2) + "% Area: " + walkableArea.toString(0) + " units.")
        print("Total Land area ratio: " + (totalLandRatio*100).toString(2) + "% Area: " + totalLandArea.toString(0) + " units.")
        print("Water area ratio: " + (waterRatio*100).toString(2) + "% Area: " + waterArea.toString(0) + " units.")

    return walkableArea



class NamedRectList
    string name
    LinkedList<rect> rects
    real itemChance

    construct (string name, LinkedList<rect> rects, real itemChance)
        this.rects = rects
        this.name = name
        this.itemChance = itemChance

var rectLists = new LinkedList<NamedRectList>()

init
/*
    registerCommandAll("calculate") (triggerPlayer, args) ->
        var newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_1_1)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_1_1", newList, 100/(20+33+100)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_1_2)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_1_2", newList, 33/(20+33+100)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_1_3)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_1_3", newList, 20/(20+33+100)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_2_1)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_2_1", newList, 21/(21+21+26)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_2_2)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_2_2", newList, 21/(21+21+26)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_2_3)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_2_3", newList, 26/(21+21+26)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_3_1)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_3_1", newList, 100/(10+48+100)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_3_2)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_3_2", newList, 10/(10+48+100)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_3_3)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_3_3", newList, 48/(10+48+100)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_4_1)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_4_1", newList, 140/(140+9+5)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_4_2)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_4_2", newList, 5/(140+9+5)))

        newList = new LinkedList<rect>()
        newList.push(gg_rct_spawn_area_4_3)
        rectLists.add(new NamedRectList("gg_rct_spawn_area_4_3", newList, 9/(140+9+5)))

        for rlist in rectLists
            real walkableLand = approximateRectsLandmassRandomPoints(rlist.rects, 15000, false)
            //division by 100000000 for area because land areas are incredibly large numbers in square units
            print(rlist.name + " resource density index: " + (rlist.itemChance / (walkableLand / 100000000)).toString())
*/
