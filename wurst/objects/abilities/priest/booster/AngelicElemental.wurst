package AngelicElemental
import BuffObjEditing
import ClosureTimers
import ClosureForGroups
import Orders
import ClosureEvents
import Assets
import MapBounds
import DummyCaster
import ToolTipsUtils
import ChannelAbilityPreset
import Lodash
import LocalObjectIDs

let EFFECT_PATH = Abilities.resurrectcaster
let BUFF_EFFECT_PATH = Abilities.staff_Sanctuary_Target
let BUFF_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let ABILITY_ICON = Icons.bTNDivineIntervention
let PROJECTILE_HEIGHT_OFFSET = -420.
let BUFF_CAST_RADIUS = 250.
let PROJECTILE_LIFETIME = 1.4
let PROJECTILE_SPEED = 550.
let BUFF_DAMAGE_INCREASE = 0.25
let BUFF_ARMOR_INCREASE = 3.
let BUFF_DURATION = 20.
let COOLDOWN = 60.
let MANACOST = 30
let INITIAL_DISTANCE = 75.
let TOOLTIP_NORM = "Angelic Elemental"
let TOOLTIP_EXT = "Summons an angelic elemental and projects it forward. Any friendly unit that comes in contact with the elemental gets blessed, "+
                  "increasing their attack damage by {0} and armor by {1} for {2} seconds. Has {3} seconds cooldown."
                  .format(BUFF_DAMAGE_INCREASE.toToolTipRed(), BUFF_ARMOR_INCREASE.toToolTipGreen(), BUFF_DURATION.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())


function createBuff()
    new BuffDefinition(BUFF_ID, 'BHds') // orig ID is divine shield buff
        ..setTooltipNormal(1, "Inner Power")
        ..setTooltipNormalExtended(1, "Blessed by an angelic elemental. Temporarily increased damage and armor.")
        ..setArtTarget(1, BUFF_EFFECT_PATH)

function createBuffSpell()
    new AbilityDefinitionInnerFireCreep(BUFF_ABILITY_ID)
        ..setLevels(1)
        ..presetAutocastRange(lvl -> 0)
        ..presetDamageIncrease(lvl -> BUFF_DAMAGE_INCREASE)
        ..presetDefenseIncrease(lvl -> BUFF_ARMOR_INCREASE.toInt())
        ..presetCastRange(lvl -> 99999)
        ..presetCooldown(lvl -> 0)
        ..presetDurationHero(lvl -> 20)
        ..presetDurationNormal(lvl -> 20)
        ..presetManaCost(lvl -> 0)
        ..presetBuffs(lvl -> toRawCode(BUFF_ID))
        ..setCheckDependencies(false)
        ..setHeroAbility(false)
        ..setItemAbility(false)

class AngelicElemental extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setIconNormal(ABILITY_ICON)
        this.presetFollowThroughTime(lvl -> 0.5)
        this.presetTargetType(lvl -> 2)
        this.presetCastRange(lvl -> PROJECTILE_LIFETIME * PROJECTILE_SPEED)
        this.presetCooldown(lvl -> COOLDOWN)
        this.setHeroAbility(false)
        this.presetManaCost(lvl -> MANACOST)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXT)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setBaseOrderID(1, "blink")

@compiletime function createAngelicElemental()
    new AngelicElemental(ABILITY_ANGELIC_ELEMENTAL, "S", new Pair(2, 1))
    new AngelicElemental(ABILITY_SAGE_ANGELIC_ELEMENTAL, "C", new Pair(2, 2))
    createBuff()
    createBuffSpell()

class AngelicElementalInstance
    player ownerPlayer
    unit caster
    effect projectile
    real distance
    angle ang
    construct(unit caster, vec2 targetPos)
        this.caster = caster
        this.ownerPlayer = caster.getOwner()
        this.ang = caster.getPos().angleTo(targetPos)
        this.distance = INITIAL_DISTANCE
        let startPos = caster.getPos().polarOffset(this.ang, this.distance)
        this.projectile = addEffect(EFFECT_PATH, startPos.withTerrainZ(PROJECTILE_HEIGHT_OFFSET))
        this.projectile.setTime(1)
        this.projectile.setTimeScale(0.3)
        this.projectile.setScale(1.4)
        this.projectile.setRoll(ang)
        startUpdateLoop()

    function startUpdateLoop()
        doPeriodicallyTimed(ANIMATION_PERIOD, PROJECTILE_LIFETIME) updaterLoop ->
            let newPos2D = this.projectile.getPos() + ang.toVec(PROJECTILE_SPEED*ANIMATION_PERIOD)
            let newPos3D = newPos2D.withTerrainZ(PROJECTILE_HEIGHT_OFFSET)
            this.projectile.setPos(newPos3D)
            applyBuffs()
            if updaterLoop.isLast()
                destroy this

    function applyBuffs()
        let projectilePos = projectile.getPos()
        forUnitsInRange(projectilePos, BUFF_CAST_RADIUS) u ->
            if isUnitValidBuffTarget(u)
                new DummyCaster()
                    ..owner(ownerPlayer)
                    ..origin(projectilePos)
                    ..castTarget(BUFF_ABILITY_ID, 1, Orders.innerfire, u)

    function isUnitValidBuffTarget(unit u) returns bool
        return u.getOwner().isAllyOf(ownerPlayer)
            and not u.isType(UNIT_TYPE_STRUCTURE)
            and not u.hasAbility(BUFF_ID)
            and u.isAlive()
            and not u.isHidden()

    ondestroy
        projectile.setPos(boundMax)
        projectile.destr()

function onCast()
    let caster = GetSpellAbilityUnit()
    let targetPos = EventData.getSpellTargetPos()
    new AngelicElementalInstance(caster, targetPos)

init
    registerSpellEffectEvent(ABILITY_ANGELIC_ELEMENTAL, () -> onCast())
    registerSpellEffectEvent(ABILITY_SAGE_ANGELIC_ELEMENTAL, () -> onCast())
