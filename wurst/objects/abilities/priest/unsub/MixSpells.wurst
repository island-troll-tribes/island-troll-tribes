package MixSpells

// Standard lib imports:
import Assets
import ClosureEvents
import ChannelAbilityPreset
import LinkedList
import StandardTextTags

// Third party imports:
import Lodash

// Local imports:
import ColorUtils
import LightningUtils
import LocalObjectIDs
import ToolTipsUtils

let COOLDOWN = 50.
let ENERGY_MANACOST = 0
let HEAT_MANACOST = 10
let CAST_RANGE = 500.

let TOOLTIP_NORM = "Mix "

let TARGET_ALLOWED = commaList(
    TargetsAllowed.air,
    TargetsAllowed.enemies,
    TargetsAllowed.friend,
    TargetsAllowed.ground,
    TargetsAllowed.hero,
    TargetsAllowed.notself
)

// TODO: Build these lists out programmatically.

// The list of spells used to mix energy.
let MIX_ENERGY_IDS = asList(
    ABILITY_MIX_ENERGY,
    ABILITY_MH_MIX_ENERGY,
    ABILITY_SAGE_MIX_ENERGY
)

// The list of spells used to mix heat.
let MIX_HEAT_IDS = asList(
    ABILITY_MIX_HEAT,
    ABILITY_MH_MIX_HEAT,
    ABILITY_SAGE_MIX_HEAT
)

class MixHeat extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        let toolTipExtended = "The Priest psychically links up with a target. Both unit's heat are drained, pooled, and "+
                              "redistributed equally between the 2 units. Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())
        this.setLevels(1)
        this.setCastRange(1, CAST_RANGE)
        this.setManaCost(1, HEAT_MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setHeroAbility(false)
        this.presetTargetTypes(Targettype.UNIT)
        this.setTargetsAllowed(1, TARGET_ALLOWED)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM+"Heat")
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM+"Heat"))
        this.presetTooltipNormalExtended(lvl -> toolTipExtended)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setFollowThroughTime(1, 0.5)
        this.setBaseOrderID(1, "slowoff")
        this.setIconNormal("ReplaceableTextures\\CommandButtons\\BTNHeatDrain.blp")


class MixEnergy extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        let toolTipExtended = "The Priest psychically links up with a target. Both unit's energies are drained, pooled, and "+
                              "redistributed equally between the 2 units. Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())
        this.setLevels(1)
        this.setCastRange(1, CAST_RANGE)
        this.setManaCost(1, ENERGY_MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setHeroAbility(false)
        this.presetTargetTypes(Targettype.UNIT)
        this.setTargetsAllowed(1, TARGET_ALLOWED)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM+"Energy")
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM+"Energy"))
        this.presetTooltipNormalExtended(lvl -> toolTipExtended)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setFollowThroughTime(1, 0.5)
        this.setBaseOrderID(1, "slow")
        this.setIconNormal(Icons.bTNManaDrain)


@compiletime function createMixSpells()
    // Master Healer
    new MixEnergy(ABILITY_MH_MIX_ENERGY , "Q", new Pair(0, 0))
    new MixHeat  (ABILITY_MH_MIX_HEAT   , "W", new Pair(1, 0))
    // Priest
    new MixEnergy(ABILITY_MIX_ENERGY , "D", new Pair(2, 1))
    new MixHeat  (ABILITY_MIX_HEAT   , "F", new Pair(3, 1))
    // Sage
    new MixEnergy(ABILITY_SAGE_MIX_ENERGY , "Z", new Pair(0, 2))
    new MixHeat  (ABILITY_SAGE_MIX_HEAT   , "X", new Pair(1, 2))

function int.asSignedString() returns string
    if this < 0
        // Negative values are already well handled.
        return this.toString()
    else if this == 0
        // Use a long dash to indicate zero.
        return "--"
    else
        // Prepend a plus to indicate positive values.
        return "+" + this.toString()

function mix(
    unit caster,
    unit target,
    Function<unit, int> getter,
    VoidBiFunction<unit, int> setter,
    color color_,
    string lightningType
)
    // The caster and the target are affected equally.
    let targets = asOwnedList(target, caster)

    // Compute the resulting value, the average of the current ones.
    let result = targets
        .map((target, index) -> getter.call(target))
        .mean()
        .toInt()

    // Use lightning to display the visual effect of the casting.
    attachLightningFX(caster, target, lightningType, 1.)

    // Apply and display the effect for each affected unit.
    for affected in targets
        // Use a text tag to visualize the effect.
        standardTextTag(
            affected.getPos(),
            (result - getter.call(affected)).asSignedString()
        )
            ..setColor(color_.withAlpha(255))

        // Update the value.
        setter.call(affected, result)

    // Clean up the local state.
    destroy targets

init
    for abilityID in MIX_ENERGY_IDS
        EventListener.onTargetCast(abilityID) (caster, target) ->
            mix(
                caster,
                target,
                unit_ -> unit_.getMana().toInt(),
                (unit_, value) -> unit_.setMana(value.toReal()),
                COLOR_MANA,
                LIGHTNING_DRAIN_MANA
            )

    for abilityID in MIX_HEAT_IDS
        EventListener.onTargetCast(abilityID) (caster, target) ->
            mix(
                caster,
                target,
                unit_ -> unit_.getOwner().getGold(),
                (unit_, value) -> unit_.getOwner().setGold(value),
                COLOR_ORANGE,
                LIGHTNING_MAGIC_LEASH
            )

