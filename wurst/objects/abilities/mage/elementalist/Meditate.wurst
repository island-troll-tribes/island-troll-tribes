package Meditate

// Standard library imports:
import Assets
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import HashMap
import Orders

// Third-party imports:
import Lodash

// Local imports:
import DamageListeners
import LocalObjectIDs
import OverCharge
import ToolTipsUtils

// The visual effect used to represent meditation.
let FX_PATH = Abilities.darkRitualTarget

// The lifespan of the animation.
// TODO: Automate this somehow instead of knowing and hard-coding it.
let FX_DURATION = 2.

// The time scale used for the visual effect.
let FX_TIME_SCALE = 2.

// The interval at which the periodic effects are applied.
let PERIOD_INTERVAL = 0.2

// The interval at which the visual effect needs to be refreshed.
let FX_INTERVAL = FX_DURATION / FX_TIME_SCALE

// The number of ticks between replaying the visual effect. Rounding up is used
// to prevent multiple animations playing simultaneously for an instance.
let TICKS_PER_FX = (FX_INTERVAL / PERIOD_INTERVAL).ceil()

let COOLDOWN = 72.
let MANACOST = 0
let DURATION = 7.
let MANA_PER_SECOND = 18.
let ABILITY_ICON = "ReplaceableTextures\\CommandButtons\\BTNMedidate.blp"
let TOOLTIP_NORM = "Meditate"
let TOOLTIP_EXTENDED = "Channels to recover {0} mana over {1} seconds. Cancels on damage. Has {2} seconds cooldown."
    .format((MANA_PER_SECOND * DURATION).toToolTipTeal(), DURATION.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())

@compiletime function createMeditate() returns AbilityDefinition
    return constructMeditate(ABILITY_MEDITATE, "D", new Pair(2, 1))

function constructMeditate(int newAbilityId, string hotkey, Pair<int, int> buttonPos) returns AbilityDefinition
    return new ChannelAbilityPreset(newAbilityId, 1, true)
        ..setTargetType(1, 0)
        ..setButtonPositionNormalX(buttonPos.a)
        ..setButtonPositionNormalY(buttonPos.b)
        ..setIconNormal(ABILITY_ICON)
        ..setIconResearch(ABILITY_ICON)
        ..setIconTurnOff(ABILITY_ICON)
        ..setHeroAbility(false)
        ..setHotkeyNormal(hotkey)
        ..setName(TOOLTIP_NORM)
        ..setDisableOtherAbilities(1, false)
        ..setFollowThroughTime(1, DURATION)
        ..setCastingTime(1, 0)
        ..setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        ..setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        ..setOptions(1, 1)
        ..setCooldown(1, COOLDOWN)
        ..setManaCost(1, MANACOST)
        ..setBaseOrderID(1, "auraunholy")

class MeditateInstance
    // The collection of all units currently under the effects of Meditate.
    static HashMap<unit, thistype> instances = new HashMap<unit, thistype>()

    // The unit that cast Meditate.
    unit caster

    // Whether the casting of Meditate is still being channeled.
    bool isChanneling

    // Whether the casting of Meditate is affected by Overcharge.
    bool isOvercharged

    construct(unit caster)
        // Store the caster responsible for this instance.
        this.caster = caster

        // The effect is always started by channeling.
        isChanneling = true

        // Consume Overcharge, if applicable.
        isOvercharged = consumeOvercharge(caster)

        // Begin the effects of Meditate.
        apply()

        // Remove references to prior castings still in effect.
        // TODO: This would allow multiple instances for a single caster, which
        // would increase mana regeneration. Furthermore, the first instance is
        // removed from the global state and can't be cancelled, so damage will
        // not halt an existing overcharged instance.
        if instances.has(caster)
            instances.getAndRemove(caster)

        // Store the reference globally.
        instances.put(caster, this)

    ondestroy
        // Remove the reference to this instance from the global state.
        if instances.get(caster) == this
            instances.remove(caster)

    // Applies the timed effects of Meditate.
    function apply()
        // Create a loop to orchestrate the mechanical effects.
        doPeriodicallyTimed(PERIOD_INTERVAL, DURATION) cb ->
            // Check that the instance is still in effect.
            if isActive()
                // Regenerate mana at the appropriate rate.
                caster.addMana(PERIOD_INTERVAL * MANA_PER_SECOND)

                // Sync the refresh of visual effect to its duration.
                if cb.getCount() % TICKS_PER_FX == 0
                    // Create a visual effect indicating that the unit is meditating.
                    let efx = caster.addEffect(FX_PATH, "origin")
                        ..setTimeScale(2)

                    // Remove the effect shortly after.
                    doAfter(1) ->
                        efx.destr()
            // End the effect if it is no longer active.
            else
                cb.stop()

            // End the effect if this loop is closing.
            if cb.getCount() <= 1
                destroy this

    function isActive() returns bool
        return isChanneling or isOvercharged

    static function onEndCast(unit caster)
        // Look up the instance for the caster
        let instance = instances.get(caster)

        // Exit if the target is not under the effect of Meditate, which may
        // happen if the periodic loop and casting end simultaneosuly.
        if instance == null
            return

        // Cancel the channeling effect.
        instance.isChanneling = false

    static function onDamage()
        // Look up the state.
        let target = DamageEvent.getTarget()
        let amount = DamageEvent.getAmount()
        let element = DamageEvent.getElement()

        // Ignore fake damage.
        if element != null and element.hasTag(FAKE_DAMAGE)
            return

        // Ignore inconsequential damage.
        if amount < 0.5
            return

        // Look up the instance for the caster.
        let instance = instances.get(target)

        // Exit if the target is not under the effect of Meditate.
        if instance == null
            return

        // Halt the channeling, as necessary.
        if instance.isChanneling
            target.issueImmediateOrderById(Orders.stop)

        // Cancel the Overcharge effect.
        instance.isOvercharged = false

init
    registerSpellEffectEvent(ABILITY_MEDITATE) ->
        new MeditateInstance(GetSpellAbilityUnit())

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
        if GetSpellAbilityId() == ABILITY_MEDITATE
            MeditateInstance.onEndCast(GetSpellAbilityUnit())

    DamageEvent.addListener(DamageListenerPriorities.MEDITATE castTo int) ->
        MeditateInstance.onDamage()
