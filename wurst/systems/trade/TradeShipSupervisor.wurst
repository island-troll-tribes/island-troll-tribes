package TradeShipSupervisor

// Standard library imports:
import ClosureEvents
import ClosureTimers
import ErrorHandling
import HashMap
import LinkedList
import Orders

// Local imports:
import LocalAssets
import TradeShipStop

let TRADE_SHIP_PAUSE_TIME_DEST = 0
let TRADE_SHIP_PAUSE_TIME_SELL = 0

public interface TradeShipListener
    function run(TradeShipSupervisor ship)

public enum TradeShipSupervisorState
    MOVING
    STOPPED
    EXITED

public class TradeShipSupervisor
    static let ships = new HashMap<unit, thistype>()
    static let whenEnterRegion = CreateTrigger()
        ..registerEnterRegion(TradeShipStop.tradeStops, null)
        ..addAction(function TradeShipSupervisor.handleEnterRegion)

    unit ship
    unit dummy
    bool orderListenerEnabled = true
    TradeShipStop firstStop
    TradeShipStop nextStop
    CallbackPeriodic callback
    var state = TradeShipSupervisorState.STOPPED
    let listeners = new LinkedList<TradeShipListener>()
    var numForksReached = 0

    static function handleEnterRegion()
        let enteringUnit = GetEnteringUnit()
        if ships.has(enteringUnit)
            ships.get(enteringUnit).processEnterRegion()

    construct(TradeShipStop firstStop, int shipId)
        // Look up the next stop in order to place the ship facing it.
        nextStop = firstStop.getNext()

        // Create the ship.
        ship = createUnit(
            players[PLAYER_NEUTRAL_PASSIVE],
            shipId,
            firstStop.getPos(),
            firstStop.getPos().angleTo(nextStop.getPos())
        )

        // Create the dummy unit used to display the gold mine minimap icon.
        dummy = createUnit(
            // Use a different player to prevent formation while stopped.
            players[PLAYER_NEUTRAL_AGGRESSIVE],
            LocalUnitIds.dummyGoldMine,
            firstStop.getPos(),
            firstStop.getPos().angleTo(nextStop.getPos())
        )

        // Disable the pathing to prevent players from blocking the ship.
        ship.setPathing(false)

        // Update the location of the dummy to match the ship periodically.
        callback = doPeriodically(1.) (CallbackPeriodic cb) ->
            dummy.setXY(ship.getPos())

        // Register the unit for later listeners.
        ships.put(ship, this)

        // Begin the trade route.
        moveToNextStop()

        // Prevent players from issuing orders using the shared control glitch.
        EventListener.add(ship, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
            onIssuedOrder()
        EventListener.add(ship, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
            onIssuedOrder()
        EventListener.add(ship, EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
            onIssuedOrder()

    function onIssuedOrder()
        // Exit if this listener is disabled, which prevents infinite recursion.
        if not this.orderListenerEnabled
            return

        // Allow immediate orders, such as selling, to execute.
        nullTimer() ->
            // Ensure that the ship does not deviate from its path.
            issueMoveOrder()

    function getState() returns TradeShipSupervisorState
        return state

    function addListener(TradeShipListener listener)
        listeners.add(listener)

    function triggerListeners()
        listeners.forEach(listener -> listener.run(this))

    function moveToNextStop()
        // Exit if the ship is already moving.
        if state == TradeShipSupervisorState.MOVING
            return

        // Register the new state.
        state = TradeShipSupervisorState.MOVING

        // Issue the required order.
        issueMoveOrder()

    function issueMoveOrder()
        // Prevent the next issued order from generating another order.
        this.orderListenerEnabled = false

        // Move the ship to the next stop.
        ship.issuePointOrderById(OrderIds.move, nextStop.getPos())

        // Reenable the listener once the path is set.
        this.orderListenerEnabled = true

    function pause(real duration)
        // Exit if the ship is already stopped.
        if state == TradeShipSupervisorState.STOPPED
            return

        // Register the new state.
        state = TradeShipSupervisorState.STOPPED

        // Continue along the route after the given duration.
        doAfter(duration) ->
            setNextStop()
            moveToNextStop()

    function removeShip()
        ships.remove(ship)
        dummy.remove()
        ship.remove()
        state = TradeShipSupervisorState.EXITED
        destroy callback
        ship = null

    function setNextStop()
        let hasFork = nextStop.hasFork()
        if hasFork and numForksReached > 3
            nextStop = nextStop.getFork()
        else
            numForksReached += hasFork.toInt()
            nextStop = nextStop.getNext()

    private function processEnterRegion()
        if not nextStop.isInStopRange(ship)
            return

        if nextStop.isLastStop()
            removeShip()
        else
            pause(nextStop.getPauseTime())

        triggerListeners()

    ondestroy
        for listener in listeners
            destroy listener
        destroy listeners

        if ship != null
            removeShip()
            error("TradeShipSupervisorError: destroyed while ship not null")
