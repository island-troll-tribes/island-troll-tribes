package NewBlur

// Standard-library imports:
import Assets
import OrderIds
import LinkedList
import ClosureTimers
import ClosureEvents
import BuffObjEditing
import ClosureForGroups
import ChannelAbilityPreset
import InstantDummyCaster

// Third-party imports:
import Lodash

// Local imports:
import UnitExtensions
import LocalObjectIDs
import ToolTipsUtils

let DAZZLE_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
let DAZZLE_BUFF_ID    = compiletime(BUFF_ID_GEN.next())
let DAZZLE_BUFF_ORIGINAL_ID = 'Bhtc'

let BLUR_BUFF_ID = compiletime(BUFF_ID_GEN.next())
let BLUR_BUFF_ORIGINAL_ID = 'Bspe'
let COOLDOWN = 40.
let MANACOST = 30

let CHANCE_TO_MISS = .3
let DURATION = 10.
let DURATION_DAZZLE = 3.
let TOOLTIP_NORM = "Blur"
let TOOLTIP_EXTENDED = "Makes the Escape Artist sprint as fast as he can, leaving blurs. If an enemy comes in contact "+
                       "with blurs, its attack accuracy is temporarily decreased by {0}."
                       .format(CHANCE_TO_MISS.toToolTipOrange())+makeToolTipDuration(DURATION, COOLDOWN)

let EA_AFTER_IMAGE = compiletime(UNIT_ID_GEN.next())
let AS_AFTER_IMAGE = compiletime(UNIT_ID_GEN.next())

// AfterImage locust unit, for assassin and escape artist since they have different model
class AfterImageUnit extends UnitDefinition
    construct(int newUnitId, string model)
        super(newUnitId, 'nder') // based off stag
        this.setNormalAbilities("Aloc") // locust ability
        this.setSelectionScale(1.60)
        this.setIconGameInterface(Icons.bTNDarkTroll)
        this.setShadowImageUnit("none")
        this.setHasWaterShadow(false)
        this.setMovementType(MovementType.None)
        this.setHideMinimapDisplay(true)
        this.setHitPointsMaximumBase(125)
        this.setSightRadiusDay(0)
        this.setSightRadiusNight(0)
        this.setModelFile(model)
        this.setScalingValue(0.95)
        this.setName("Blur AfterImage")

function createDazzleBuff()
    new BuffDefinition(DAZZLE_BUFF_ID, DAZZLE_BUFF_ORIGINAL_ID)
        ..setIcon(Icons.bTNStarFall)
        ..setTooltipNormal(1, "Dazzled")
        ..setTooltipNormalExtended(1, "This unit has been dazzled. It has {0} chance to miss.".format(CHANCE_TO_MISS.toToolTipOrange()))

function createBlurBuff()
    new BuffDefinition(BLUR_BUFF_ID, BLUR_BUFF_ORIGINAL_ID)
        ..setIcon(Icons.bTNDarkTroll)
        ..setTooltipNormal(1, TOOLTIP_NORM)
        ..setTooltipNormalExtended(1, "This unit is running fast, decrease nearby enemy accuracy.")
        ..setTargetAttachmentPoint0(1, "foot,left")
        ..setTargetAttachmentPoint1(1, "foot,right")
        ..setTargetAttachments(1, 2)
        ..setArtTarget(1, Abilities.trollBeserkerTarget)

class Dazzle extends AbilityDefinitionCurse
    construct(int newAbilityId)
        super(newAbilityId)
        this.setDummyAbility()
        this.setName("Dazzle")
        this.setDurationHero(1, DURATION_DAZZLE)
        this.setDurationNormal(1, DURATION_DAZZLE)
        this.setBuffs(1, toRawCode(DAZZLE_BUFF_ID))
        this.setChancetoMiss(1, CHANCE_TO_MISS)

class Blur extends AbilityDefinitionItemSpeed
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setItemAbility(false)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(Icons.bTNBoots)
        this.setIconResearch(Icons.bTNBoots)
        this.setManaCost(1, MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setDurationHero(1, DURATION)
        this.setDurationNormal(1, DURATION)
        this.setBuffs(1, toRawCode(BLUR_BUFF_ID))
        this.setMovementSpeedIncrease(1, 2.0)


@compiletime function createBlur()
    new Blur(ABILITY_BLUR, "W", new Pair(1, 0))
    new Dazzle(DAZZLE_ABILITY_ID)
    new AfterImageUnit(EA_AFTER_IMAGE, Units.darkTroll1)
    new AfterImageUnit(AS_AFTER_IMAGE, Units.darkTrollTrapper1)
    createDazzleBuff()
    createBlurBuff()

function dazzled(LinkedList<unit> afterImages)
    afterImages.forEach() afterImage ->
        forUnitsInRange(afterImage.getPos(), 200) u ->
            if isValidTarget(afterImage, u)
                InstantDummyCaster.castTarget(afterImage.getOwner(), DAZZLE_ABILITY_ID, 1, Orders.curse, u)

function isValidTarget(unit caster, unit target) returns bool
    return target.getOwner().isEnemyOf(caster.getOwner())
        and not target.isInvulnerable()
        and not target.isType(UNIT_TYPE_FLYING)
        and target.isAlive()
        and not target.isHidden()
        and not target.isType(UNIT_TYPE_STRUCTURE)

// Change afterImage Transparency following it's position in the list
function updateTransparency(LinkedList<unit> afterImages)
    afterImages.forEach() afterImage ->
        afterImage.setVertexColor(255, 255, 255, (90 - 10 * afterImages.indexOf(afterImage)))

function onCast(unit caster)
    let afterImageList = new LinkedList<unit>
    // AfterImage model
    var afterImageUnit = EA_AFTER_IMAGE

    if caster.getTypeId() == UNIT_ASSASSIN
        afterImageUnit = AS_AFTER_IMAGE

    doAfter(0.2) ->
        // Start spawning afterImage
        doPeriodicallyTimed(0.10, DURATION + 0.10 * 10) cb ->
            updateTransparency(afterImageList)
            dazzled(afterImageList)

            // Create new afterImage as long as the unit is buffed
            // Don't create if unit is jumping, jump currentOrders is "stunned" for some reason"
            if caster.hasAbility(BLUR_BUFF_ID) and caster.getCurrentOrder() != Orders.stunned
                let afterImage = createUnit(caster.getOwner(), afterImageUnit, caster.getPos3Real(), caster.getFacingAngle())
                afterImage.setPathing(false)
                // Set afterImage animation to run when caster's running, else it should be random
                if caster.getCurrentOrder() != 0
                    afterImage.setAnimation(8)
                afterImageList.addtoStart(afterImage)
            // Remove the afterImage after the set time, 10 afterImage max
                doAfter(0.10 * 10) ->
                    afterImageList.pop().remove()

init
    EventListener.onCast(ABILITY_BLUR, (unit caster) -> onCast(caster))
