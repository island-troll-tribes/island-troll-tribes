package GatherMeat

// Standard library imports:
import AbilityObjEditing
import Assets
import ClosureEvents
import HashMap
import ObjectIds
import UnitIndexer

// Local imports:
import LocalAssets

// The number of corpses stored, per unit.
let counts = new HashMap<unit, int>

@compiletime function createDummyMeatGather()
    new UnitDefinition(LocalUnitIds.dummyMeatGather, UnitIds.deer)

// Used to gather meat via a Raise Dead hook.
@compiletime function createGatherMeat()
    new AbilityDefinitionRaiseDead(LocalAbilityIds.gatherMeat)
        // The radius from which the order can be issued.
        ..presetAreaofEffect(lvl -> 800)
        // The ability is cast at melee range.
        ..presetCastRange(lvl -> 128)
        // The ability only ever summons a single dummy unit.
        ..setLevels(1)
        ..presetUnitTypeOne(lvl -> commaList(LocalUnitIds.dummyMeatGather))
        ..presetUnitsSummonedTypeOne(lvl -> 1)
        ..presetUnitsSummonedTypeTwo(lvl -> 0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

function onEnter(unit target)
    // Exit if the unit is not the dummy for gathering meat.
    if target.getTypeId() != LocalUnitIds.dummyMeatGather
        return

    // Remove the unit, as its purpose is already fulfilled upon being raised.
    target.remove()

function onCast(unit caster)
    // Increment the virtual counter for the unit.
    counts.put(caster, counts.get(caster) + 1)
    print("New Count for " + caster.getName() + ": " + counts.get(caster).toString())

init
    EventListener.onCast(LocalAbilityIds.gatherMeat) (unit caster) ->
        onCast(caster)

    onUnitIndex() ->
        onEnter(getIndexingUnit())
