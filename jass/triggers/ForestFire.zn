library ForestFire requires ID, PublicLibrary, IsTypeThing, Math, TimerUtils, GameConfig, Map {
	constant real MAX_DISTANCE_FROM_CENTER = 13000;
	constant real DISTANCE_INCREMENT = 100;
	constant real DISTANCE_BETWEEN_SMOKE = 2000;
	constant real FIRE_APPROACH_PERIOD = 3;
	constant real LIFE_DRAIN_PERIOD = 0.5;
	constant real LIFE_DRAIN_PERCENT_PER_SECOND = 0.05;
	constant string GUST_MODEL_PATH	= "Doodads\\Cinematic\\FirePillarMedium\\FirePillarMedium.mdl";

	public timer FOREST_FIRE_TIMER;
	real distanceFromCenter = MAX_DISTANCE_FROM_CENTER;

	function BurnTrees() {
		real theta = 0;
		rect place;
		weathereffect smoke;
		real x, y;

		distanceFromCenter -= DISTANCE_INCREMENT;

		if (distanceFromCenter < GameConfig.getInstance().getForestFireDistance()) {
			PauseTimer(GetExpiredTimer());
			ReleaseTimer(GetExpiredTimer());
			return;
		}

		EnumDestructablesInRect(GetWorldBounds(), Condition(function() -> boolean {
			destructable tree = GetFilterDestructable();
			real x, y, dist;

			if (GetDestructableTypeId(tree) != 'ZTtw') {
				tree = null;
				return false;
			}

			x = GetDestructableX(tree);
			y = GetDestructableY(tree);
			dist = EuclideanDistance(x, y);
			if (dist < distanceFromCenter || dist >= distanceFromCenter + DISTANCE_INCREMENT) {
				tree = null;
				return false;
			}

			tree = null;
			return true;
		}), function() {
			AddSpecialEffectLoc(GUST_MODEL_PATH, GetDestructableLoc(GetEnumDestructable()));
		});


		while (theta < 2 * bj_PI) {
			x = distanceFromCenter * Cos(theta);
			y = distanceFromCenter * Sin(theta);
		    place = Rect(x, y, x + 1, y + 1);
		    smoke = AddWeatherEffect(place, 'WOlw');
		    EnableWeatherEffect(smoke, true);
		    theta += Asin(DISTANCE_BETWEEN_SMOKE / distanceFromCenter);
		}

	    place = null;
	    smoke = null;
	}

	function BurnUnits() {
		group burning = CreateGroup();

	    GroupEnumUnitsInRect(burning, GetWorldBounds(), Condition(function() -> boolean {
			unit burned = GetFilterUnit();
			real x = GetUnitX(burned);
			real y = GetUnitY(burned);
			real dist = EuclideanDistance(x, y);
			boolean isUnitBoss = IsUnitBoss(burned);
			boolean isUnitInvulnerable = GetUnitAbilityLevel(burned, ABILITY_INVULNERABLE) > 0;
			burned = null;
	    	return (
	    		dist >= distanceFromCenter &&
	    		!isUnitBoss &&
	    		!isUnitInvulnerable
	    	);
	    }));

	    ForGroup(burning, function() {
	    	unit burned = GetEnumUnit();
	    	real life, maxLife, newLife;

	    	if (GetUnitTypeId(burned) == UNIT_MEAT) {
				CreateItem(ITEM_COOKED_MEAT, GetUnitX(burned), GetUnitY(burned));
				RemoveUnit(burned);
			} else {
		    	life = GetUnitState(burned, UNIT_STATE_LIFE);
		    	maxLife = GetUnitState(burned, UNIT_STATE_MAX_LIFE);
		    	newLife = life - RealMax(1, maxLife * LIFE_DRAIN_PERCENT_PER_SECOND * LIFE_DRAIN_PERIOD);
		    	SetUnitState(burned, UNIT_STATE_LIFE, newLife);
			}

			burned = null;
	    });

	    DestroyGroup(burning);

	    burning = null;
	}

	function BurnThings() {
		ReleaseTimer(GetExpiredTimer());

		TimerStart(NewTimer(), FIRE_APPROACH_PERIOD, true, function BurnTrees);
		TimerStart(NewTimer(), LIFE_DRAIN_PERIOD, true, function BurnUnits);
	}

	function StartBurnThingsCountdown() {
		real numSeconds = GameConfig.getInstance().getForestFireAfter() * 60.0;
	    FOREST_FIRE_TIMER = NewTimer();

	    TimerStart(FOREST_FIRE_TIMER, numSeconds, false, function BurnThings);
	}

	function onInit() {
		Map.onGameStart(function() {
			if (GameConfig.getInstance().isForestFireEnabled()) {
				StartBurnThingsCountdown();
			}
		});
	}
}
