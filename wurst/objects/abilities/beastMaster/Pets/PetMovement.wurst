package PetMovement


// Standard Library Imports:
import ClosureEvents
import Orders
import HashMap
import LastOrder
import LinkedList

// Local Imports:
import LocalObjectIDs
import Pets
import Classes


public enum CONTROL_MODE
    AUTO
    MANUAL

// Map of players to their chosen control scheme for pets.
public let PET_CONTROLS = new HashMap<player, CONTROL_MODE>()


// Pet will randomly choose a position in this radius from target position in automatic mode.
// This is done to prevent the pet and troll from stacking as well as an aesthetic choice.
let PET_MOVE_RANGE = 200.

// The orders that the pet is allowed to copy using auto movement.
let ALLOWED_ORDERS = asList(
    Orders.smart,
    Orders.move,
    Orders.attack,
    Orders.stop,
    Orders.holdposition
)

// Auto control pet movement.
function autoMovePet()
    // Exit if the player is using manual control mode.
    if PET_CONTROLS.get(EventData.getTriggerPlayer()) == MANUAL
        return

    // Store the moving unit.
    let u = EventData.getTriggerUnit()

    // Verify the moving unit has a pet and is a derivitive of Beast Master.
    if not u.getOwner().getPet() != null or not  getTrollBaseClass(u) == UNIT_BEAST_MASTER
        return

    // Store the pet of moving unit.
    let pet = u.getOwner().getPet()

    let prevOrder = u.getLastOrder()

    // Compute the type of the previous order.
    let orderType = prevOrder == null
        ? OrderType.IMMEDIATE
        : prevOrder.orderType

    // Exit if the pet is not allowed to copy the order.
    if not ALLOWED_ORDERS.has(prevOrder.orderId)
        return
    
    // Issue the previous order to the pet.
    switch orderType
        case POINT
            // Moves the pet to a random location in a small circle around target pos.
            vec2 targetPos = prevOrder.targetPosition + vec2(GetRandomReal(-PET_MOVE_RANGE, PET_MOVE_RANGE), GetRandomReal(-PET_MOVE_RANGE, PET_MOVE_RANGE))
            pet.issuePointOrderById(prevOrder.orderId, targetPos)
        case TARGET
            pet.issueTargetOrderById(prevOrder.orderId, prevOrder.target)
        case IMMEDIATE
            pet.issueImmediateOrderById(prevOrder.orderId)

init
    // Used for auto control of the pet.
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
        autoMovePet()
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
        autoMovePet()
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
        autoMovePet()
