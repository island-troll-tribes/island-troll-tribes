package Track

// Standard library imports:
import Assets
import BuffObjEditing
import ChannelAbilityPreset

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import ToolTipsUtils
import LocalAssets


let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let CAST_RANGE = 700.
let GREATER_TRACK_ARMOR_REDUCED = 5
let COOLDOWN = 50.
let DURATION = 10.
let TOOLTIP_NORM = "Track"
let TOOLTIP_EXTENDED = "Gives vision of the tracked unit and reduces armor by "+
    "{0}".color(COLOR_RED)

let COOLDOWN_DECREASE_VALUE = 5.
let DURATION_INCREASE_VALUE = 5.
let GREATER_TRACK_DURATION = DURATION + DURATION_INCREASE_VALUE * 3
let GREATER_TRACK_COOLDOWN = COOLDOWN - COOLDOWN_DECREASE_VALUE * 3
let TARGET_ALLOWED = "air,ground,enemies,neutral"

function createBuff()
    new BuffDefinition(BUFF_ID, BuffIds.faerieFire)
        ..setIcon(Icons.bTNSpy)
        ..setTargetAttachmentPoint0(1, "overhead")
        ..setArtTarget(1, Abilities.aneuCaster)
        ..setTooltipNormal(1, "Track")
        ..setTooltipNormalExtended(1, "This unit is being tracked.")

class Track extends AbilityDefinitionFaerieFire
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setLevels(3)
        this.setRequiredLevel(2)
        this.setLevelSkipRequirement(1)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.setTooltipLearn("Learn " + TOOLTIP_NORM)
        this.setTooltipLearnExtended(TOOLTIP_EXTENDED.format("1/2/3|r"))
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOLTIP_NORM, lvl))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED.format(lvl.toString())+
            makeToolTipDuration(
                                DURATION + lvl * DURATION_INCREASE_VALUE,
                                COOLDOWN - lvl * COOLDOWN_DECREASE_VALUE
                                )
                            )
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setButtonPositionTurnOffX(buttonPos.a)
        this.setButtonPositionTurnOffY(buttonPos.b)
        this.setIconNormal(LocalIcons.aTCTrack)
        this.setIconTurnOff(LocalIcons.aTCTrack)
        this.setIconResearch(LocalIcons.aTCTrack)
        this.setManaCost(1, 0)
        this.presetCooldown(lvl -> COOLDOWN - lvl * COOLDOWN_DECREASE_VALUE)
        this.presetDurationHero(lvl -> DURATION + lvl * DURATION_INCREASE_VALUE) // 15,20,25 seconds
        this.presetDurationNormal(lvl -> DURATION + lvl * DURATION_INCREASE_VALUE)
        this.presetBuffs(lvl -> toRawCode(BUFF_ID))
        this.setCheckDependencies(false)
        this.presetTargetsAllowed(lvl -> TARGET_ALLOWED)
        this.presetCastRange(lvl -> CAST_RANGE)
        this.setHeroAbility(true)
        this.presetDefenseReduction(lvl -> lvl)

public class GreaterTrack extends Track
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, hotkey, buttonPos)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, "Greater "+TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED
            .format(GREATER_TRACK_ARMOR_REDUCED.toString()) +
            makeToolTipDuration(
                                GREATER_TRACK_DURATION,
                                GREATER_TRACK_COOLDOWN)
            )
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setButtonPositionTurnOffX(buttonPos.a)
        this.setButtonPositionTurnOffY(buttonPos.b)
        this.presetCooldown(lvl -> GREATER_TRACK_COOLDOWN)
        this.presetDurationHero(lvl -> GREATER_TRACK_DURATION)
        this.presetDurationNormal(lvl -> GREATER_TRACK_DURATION)
        this.setHeroAbility(false)
        this.setLevels(1)
        this.presetDefenseReduction(lvl -> GREATER_TRACK_ARMOR_REDUCED)


@compiletime function createTrack()
    new Track(ABILITY_TRACK, "E", new Pair(1, 1))
    new GreaterTrack(ABILITY_TRACKER_TRACK, "E", new Pair(2, 0))
    createBuff()
