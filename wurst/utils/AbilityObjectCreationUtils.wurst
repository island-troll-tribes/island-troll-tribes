package AbilityObjectCreationUtils

// Standard library imports:
import AbilityObjEditing
import HashMap
import ObjectIdGenerator

// Local imports:
import ToolTipsUtils

/**
    Set the ability name, hotkey and then compute a tooltip basic
**/
public function AbilityDefinition.setNameEnhance(string hotkey, string name)
    this.setName(name)
    this.setHotkeyNormal(hotkey)
    if this.getLevels() > 1
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, name, lvl))
    else
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, name))

public function createHiddenSpellbookWithAbilities(string abilityList) returns int
    let id = ABIL_ID_GEN.next()
    new AbilityDefinitionSpellBook(id)
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(0)
    ..setButtonPositionResearchX(0)
    ..setButtonPositionResearchY(0)
    ..setIconNormal("")
    ..setIconResearch("")
    ..setIconTurnOff("")
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..setLevels(1)
    ..presetBaseOrderID(lvl -> "decouple")
    ..setHotkeyLearn("")
    ..setHotkeyNormal("")
    ..setName("Hidden Spellbook")
    ..setTooltipLearn("You are not supposed to be seeing this")
    ..setTooltipLearnExtended("You are not supposed to be seeing this")
    ..presetMaximumSpells(lvl -> 11)
    ..presetMinimumSpells(lvl -> 11)
    ..presetSpellList(lvl -> abilityList)
    ..presetCooldown(lvl -> 0)
    ..presetTooltipNormal(lvl -> "You are not supposed to be seeing this")
    ..presetTooltipNormalExtended(lvl -> "You are not supposed to be seeing this")
    ..presetSharedSpellCooldown(lvl -> false)
    return id

// Used to create a passive ability only used for its tooltip.
public function createDummyTooltipAbility(int abilId) returns AbilityDefinitionThornyShieldCreep
    return new AbilityDefinitionThornyShieldCreep(abilId)
        ..presetDefenseBonus(lvl -> 0)
        ..presetReceivedDamageFactor(lvl -> 1)
        ..presetReturnedDamageFactor(lvl -> 0)


public function AbilityDefinitionSpellBook.setAbilitiesPerLevel(HashMap<int, string> abilityList)
    this.presetSpellList(lvl -> abilityList.get(lvl))

public function createSpellBook(int spellBookId) returns AbilityDefinitionSpellBook
    return new AbilityDefinitionSpellBook(spellBookId)
        ..setItemAbility(false)
        ..setMaximumSpells(1, 11)
        ..setMinimumSpells(1, 11)
        ..setCooldown(1, 0)
        ..setSharedSpellCooldown(1, false)

public function createHeroSpellBook(int spellBookId, int levels) returns AbilityDefinitionSpellBook
    return new AbilityDefinitionSpellBook(spellBookId)
        ..setItemAbility(false)
        ..setLevels(levels)
        ..presetMaximumSpells(lvl -> 11)
        ..presetMinimumSpells(lvl -> 11)
        ..presetCooldown(lvl -> 0)
        ..setSharedSpellCooldown(1, false)
        ..presetBaseOrderID(lvl -> "unsummon")


public function createPlaceHolder() returns int
    let abilId = ABIL_ID_GEN.next()

    if compiletime
        new AbilityDefinitionAuraSlow(abilId)
            ..setName("PlaceHolder Ability")
            ..setTargetsAllowed(1, "bridge")
            ..setMovementSpeedFactor(1, 0)
            ..setCastRange(1, 0.01)
            ..setBuffs(1, "")
            ..setEditorSuffix("(Wurst)")
    return abilId
