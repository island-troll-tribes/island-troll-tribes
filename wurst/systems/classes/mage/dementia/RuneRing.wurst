package RuneRing
import RegisterEvents
import LinkedList
import Table

@configurable constant int NEL_ABILITY_ID = 'A06S'
@configurable constant int KA_ABILITY_ID = 'A079'
@configurable constant int LEZ_ABILITY_ID = 'A07A'
@configurable constant real INTERVAL = 0.05
@configurable constant real SPEED = 50
@configurable constant real DISTANCE = 300
@configurable constant int MAX_DUMMY_COUNT = 5

constant INTERVAL_SPEED = (INTERVAL * SPEED).fromDeg()

constant looper = CreateTimer()
constant ongoing = new LinkedList<RuneRing>()
constant instances = new Table()

public function unit.getRuneList() returns LinkedList<unit>
    LinkedList<unit> result = null
    var index = this.getHandleId()
    if instances.hasInt(index)
        result = (instances.loadInt(index) castTo RuneRing).runes
    return result

function int.getRuneType() returns int
    var result = UNIT_LOCUST_LEZ

    if this == NEL_ABILITY_ID
        result = UNIT_LOCUST_NEL
    else if this == KA_ABILITY_ID
        result = UNIT_LOCUST_KA
    return result

class RuneRing
    constant runes = new LinkedList<unit>()
    unit caster

    construct(unit caster)
        this.caster = caster
        ongoing.push(this)
        instances.saveInt(caster.getHandleId(), this castTo int)

    ondestroy
        runes.forEach(e -> e.kill())
        destroy runes
        ongoing.remove(this)
        if ongoing.isEmpty()
            looper.pause()
        instances.removeInt(caster.getHandleId())

    /** Appends new rune to the end of the ring. If full, dequeues head rune before insertion. */
    function summonRune(int runeType)
        var angle = angle(0)
        var count = runes.size()

        if count == MAX_DUMMY_COUNT
            var rune = runes.dequeue()
            angle = rune.getFacingAngle()
            rune.remove()
        else if count > 0
            var rune = runes.peek()
            angle = rune.getFacingAngle() - (360 / MAX_DUMMY_COUNT).fromDeg()
        var pos = caster.getPos().polarOffset(angle, DISTANCE)
        var u = createUnit(caster.getOwner(), runeType, pos, angle)
        runes.push(u)

function onCallback()
    var iter = ongoing.iterator()
    for ring from iter
        if not ring.caster.isAlive() or ring.runes.isEmpty()
            iter.remove()
            destroy ring
        else
            var pos = ring.caster.getPos()
            for rune in ring.runes
                var angle = rune.getFacingAngle() + INTERVAL_SPEED
                var rpos = pos.polarOffset(angle, DISTANCE)
                rune.setFacing(angle)
                rune.setXY(rpos)
    iter.close()

function onCast()
    var caster = GetSpellAbilityUnit()
    RuneRing ring
    if instances.hasInt(caster.getHandleId())
        ring = instances.loadInt(caster.getHandleId()) castTo RuneRing
    else
        if ongoing.isEmpty()
            looper.startPeriodic(INTERVAL, () -> onCallback())
        ring = new RuneRing(caster)
    ring.summonRune(GetSpellAbilityId().getRuneType())

init
    registerSpellEffectEvent(NEL_ABILITY_ID, () -> onCast())
    registerSpellEffectEvent(KA_ABILITY_ID, () -> onCast())
    registerSpellEffectEvent(LEZ_ABILITY_ID, () -> onCast())
