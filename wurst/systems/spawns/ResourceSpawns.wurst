package ResourceSpawns
import ID
import HashMap
import LinkedList
import GameTimer
import Game
import Interpolation
import ErrorHandling
import TerrainUtils
import SpawnRateAdjustment
import ClosureTimers

let itemSpawnInfoMap = new IterableMap<int, ItemSpawnInfo>()
let islandSpawnList = new LinkedList<IslandSpawner>()
var gameStartTime = 0.

class ItemSpawnInfo
    int itemId
    real initialSpawnWeight
    real finalSpawnWeight
    real weightChangeTime
    int spawnedCount = 0
    construct(int itemId, real initialSpawnWeight, real finalSpawnWeight, real weightChangeTime)
        this.itemId = itemId
        this.initialSpawnWeight = initialSpawnWeight
        this.finalSpawnWeight = finalSpawnWeight
        this.weightChangeTime = weightChangeTime
        itemSpawnInfoMap.put(itemId, this)

    function getTimeAdjustedSpawnWeight() returns real
        //Clamp ratio between 0 - 1 with min & max
        var ratio = min(0, max(1, (getElapsedGameTime() - gameStartTime) / this.weightChangeTime))
        let spawnWeightAdjusted = linear(initialSpawnWeight, finalSpawnWeight, ratio)
        return spawnWeightAdjusted

class WeightedSpawnRegion
    rect reg
    int weight
    construct(rect reg, int weight)
        this.reg = reg
        this.weight = weight

class IslandSpawner
    private let spawnRegionsList = new LinkedList<WeightedSpawnRegion>()
    private let spawnsPerType = new HashMap<int, int>()
    int itemsSpawnCount
    int animalsSpawnCount
    int spawnedTotal = 0
    itempool itemPool = null
    real totalRegionsWeight = 0

    construct(int itemsSpawnCount, int animalsSpawnCount, LinkedList<WeightedSpawnRegion> spawnRegionsList)
        this.itemsSpawnCount = itemsSpawnCount
        this.animalsSpawnCount = animalsSpawnCount
        this.spawnRegionsList = spawnRegionsList
        for r in this.spawnRegionsList
            totalRegionsWeight += r.weight
        islandSpawnList.push(this)

    function spawnItemFromPool()
        if this.itemPool == null
            error("ERROR: spawnItemFromPool tried to spawn without having a generated pool!")
            return

        rect spawnRect = pickWeightedSpawnRect()
        while true
            vec2 spawnPoint = spawnRect.randomPoint()
            if spawnPoint.isTerrainLand() and spawnPoint.isTerrainWalkable()
                let spawnedItem = PlaceRandomItem(itemPool, spawnPoint.x, spawnPoint.y)

                //Keep track of spawned total & spawned item type total to balance out spawning
                this.spawnedTotal += 1
                let spawnedType = spawnedItem.getTypeId()
                if not this.spawnsPerType.has(spawnedType)
                    this.spawnsPerType.put(spawnedType, 1)
                else
                    this.spawnsPerType.put(spawnedType, this.spawnsPerType.get(spawnedType) + 1)

                break

    function generateItemPool()
        /*
        This function generates an island-specific itempool with adjusted weights according to how much current state of spawned items
        differs from what the adjusted weights are.

        For example, if there is less flints than the amount of flints that the spawn ratios try to aim for, we increase flint spawns by up to 50% depending on how much behind the spawns are
        */
        if this.itemPool != null
            DestroyItemPool(this.itemPool)

        this.itemPool = CreateItemPool()
        var totalWeight = 0.
        for i in itemSpawnInfoMap
            totalWeight += itemSpawnInfoMap.get(i).getTimeAdjustedSpawnWeight()

        for itm in itemSpawnInfoMap
            let spawnInfo = itemSpawnInfoMap.get(itm)
            let itemWeight = spawnInfo.getTimeAdjustedSpawnWeight()
            let weightRatio = itemWeight / totalWeight
            var adjustmentRatio = 1.
            if this.spawnedTotal != 0
                let itemRatio = this.spawnsPerType.get(itm) / this.spawnedTotal
                let difference = (weightRatio-itemRatio).abs()
                if itemRatio < weightRatio
                    adjustmentRatio = linear(1, 1.5, max(1, (difference / 0.5)))
                else if itemRatio > weightRatio
                    adjustmentRatio = linear(1, 0.5, max(1, (difference / 0.5)))

            ItemPoolAddItemType(itemPool, spawnInfo.itemId, itemWeight * adjustmentRatio)

    function pickWeightedSpawnRect() returns rect
        real random = GetRandomReal(0, this.totalRegionsWeight)
        real randomPickTemporary = 0
        for r in this.spawnRegionsList
            randomPickTemporary += r.weight
            if random <= randomPickTemporary
                return r.reg

        //Should never end up here
        error("ERROR: pickWeightedSpawnRect returned null!")
        return null

    ondestroy
        for r in this.spawnRegionsList
            destroy r
        destroy this.spawnRegionsList
        destroy this.spawnsPerType

public function handleItemSpawning()
    for island in islandSpawnList
        island.generateItemPool()

    let spawnedCount = new HashMap<IslandSpawner, int>()

    //Use animation period * 2 since the old system was WAY slower than this
    doPeriodically(ANIMATION_PERIOD*2) spawnLoop ->
        //Spawn one item on each island until they all reached the max count
        bool loopDidSpawn = false
        for island in islandSpawnList
            //Abruptly stop loop if item limit reached
            if (udg_ITEM_LIMIT_MODE and udg_ITEM_CURRENT >= udg_ITEM_MAX)
                loopDidSpawn = false
                break

            //Spawn item if island-specific spawn count is not yet achieved
            if not spawnedCount.has(island) or (spawnedCount.get(island) < island.itemsSpawnCount * udg_ITEM_BASE)
                island.spawnItemFromPool()
                udg_ITEM_CURRENT += 1
                spawnedCount.put(island, spawnedCount.get(island) + 1)
                loopDidSpawn = true

        //Return when all islandSpawners iterated without any spawns (or abrupt stop condition reached)
        if not loopDidSpawn
            destroy spawnedCount
            destroy spawnLoop //Break

function initItemSpawnInfo()
    new ItemSpawnInfo(ITEM_TINDER, 5, .7, 860)
    new ItemSpawnInfo(ITEM_CLAY_BALL, 1, 1.85, 340)
    new ItemSpawnInfo(ITEM_STICK, 3, 4.5, 360)
    new ItemSpawnInfo(ITEM_FLINT, 3, 2, 300)
    new ItemSpawnInfo(ITEM_MANA_CRYSTAL, 0, 1.6, 384)
    new ItemSpawnInfo(ITEM_STONE, 1, 3.3, 552)
    new ItemSpawnInfo(ITEM_MUSHROOM, 0, 1.2, 360)
    new ItemSpawnInfo(ITEM_MAGIC, 0.25, 0.25, 1)

function initIslandSpawners()
    let NWSpawns = new LinkedList<WeightedSpawnRegion>()
    NWSpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_1_1, udg_ISLAND1_1))
    NWSpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_1_2, udg_ISLAND1_2))
    NWSpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_1_3, udg_ISLAND1_3))
    new IslandSpawner(udg_NORTH_LEFT_ITEM, udg_NORTH_LEFT_FOOD, NWSpawns)

    let NESpawns = new LinkedList<WeightedSpawnRegion>()
    NESpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_2_1, udg_ISLAND2_1))
    NESpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_2_2, udg_ISLAND2_2))
    NESpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_2_3, udg_ISLAND2_3))
    new IslandSpawner(udg_NORTH_RIGHT_ITEM, udg_NORTH_RIGHT_FOOD, NESpawns)

    let SESpawns = new LinkedList<WeightedSpawnRegion>()
    SESpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_3_1, udg_ISLAND3_1))
    SESpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_3_2, udg_ISLAND3_2))
    SESpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_3_3, udg_ISLAND3_3))
    new IslandSpawner(udg_SOUTH_RIGHT_ITEM, udg_SOUTH_RIGHT_FOOD, SESpawns)

    let SWSpawns = new LinkedList<WeightedSpawnRegion>()
    SWSpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_4_1, udg_ISLAND4_1))
    SWSpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_4_2, udg_ISLAND4_2))
    SWSpawns.add(new WeightedSpawnRegion(gg_rct_spawn_area_4_3, udg_ISLAND4_3))
    new IslandSpawner(udg_SOUTH_LEFT_ITEM, udg_SOUTH_LEFT_FOOD, SWSpawns)

function startSpawnCycle()
    doPeriodically(120) spawnerCallback ->
        handleItemSpawning()
        adjustBaseSpawnrates()

function adjustBaseSpawnrates()
    //Replacement for modStats function of the legacy system.
    //Dynamically adjust overall item & animal amounts (and specific item type amounts but that is handled by the itemSpawnInfo class now)
    udg_ITEM_BASE = max(.15,udg_ITEM_BASE-0.2)
    udg_FOOD_BASE = max(.15,udg_FOOD_BASE-0.2)

    // This part actually doesnt do anythin since udg_BADDIE_BASE is always 1.00 - Keeping it for now to be safe
    udg_PANTHER_RATE = R2I(1*udg_BADDIE_BASE)
    udg_BEAR_RATE = R2I(1*udg_BADDIE_BASE)
    udg_SNAKE_RATE = R2I(1*udg_BADDIE_BASE)
    udg_WOLF_RATE = R2I(2*udg_BADDIE_BASE)

init
    initIslandWeights()
    initSpawnRegionWeights()
    initItemSpawnInfo()
    initIslandSpawners()
    registerGameStartEvent() ->
        gameStartTime = getElapsedGameTime()

        //First spawns. Do twice to retain original amounts after  halving the items per spawn and doubling cycle frequency.
        handleItemSpawning()
        doAfter(10) ->
            handleItemSpawning()

        startSpawnCycle()
