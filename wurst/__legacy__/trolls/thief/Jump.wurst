package Jump
import ClosureEvents
import TerrainUtils
import JumpSystem
import Orders
import UnitExtensions

constant let JUMP_ID = 'A04G'
constant let RANGE_MAX = 600.
constant let TARGET_SEARCH_MINRANGE = 200.
constant let TARGET_SEARCH_INCREMENT = 25

init
    registerSpellEffectEvent(JUMP_ID, () -> onCast())
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        onStartCast()

function canJumpToTarget(vec2 targetPos) returns bool
    return targetPos.isTerrainWalkable()

function onCast()
    let caster = GetSpellAbilityUnit()
    let targetPos = vec2(GetSpellTargetX(), GetSpellTargetY())
    let casterPos = caster.getPos()
    var jumpPos = getJumpPos(casterPos, targetPos)
    performJump(caster, jumpPos)

function onStartCast()
    let caster = GetSpellAbilityUnit()
    let targetPos = vec2(GetSpellTargetX(), GetSpellTargetY())
    let casterPos = caster.getPos()
    var jumpPos = getJumpPos(casterPos, targetPos)

    //Stop casting if non-jumpable target or we are immobilized
    if not canJumpToTarget(jumpPos) or caster.isImmobilized()
        caster.issueImmediateOrderById(Orders.stop)
        //Set stand animation to prevent looping the cast-animation
        caster.setAnimation(0)
        
function getJumpPos(vec2 casterPos, vec2 targetPos) returns vec2
    var jumpPos = targetPos
    angle ang = casterPos.angleTo(jumpPos)

    //Limit range if ability used beyond jump range
    if (casterPos.distanceTo(jumpPos) >= RANGE_MAX)    
        var distance = RANGE_MAX
        jumpPos = casterPos.polarOffset(ang, distance)
        
        //Find furthest point towards cast point where we can jump
        while distance >= TARGET_SEARCH_MINRANGE and not canJumpToTarget(jumpPos)
            distance = distance - TARGET_SEARCH_INCREMENT
            jumpPos = casterPos.polarOffset(ang, distance)

    return jumpPos


    
