package Fawn
import ID
import BonyAnimal
import TimerUtils
import ClosuresForItems
import UnitUtils
import ClosureTimers
import DummyCasterFixed
import ElkCritter
import Orders
import UnitExtensions


public class Fawn extends BonyAnimal
    use TimedLoop

    private static let unitTypeId = UNIT_FAWN

    static function initialize()
        register(unitTypeId, fawn -> new Fawn(fawn))

    construct(unit whichUnit)
        super(whichUnit)

    construct(player whichPlayer, vec2 pos)
        super(whichPlayer, pos)

    override function postCreate()
        super.postCreate()
        nullTimer(-> startTimedLoop())

    override function getTypeId() returns int
        return unitTypeId

    override function onTimedLoop()
        let pos = getPos()
        let acorn = findNearestItem(pos, 300, i -> i.getTypeId() == ITEM_ACORN)
        if acorn == null
            return

        let acornPos = acorn.getPos()
        if acornPos.distanceTo(pos) > 50
            getUnit().issuePointOrderById(Orders.move, acornPos)
            return

        let troll = findNearestUnit(acornPos, 500, Filter(-> GetFilterUnit().isTroll()))
        if troll == null
            return

        let owner = troll.getOwner()

        new DummyCaster
            ..owner(owner)
            ..origin(acornPos.add(-100, 0))
            ..castImmediate(SPELL_ELK_CRITTER_ID, 1, Orders.mechanicalcritter)

        acorn.remove()
        stopTimedLoopAndDestroy()

    override function postDeath()
        stopTimedLoopAndDestroy()

init
    Fawn.initialize()
