package TeleGathering

// Standard library imports:
import Assets
import ClosureTimers
import ClosureEvents
import HashMap
import InstantDummyCaster
import LinkedList
import TerrainUtils

// Local imports:
import ClosuresForItems
import LocalObjectIDs
import NewTeleThief
import TeleGatherAbilityDefinition
import Thief
import UnitEntity
import UnitExtensions

let SORT_DISTANCE_INCREMENT = 110
let SORT_DISTANCE_BASE = 30
let SORT_ANGLE_INCREMENT = 45
let MAX_SORTING_SEARCH_LOOPS = 2
let TELEGATHER_DISABLE_DISTANCE_SQ = 700*700

HashMap<unit, TeleGatherInstance> instances = new HashMap<unit, TeleGatherInstance>()
HashMap<unit, SortingCache> cachedSortingPositions = new HashMap<unit, SortingCache>()

// TODO: Use a tagging system for this.
let HERBS = asList(
    ITEM_RIVER_ROOT,
    ITEM_RIVER_STEM,
    ITEM_ATHELAS_SEED,
    ITEM_BLUE_HERB,
    ITEM_ORANGE_HERB,
    ITEM_YELLOW_HERB,
    ITEM_PURPLE_HERB,
    ITEM_MUSHROOM
)

function IterableMap<int, SortingPosition>.deepCopy() returns IterableMap<int, SortingPosition>
    let map = new IterableMap<int, SortingPosition>
    for key in this
        map.put(key, this.get(key).copy())
    return map

class SortingCache
    IterableMap<int, SortingPosition> sortingPositions
    int nextSortAngle
    int sortDistanceOffset

    construct(IterableMap<int, SortingPosition> sortingPositions, int nextSortAngle, int sortDistanceOffset)
        this.sortingPositions = sortingPositions.deepCopy()
        this.nextSortAngle = nextSortAngle
        this.sortDistanceOffset = sortDistanceOffset

    ondestroy
        for k in this.sortingPositions
            destroy this.sortingPositions.get(k)
        destroy this.sortingPositions

class SortingPosition
    vec2 pos
    construct(vec2 pos)
        this.pos = pos

    function copy() returns SortingPosition
        return new SortingPosition(this.pos)

class TeleGatherInstance
    unit caster
    unit teleTarget
    real duration
    real lifetime = 0
    bool allowHerbs
    bool hasLimit
    int itemCount
    UnitEntity casterEntity
    CallbackPeriodic pollingLoop
    IterableMap<int, SortingPosition> sortingPositions
    int nextSortAngle = 0
    int sortDistanceOffset = SORT_DISTANCE_INCREMENT
    int teleAbilityToCast = DUMMY_TELE_GATHER_ID

    construct(unit caster, unit teleTarget, real duration, bool allowHerbs, bool hasLimit)
        let teleAbilityCastLevel = 1

        this.caster = caster
        this.casterEntity = UnitEntity.findForUnit(this.caster)
        this.allowHerbs = allowHerbs
        this.hasLimit = hasLimit

        // Just fixing correct spell value for the ability to cast on caster

        // if this.casterEntity instanceof Omnigatherer
        //     teleAbilityCastLevel = 4
        // else if this.casterEntity instanceof Gatherer
        //     teleAbilityCastLevel = caster.getAbilityLevel(ABILITY_TELE_GATHER)
        
        if hasLimit
            itemCount = GATHERER_ITEM_MAX

        if this.casterEntity instanceof Thief
            teleAbilityToCast = DUMMY_TELE_THIEF_ID
        InstantDummyCaster.castTarget(caster.getOwner(), teleAbilityToCast, teleAbilityCastLevel, "curse", caster, caster.getPos() + vec2(100,0))

        this.duration = duration
        this.teleTarget = teleTarget

        if cachedSortingPositions.has(this.teleTarget)
            let cache = cachedSortingPositions.get(this.teleTarget)
            this.sortingPositions = cache.sortingPositions.deepCopy()
            this.nextSortAngle = cache.nextSortAngle
            this.sortDistanceOffset = cache.sortDistanceOffset
        else
            this.nextSortAngle = 0
            this.sortDistanceOffset = SORT_DISTANCE_INCREMENT
            this.sortingPositions = new IterableMap<int, SortingPosition>()
        startBuffPolling()

    function startBuffPolling()
        this.pollingLoop = doPeriodically(1) cb ->
            this.lifetime += 1
            if this.lifetime >= this.duration
                or not (caster.hasAbility(BUFF_TELE_GATHER) or caster.hasAbility(BUFF_TELE_THIEF))
                or not teleTarget.hasAbility(BUFF_TELE_TARGET)
                destroy this

    function canGatherItem(int itemType) returns bool
        if itemType == ITEM_RAW_MEAT
            return false

        // Skip herbs if not herb-gatherer
        if not this.allowHerbs and HERBS.indexOf(itemType) != -1
            return false

        return true

    function handleTeleGather(item itm)
        let itemType = itm.getTypeId()

        if hasLimit and itemCount == 0
            destroy this
            return
        
        if hasLimit and (caster.isEnemyBuildingAround(1800) or caster.isEnemyTrollAround(1800))
            return

        if not caster.isEnemyBuildingAround(400) and this.casterEntity instanceof Thief
            return
        if not canGatherItem(itemType)
            or caster.getPos().distanceToSq(teleTarget.getPos()) <= TELEGATHER_DISABLE_DISTANCE_SQ //Disable gathering near target fire
            return

        let sortingPos = this.getSortingPos(itemType)
        flashEffect(Abilities.blinkCaster, itm.getPos())
        this.caster.removeItem(itm)
        itm.setPos(sortingPos.pos)
        flashEffect(Abilities.blinkTarget, itm.getPos())

        if hasLimit and not itemCount == 0
            itemCount--

    function getSortingPos(int itemType) returns SortingPosition

        //If a cached pos exists, return it
        if this.sortingPositions.has(itemType)
            return this.sortingPositions.get(itemType)

        //Otherwise find and create a new pos for item type
        let newPos = new SortingPosition(findPosForItem(itemType))
        sortingPositions.put(itemType, newPos)
        return newPos

    function findPosForItem(int itemType) returns vec2
        let defaultPos = teleTarget.getPos()

        //Look for similar nearby item, multiply range by 1.1 to account for items grouping and spilling over
        let nearest = findNearestItem(defaultPos, (SORT_DISTANCE_BASE + sortDistanceOffset * MAX_SORTING_SEARCH_LOOPS * 1.1), i -> i.getTypeId() == itemType)
        if nearest != null
            return nearest.getPos()

        //Look for a new position around the fire
        for distanceOffset = this.sortDistanceOffset to MAX_SORTING_SEARCH_LOOPS * SORT_DISTANCE_INCREMENT step SORT_DISTANCE_INCREMENT
            for angleOffset = this.nextSortAngle to 360-SORT_ANGLE_INCREMENT step SORT_ANGLE_INCREMENT
                this.sortDistanceOffset = distanceOffset
                this.nextSortAngle = angleOffset
                let maybeTargetPos = defaultPos.polarOffset(angleOffset.toReal().fromDeg(), SORT_DISTANCE_BASE + distanceOffset.toReal())

                if maybeTargetPos.isTerrainWalkable()
                    this.nextSortAngle += SORT_ANGLE_INCREMENT
                    return maybeTargetPos

            this.nextSortAngle = 0

        return defaultPos

    ondestroy
        if this.teleTarget.isAlive()
            if cachedSortingPositions.has(this.teleTarget)
                destroy cachedSortingPositions.getAndRemove(this.teleTarget)
            cachedSortingPositions.put(teleTarget, new SortingCache(this.sortingPositions, this.nextSortAngle, this.sortDistanceOffset))

        if this.caster.hasAbility(BUFF_TELE_GATHER)
            this.caster.removeAbility(BUFF_TELE_GATHER)
        if this.caster.hasAbility(BUFF_TELE_THIEF)
            this.caster.removeAbility(BUFF_TELE_THIEF)
        if this.teleTarget.hasAbility(BUFF_TELE_TARGET)
            this.teleTarget.removeAbility(BUFF_TELE_TARGET)

        destroy this.pollingLoop

        for key in this.sortingPositions
            this.sortingPositions.getAndRemove(key)
        destroy this.sortingPositions

        if instances.has(this.caster)
            if instances.get(this.caster) == this
                instances.remove(this.caster)

function onTeleGatherCast(bool allowHerbs, bool hasLimit)
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()
    var duration = 0.
    switch GetSpellAbilityId()
        case ABILITY_TELE_GATHER_OMNI
            duration = OMNI_DURATION
        case ABILITY_TELE_RADAR_GATHER
            duration = 30. + 20. * caster.getAbilityLevel(ABILITY_TELE_RADAR_GATHER)
        case ABILITY_TELE_HERB_GATHER
            duration = 30. + 20. * caster.getAbilityLevel(ABILITY_TELE_HERB_GATHER)
        case ABILITY_TELE_GATHERER
            duration = GATHERER_DURATION
        case ABILITY_TELE_THIEF
            duration = TELE_THIEF_DURATION
        case ABILITY_AS_TELE_THIEF
            duration = TELE_THIEF_DURATION

    if instances.has(caster)
        destroy instances.getAndRemove(caster)

    instances.put(caster, new TeleGatherInstance(caster, target, duration, allowHerbs, hasLimit))

init
    registerSpellEffectEvent(ABILITY_TELE_GATHERER) ->
        onTeleGatherCast(true, true)

    registerSpellEffectEvent(ABILITY_TELE_RADAR_GATHER) ->
        onTeleGatherCast(false, false)

    registerSpellEffectEvent(ABILITY_TELE_HERB_GATHER) ->
        onTeleGatherCast(true, false)

    registerSpellEffectEvent(ABILITY_TELE_GATHER_OMNI) ->
        onTeleGatherCast(true, false)

    registerSpellEffectEvent(ABILITY_TELE_THIEF) ->
        onTeleGatherCast(true, false)

    registerSpellEffectEvent(ABILITY_AS_TELE_THIEF) ->
        onTeleGatherCast(true, false)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        let dying = GetTriggerUnit()
        if dying.isType(UNIT_TYPE_STRUCTURE) and cachedSortingPositions.has(dying)
            destroy cachedSortingPositions.getAndRemove(dying)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if instances.has(GetManipulatingUnit())
            instances.get(GetManipulatingUnit()).handleTeleGather(GetManipulatedItem())
