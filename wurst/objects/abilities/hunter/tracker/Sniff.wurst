package Sniff

// Standard library imports:
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import InstantDummyCaster
import HashMap
import OrderIds
import SimError

// Third-party imports:
import Lodash

// Local imports:
import ForceExtensions
import LocalObjectIDs
import ToolTipsUtils
import PlayerExtensions
import Track

let ICON = "ReplaceableTextures\\CommandButtons\\BTNPoisonousSmell.blp"

let CAST_RANGE = 0
let COOLDOWN = 3.
let MANACOST = 0
let TRAIL_DURATION = 300.
let TRACK_DURATION = 15.
let MATCH_DURATION = 5.
let AOE = 40.
let TOOLTIP_NORM = "Sniff"
let TOOLTIP_EXTENDED = (
    "Using his supreme sense of smell, the tracker can locate his quarry by "  +
    "sniffing an item the target has handled in the last {0} seconds, "        +
    "including the remains of an animal killed by them."
).format(
    TRAIL_DURATION.toToolTipLightBlue()
)


class Sniff extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.presetManaCost(lvl -> MANACOST)
        this.presetCooldown(lvl -> COOLDOWN)
        this.setHeroAbility(false)
        this.setItemAbility(false)
        this.presetTargetTypes(Targettype.UNIT)
        this.presetTargetsAllowed(lvl -> TargetsAllowed.item_t)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setIconNormal(ICON)
        this.setIconResearch(ICON)
        this.setIconTurnOff(ICON)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setFollowThroughTime(1, 1)
        this.setAreaofEffect(1, AOE)
        this.setAnimationNames("spell")
        this.setArtDuration(1, 0.98)
        this.setArtEffect("")
        this.setArtTarget("")
        this.setArtCaster("")
        this.setTargetAttachmentPoint("")
        this.setCasterAttachmentPoint1("")
        this.setCasterAttachmentPoint("")
        this.setCasterAttachments(0)

@compiletime function createSniff()
    new Sniff(ABILITY_SNIFF, "W", new Pair(1, 0))

// The ability used to track the quarry.
class SniffTrack extends GreaterTrack
    construct(int newAbilityId)
        super(newAbilityId, "", new Pair(0, 0))
        this.presetDefenseReduction(lvl -> 0)
        this.presetDurationHero(lvl -> TRACK_DURATION)
        this.presetDurationNormal(lvl -> TRACK_DURATION)


@compiletime function createTrack()
    new SniffTrack(ABILITY_SNIFF_TRACK)


// A mapping from item to the most recent manipulating unit and the current count.
let items = new HashMap<item, Pair<unit, int>>()

function onCast(unit caster, item target)
    // Look up the most recent manipulating unit.
    let state = items.get(target)

    // Exit if the item was not manipulated recent.
    if state == null
        simError(caster.getOwner(), "Could not pick up a scent.")
        return

    // Exit if the manipulator is dead and cannot be pinged.
    if not state.a.isAlive()
        simError(caster.getOwner(), "The quarry is no longer alive.")
        return
    // Ping the manipulator.
    caster.getOwner().getAllies().pingUnitsForForce(
        state.a.getPos(),
        MATCH_DURATION,
        bj_MINIMAPPINGSTYLE_SIMPLE,
        state.a.isAllyOf(caster.getOwner())
            ? "green".toColor()
            : "red"  .toColor()
    )

    // Track an enemy.
    if state.a.isEnemyOf(caster.getOwner())
        // Grant temporary vision for the dummy caster.
        let vision = createVision(
            caster.getOwner(),
            state.a.getPos(),
            300,
            true
        )

        // Track the quarry.
        InstantDummyCaster.castTarget(
            caster.getOwner(),
            ABILITY_SNIFF_TRACK,
            1,
            OrderIds.faeriefire,
            state.a
        )

        // Remove the vision.
        vision.destr()


public function onMove(unit caster, item target)
    // Ignore irrelevant manipulators, such as bushes.
    if caster.getOwner() == Player(PLAYER_NEUTRAL_PASSIVE)
        return

    // Look up the previous state for the item.
    var prev = items.getAndRemove(target)

    // Supply a new state, as necessary.
    if prev == null
        items.put(target, new Pair(caster, 1))
    // Otherwise update and replace the existing state.
    else
        items.put(target, new Pair(caster, prev.b + 1))
        destroy prev

    // Remove the value later.
    doAfter(TRAIL_DURATION) ->
        // Look up the new state for the item.
        let curr = items.getAndRemove(target)

        // Decrement the reference counter if references remain.
        if curr.b > 1
            items.put(target, new Pair(curr.a, curr.b - 1))

        // Destroy the previous state.
        destroy curr


init
    EventListener.onCast(ABILITY_SNIFF) (unit caster) ->
        onCast(caster, EventData.getSpellTargetItem())

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        onMove(EventData.getManipulatingUnit(), EventData.getManipulatedItem())

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        onMove(EventData.getManipulatingUnit(), EventData.getManipulatedItem())
