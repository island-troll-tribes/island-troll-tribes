
library TradeShipRoute requires TradeShipStop, IDUtils {

  constant real    TRADE_SHIP_PAUSE_TIME_DEST = 15.0;
  constant real    TRADE_SHIP_PAUSE_TIME_SELL = 7.5;

  public struct TradeShipRoute {
    private static trigger whenEnterRegion;
    private static trigger whenSellItem;
    private static Table   routes;

    private unit          tradeShip;
    private region        stopsAtRegions;
    private TradeShipStop nextStop;
    private TradeShipStop firstStop;

    private static method onInit() {
      whenEnterRegion = CreateTrigger();
      TriggerAddAction( whenEnterRegion, static method TradeShipRoute.relayEnterRegionToRoute );
      whenSellItem = CreateTrigger();
      TriggerRegisterPlayerUnitEvent( whenSellItem, Player( 15 ), EVENT_PLAYER_UNIT_SELL_ITEM, null );
      TriggerAddAction( whenSellItem, static method TradeShipRoute.relaySellItemToRoute );
      routes = Table.create();
    }

    static method existsForUnit( unit u ) -> boolean {
      return routes.has_h( u );
    }

    static method findByShip( unit u ) -> thistype {
      return thistype( routes.integer_h[u] );
    }
    
    static method create() -> thistype {
      thistype self = thistype.allocate();
      self.tradeShip = null;
      self.firstStop = -1;
      self.stopsAtRegions = CreateRegion();
      TriggerRegisterEnterRegion( whenEnterRegion, self.stopsAtRegions, null );
      return self;
    }

    private method onDestroy() {
      stopsAtRegions = null;
    }

    method createFirstStop( rect r ) -> TradeShipStop {
      firstStop = TradeShipStop.create( this, r );
      return firstStop;
    }

    method addRect( rect r ) -> thistype {
      RegionAddRect( stopsAtRegions, r );
      return this;
    }

    method getShip() -> unit {
      return tradeShip;
    }

    method createNextShip() -> thistype {
      tradeShip = CreateUnit( Player( 15 ), TradeShipIds.getRandom(), firstStop.x, firstStop.y, 0 );
      routes.integer_h[tradeShip] = this;
      nextStop = firstStop.next;
      return this;
    }

    method removeShip() -> thistype {
      routes.remove_h( tradeShip );
      RemoveUnit( tradeShip );
      return this;
    }

    method moveToNextStop() -> thistype {
      IssuePointOrder( tradeShip, "move", nextStop.x, nextStop.y );
      return this;
    }

    method pause( real duration ) -> thistype {
      IssueImmediateOrder( tradeShip, "holdposition" );
      TimerStart( NewTimerEx( this ), duration, false, function() {
        TradeShipRoute( GetTimerData( GetExpiredTimer() ) ).moveToNextStop();
        ReleaseTimer( GetExpiredTimer() );
      });
      return this;
    }

    private method processEnterRegion() {
      if ( nextStop.containsShip() ) {
        if ( nextStop.isEndOfRoute() ) {
          removeShip().createNextShip().moveToNextStop();
        } else {
          nextStop = nextStop.next;
          pause( TRADE_SHIP_PAUSE_TIME_DEST );
        }
      }
    }

    static method relaySellItemToRoute() {
      if ( existsForUnit( GetTriggerUnit() ) )
        TradeShipRoute.findByShip( GetTriggerUnit() ).pause( TRADE_SHIP_PAUSE_TIME_SELL );
    }

    static method relayEnterRegionToRoute() {
      if ( existsForUnit( GetTriggerUnit() ) )
        TradeShipRoute.findByShip( GetTriggerUnit() ).processEnterRegion();
    }

  }
}

