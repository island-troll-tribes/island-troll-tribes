package ClassSelector
import Tribe
import LinkedList
import UnitExtensions
import PlayerExtensions
import UnitPoolExtensions
import GameConfig
import ClosureTimers
import TimerExtensions
import TimerDialog
import TimerUtils
import RegisterEvents
import GameMode
import Lodash
import PublicLibrary

let UNIT_TROLL_TOTEM = 'o00H'

let spawnList = asList(
    gg_rct_revive_1,
    gg_rct_revive_2,
    gg_rct_revive_3,
    gg_rct_revive_4,
    gg_rct_revive_5,
    gg_rct_revive_6,
    gg_rct_revive_7,
    gg_rct_revive_8,
    gg_rct_revive_9,
    gg_rct_revive_10,
    gg_rct_revive_11,
    gg_rct_revive_12
)

let listeners = CreateTrigger()

public function registerClassSelectionEndEvent(code listener)
    listeners.addAction(listener)

public class ClassSelector
    static let spawns = new IterableMap<unit, thistype>()

    static function findByTotem(unit totem) returns thistype
        return spawns.get(totem)

    static function resetAllianceState()
        for i = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
            for j = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
                if i != j
                    SetPlayerAllianceStateBJ(players[i], players[j], bj_ALLIANCE_UNALLIED)

    static function initializeTribes()
        let numTribes = gameConfig.getNumTribes()
        for tribeId = 0 to numTribes - 1
            new Tribe(tribeId)

    static function initializeSpawns()
        let randomSpawns = gameConfig.getRandomSpawns()
        let numUndefeatedTribes = Tribe
            .getTribes()
            .filter(Tribe.isNotDefeated)
            .length()
        let numTribes = max(numUndefeatedTribes, randomSpawns)

        let spawns = spawnList.take(numTribes)
        if randomSpawns > 0
            spawns.shuffle()

        Tribe.getTribes().map() tribe ->
            let spawn = spawns.get(tribe.getId())
            tribe.setSpawn(spawn)
            return new ClassSelector(tribe)

    static function startClassSelection()
        resetAllianceState()
        initializeTribes()
        initializeSpawns()

        var selectionTime = 0

        if not gameConfig.isAllTrollEnabled()
            selectionTime = gameConfig.getSelectionTimeAllowed()
            print(GENERAL_COLOR + "Choose a troll class|r")
            print(GENERAL_COLOR + "You will be appointed a random troll if you do not pick|r")

        let clock = getTimer()

        let clockDialog = clock.createTimerDialog()
        ..setTitle("Select Class")
        ..display(true)

        clock.doAfter(selectionTime.toReal()) ->
            values(spawns).each(spawner -> spawner.endSelection())
            gg_trg_boards.execute()
            listeners.execute()
            clockDialog.destr()

    static function initialize()
        registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL) ->
            findByTotem(GetSellingUnit()).handleUnitSold()

        GameMode.onModeSelectionFinish() ->
            startClassSelection()

    Tribe tribe
    let pickers = new LinkedList<unit>()
    rect spawn
    unitpool pool
    unit totem

    construct(Tribe _tribe)
        tribe = _tribe

        if not tribe.isDefeated()
            spawn = tribe.getSpawn()

            initializeTotem()
            initializePool()
            initializePickers()

            spawns.put(totem, this)

    private function initializeTotem()
        let pos = spawn.getCenter()
        let owner = tribe.getMembers().getFirst()
        totem = createUnit(owner, UNIT_TROLL_TOTEM, pos, angle(0))
        ..addUnitToStock(UNIT_HUNTER, 0, 1)
        ..addUnitToStock(UNIT_BEAST_MASTER, 0, 1)
        ..addUnitToStock(UNIT_MAGE, 0, 1)
        ..addUnitToStock(UNIT_PRIEST, 0, 1)
        ..addUnitToStock(UNIT_THIEF, 0, 1)
        ..addUnitToStock(UNIT_SCOUT, 0, 1)
        ..addUnitToStock(UNIT_GATHERER, 0, 1)
        ..addUnitToStock(UNIT_REPICK_TROLL, 4, 4)

    private function initializePool()
        pool = CreateUnitPool()
        let allTrollUnitId = gameConfig.getAllTrollUnitId()
        if gameConfig.isAllTrollEnabled() and allTrollUnitId != 0
            pool.addUnitType(allTrollUnitId, 1)
        else
            pool
            ..addUnitType(UNIT_HUNTER, 1)
            ..addUnitType(UNIT_MAGE, 1)
            ..addUnitType(UNIT_BEAST_MASTER, 1)
            ..addUnitType(UNIT_PRIEST, 1)
            ..addUnitType(UNIT_THIEF, 1)
            ..addUnitType(UNIT_SCOUT, 1)
            ..addUnitType(UNIT_GATHERER, 1)

    private function initializePickers()
        let pos = spawn.getCenter()
        tribe.getMembers().each() member ->
            pickers.push(createUnit(member, UNIT_HERO_PICKER, pos.polarOffset(angle(PI), 1200), angle(0)))
            member.setLumber(3)
            member.panCamToTimed(totem, 0)
            doAfter(0.3) ->
                member.selectSingle(totem)

    function endSelection()
        if gameConfig.isStartWithOneFire()
            let owner = tribe.getMembers().getFirst()
            createUnit(owner, UNIT_FIRE, spawn.getCenter(), angle(0))

        tribe.getMembers().each() member ->
            var troll = member.getTroll()
            if troll == null
                troll = getRandomTroll(member)
                member.setLumber(0)
                handleSelection(troll)

            troll
            ..suspendXp(false)
            ..unpause()

        totem.remove()

        pickers.each(picker -> picker.remove())
        destroy pickers

    function getRandomTroll(player p) returns unit
        return pool.placeRandomUnit(p, spawn.randomPoint(), angle(0))

    function setClassUnavailable(int which)
        if not gameConfig.isOldRandomEnabled() and gameConfig.getAllTrollUnitId() == 0
            pool.removeUnitType(which)

    function setClassAvailable(int which)
        pool.addUnitType(which, 1)

    function handleUnitSold()
        if GetSellingUnit().getTypeId() == UNIT_TROLL_TOTEM
            let sold = GetSoldUnit()
            if sold.getTypeId() == UNIT_REPICK_TROLL
                handleRepick()
            else
                handleSelection(sold)

    function handleSelection(unit troll)
        let owner = troll.getOwner()
        let trollId = troll.getTypeId()

        setClassUnavailable(trollId)
        totem.removeUnitFromStock(trollId)
        udg_trolls.addUnit(troll)
        udg_PUnits[owner.getId()] = troll

        setUpSkillTriggers(troll)
        troll
        ..modifySkillPoints(-1)
        ..suspendXp(true)
        ..pause()
        ..setHeat(gameConfig.getMaxHeat())

        if gameConfig.isStartWithFire()
            troll.addItemById(ITEM_FIRE_KIT)
        if gameConfig.isStartWithSpiritWard()
            troll.addItemById(ITEM_SPIRIT_WARD_KIT)

    function handleRepick()
        let sold = GetSoldUnit()
        let owner = sold.getOwner()
        let troll = owner.getTroll()
        let trollId = troll.getTypeId()

        setClassAvailable(trollId)
        totem.addUnitToStock(trollId, 0, 1)
        udg_trolls.removeUnit(troll)
        udg_PUnits[owner.getId()] = null

        troll.remove()
        sold.remove()

        owner
        ..setGold(0)
        ..setLumber(3)

init
    ClassSelector.initialize()
