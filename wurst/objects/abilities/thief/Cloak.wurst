package Cloak

// Standard library imports:
import Assets
import BuffObjEditing
import ChannelAbilityPreset

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import ToolTipsUtils

let BUFF_ID = compiletime(BUFF_ID_GEN.next())
let CAST_RANGE = 0
let COOLDOWN = 65.
let MANACOST = 0
let MANACOST_SS = 20
let DURATION = 8.

let MS_BONUS = 0.2
let MS_BONUS_SS = 0.5

let TOOLTIP_NORM = "Cloak"
let TOOLTIP_EXTENDED = "The thief goes invisible and move {0} faster. Cloak can be used to reveal cliff."
                        .format(MS_BONUS.toToolTipOrange())

let TOOLTIP_NORM_SS = "Assassinate"
let TOOLTIP_EXTENDED_SS = "The Assassin becomes invisible, he can backstab for {0} bonus damage when reappearing."


let ICON = "ReplaceableTextures\\CommandButtons\\BTNDarkTrollTrapperCloak.blp"

function createBuff()
    new BuffDefinition(BUFF_ID, BuffIds.windWalk)
        ..setIcon(ICON)
        ..setArtSpecial(1,"")
        ..setTooltipNormal(1, TOOLTIP_NORM)
        ..setTooltipNormalExtended(1, "This unit is cloaked")

class Cloak extends AbilityDefinitionBladeMasterWindWalk
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId)
        this.setLevels(3)
        this.setRequiredLevel(1)
        this.setLevelSkipRequirement(1)
        this.setCheckDependencies(false)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOLTIP_NORM, lvl))
        this.setTooltipLearn(makeToolTipLearn(TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED+makeToolTipDuration(DURATION - (6 - lvl * 2), COOLDOWN))
        this.setTooltipLearnExtended("The thief goes invisible and move faster, last longer each level.")
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(ICON)
        this.setIconResearch(ICON)
        this.presetManaCost(lvl -> MANACOST)
        this.presetCooldown(lvl -> COOLDOWN)
        this.presetDurationHero(lvl -> DURATION - (6 - lvl * 2))
        this.presetDurationNormal(lvl -> DURATION - (6 - lvl * 2))
        this.presetBuffs(lvl -> toRawCode(BUFF_ID))
        this.setAreaEffect(Abilities.blinkTarget)
        this.setArtSpecial(Abilities.blinkCaster)
        this.setEffectSound("")
        this.presetBackstabDamage(lvl -> false)
        this.presetBackstabDamage1(lvl -> 0)
        this.presetTransitionTime(lvl -> 0.7 - (lvl * 0.1))
        this.presetMovementSpeedIncrease(lvl -> MS_BONUS)

class SubCloak extends Cloak
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, hotkey, buttonPos)
        this.setLevels(1)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED+makeToolTipDuration(DURATION, COOLDOWN))
        this.setDurationHero(1, DURATION)
        this.setDurationNormal(1, DURATION)

class Assassinate extends Cloak
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, hotkey, buttonPos)
        this.setLevels(4)
        this.presetMovementSpeedIncrease(lvl -> MS_BONUS_SS)
        this.presetTransitionTime(lvl -> 0.1)
        this.presetBackstabDamage(lvl -> true)
        this.presetBackstabDamage1(lvl -> (lvl * 20.))
        this.presetManaCost(lvl -> MANACOST_SS)
        this.setLevelSkipRequirement(1)
        this.setRequiredLevel(1)
        this.setIconNormal(Icons.bTNSacrifice)
        this.setIconResearch(Icons.bTNSacrifice)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOLTIP_NORM_SS, lvl))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED_SS.format((lvl * 20.).toToolTipRed()) + makeToolTipDuration(DURATION, COOLDOWN))
        this.setTooltipLearn(makeToolTipLearn(TOOLTIP_NORM_SS))
        this.setTooltipLearnExtended(TOOLTIP_EXTENDED_SS.format(COLOR_RED.toColorString()+"20/40/60/80|r"))
        this.presetCooldown(lvl -> COOLDOWN)
        this.presetDurationHero(lvl -> DURATION)
        this.presetDurationNormal(lvl -> DURATION)



@compiletime function createCloaks()
    new Cloak(ABILITY_CLOAK, "E", new Pair(1, 1))
    new SubCloak(ABILITY_SUB_CLOAK, "E", new Pair(2, 1))
    new Assassinate(ABILITY_ASSASSINATE, "E", new Pair(1, 1))
    createBuff()
