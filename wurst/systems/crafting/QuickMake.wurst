package QuickMake

// Standard library imports:
import ClosureEvents
import LinkedList

// Third-party imports:
import Lodash

// Local imports:
import ClosuresForItems
import HashMap
import Mixing
import Tanning
import Transmute

public class QuickMake
    // The requirements in slot order, each of which is a list of allowed type IDs.
    let itemLists = new OwnedLinkedList<LinkedList<int>>()

    // The maximum number of matches for special herbs considered per type.
    int herbThreshold = 0

    // The ID for the corresponding quickmake ability.
    int spellAbilityId = 0

    construct(int spellAbilityId)
        this.spellAbilityId = spellAbilityId
        EventListener.onCast(spellAbilityId, caster -> onCast(caster))

    construct(int spellAbilityId, int herbThreshold)
        this.spellAbilityId = spellAbilityId
        this.herbThreshold = herbThreshold
        EventListener.onCast(spellAbilityId, caster -> onCast(caster))

    function onCast(unit caster)
        // The position around which matches are searched for.
        let pos = caster.getPos()

        // The items to be used as ingredients in the recipe.
        let items = new OwnedLinkedList<item>()

        // The items that the caster will have after transmuting occurs.
        let inventory = caster.getInventory()

        // The number of matches per type of special herb.
        let specialHerb = new HashMap<int, int>()
            ..put(ITEM_BLUE_HERB, 0)
            ..put(ITEM_YELLOW_HERB, 0)
            ..put(ITEM_PURPLE_HERB, 0)
            ..put(ITEM_ORANGE_HERB, 0)

        // The range used for the search radius.
        real range

        // Compute the range via casework.
        if caster.isTroll()
            range = 100
        else if caster.getTypeId() == UNIT_CRAFT_MASTER
            range = 300
        else
            range = 700

        // Drop each item to simplify the search for matches.
        caster.dropItems()

        // Fill in the recipe slots in order.
        for itemIds in itemLists
            // The handle for the match used to satisfy the current slot.
            item found = null

            // Consider each potential match.
            for itemId in itemIds
                // Search for the potential match.
                found = findNearestItem(pos, range, i -> i.getTypeId() == itemId)

                // Handle the combinatoric nature of requirements for special herbs.
                if specialHerb.has(found.getTypeId())
                    // Record the new total matches for this type of herb.
                    specialHerb.put(found.getTypeId(), specialHerb.get(found.getTypeId()) + 1)

                    // Invalidate the match if the threshold for herbs of this type is exceeded.
                    if specialHerb.get(found.getTypeId()) > herbThreshold
                        found = null

                    // Lower the threshold for additional herbs for Essence of Bees, which blocks a 2 / 2 match.
                    // TODO: Enumerate simple recipes instead of requiring casework during the trigger.
                    if spellAbilityId == ABILITY_QM_ESSENCE_BEES and specialHerb.get(found.getTypeId()) == herbThreshold
                        herbThreshold = 1

                // Mark any match as included in the ingredients.
                if found != null
                    // Remove the item visibility, blocking it from further matches.
                    items.add(found..setVisible(false))

                    // Discount other potential matches.
                    break
            if found == null
                break

        // Restore the visibility of the items used for matches.
        for elem in items
            elem.setVisible(true)

        // Add the matches to the inventory in case of success.
        // This will fire a separate trigger for the actual transmutation.
        if items.size() == itemLists.size()
            for elem in items
                // Remove each match from the inventory tracker, as matches will be consumed.
                inventory.remove(elem)
                caster.addItemHandle(elem)

        // Handle special cases of transmutation separately.
        if caster.getName() == "Mixing Pot"
            mix(caster)
        else if caster.getName() == "Tannery" or caster.getName() == "Ominous Altar"
            tan(caster, spellAbilityId)

        // Disable transmutation while the original inventory is restored.
        gg_trg_transmute.disable()

        // Add back all items not used as an ingredient.
        for elem in inventory
            caster.addItemHandle(elem)
        caster.moveInventoryDown()

        // Allow transmuations once the inventory is restored.
        gg_trg_transmute.enable()

        // Reset the threshold modification used for Essence of Bees.
        // TODO: Remove this once the above logic is simplified.
        if spellAbilityId == ABILITY_QM_ESSENCE_BEES
            herbThreshold = 2

        // Clean up the local stack.
        destroy items
        destroy inventory
        destroy specialHerb

    function add(int itemId)
        add(asList(itemId))

    function add(LinkedList<int> itemIds)
        itemLists.add(itemIds)
