package UnitExtensions
import StackNSplit
import LinkedList
import Lodash
import GameConfig
import PublicLibrary
import Brambles

public let BUFF_ENSNARE_GROUND = 'Beng'
public let BUFF_ENSNARE_AIR = 'Bena'
public let BUFF_ENTANGLE = 'BEer'

public function unit.getHeroSkillPoints() returns integer
    return GetHeroSkillPoints(this)

public function unit.modifySkillPoints(integer value)
    UnitModifySkillPoints(this, value)

public function unit.freeSlots() returns int
    int result = 0
    for slot = 0 to this.inventorySize() - 1
        if this.itemInSlot(slot) == null
            result++
    return result

public function unit.itemCount(int itemTypeId) returns int
    var count = 0
    for i = 0 to 5
        if this.itemInSlot(i).getTypeId() == itemTypeId
            count++
    return count

public function unit.getInventoryItemCountMap() returns HashMap<int, int>
    let map = new HashMap<int, int>()
    for i = 0 to 5
        let id = this.itemInSlot(i).getTypeId()
        if map.has(id)
            map.put(id, map.get(id) + 1)
        else
            map.put(id, 1)
    return map

public function unit.getInventory() returns LinkedList<item>
    let list = new LinkedList<item>
    let size = this.inventorySize()
    for i = 0 to size - 1
        list.add(this.itemInSlot(i))
    return list

public function unit.addXp(int toAdd)
    AddHeroXP(this, toAdd, true)

public function unit.setXp(int newXpVal)
    this.setXp(newXpVal, true)

public function unit.addUnitToStock(int id, int currentStock, int stockMax)
    AddUnitToStock(this, id, currentStock, stockMax)

public function unit.removeUnitFromStock(int id)
    RemoveUnitFromStock(this, id)

public function unit.addItemToStock(int id, int currentStock, int maxStock)
    AddItemToStock(this, id, currentStock, maxStock)

public function unit.removeItemFromStock(int id)
    RemoveItemFromStock(this, id)

public function unit.shareVision(player whichPlayer, bool share)
    UnitShareVision(this, whichPlayer, share)

public function unit.shareVision(player whichPlayer)
    this.shareVision(whichPlayer, true)

public function unit.removeBuffs(bool removePositive, bool removeNegative)
    UnitRemoveBuffs(this, removePositive, removeNegative)

public function unit.isTroll() returns boolean
    return IsUnitTroll(this)

public function unit.getHeat() returns int
    return this.getOwner().getGold()

public function unit.setHeat(int heat)
    this.getOwner().setGold(heat)

public function unit.addHeat(int heat)
    let owner = this.getOwner()
    owner.setGold(min(owner.getGold() + heat, gameConfig.getMaxHeat()))

public function unit.subHeat(int heat)
    let owner = this.getOwner()
    owner.setGold(max(owner.getGold() - heat, 0))


public function unit.getItemMatching(Predicate<item> predicate) returns item
    let inventorySize = this.inventorySize()
    for i = 0 to inventorySize
        let itm = this.itemInSlot(i)
        if predicate.call(itm)
            return itm
    return null

public function unit.moveInventoryDown()
    int array freeSlots
    var bottom = 0
    var top = 0
    for slot = this.inventorySize() - 1 downto 0
        let itm = this.itemInSlot(slot)
        if itm == null
            freeSlots[top] = slot
            top += 1
        else if top != bottom
            this.dropItemSlot(itm, freeSlots[bottom])
            bottom += 1

public function unit.dropItems(int count)
    for slot = 0 to count - 1
        this.removeItemFromSlot(slot)

public function unit.dropItems()
    this.dropItems(this.inventorySize())

public function unit.setUserDataEx(int data)
    SetUnitUserDataEx(this, data)

public function unit.getUserDataEx() returns int
    return GetUnitUserDataEx(this)

public function unit.addSleep(bool value)
    UnitAddSleep(this, value)

public function unit.setCreepGuard(bool value)
    SetUnitCreepGuard(this, value)

public function unit.addOrStackItem(item itm) returns bool
    //Stackables
    if isItemStackable(itm.getTypeId())
        if not this.isItemFullyStacked(itm.getTypeId())
            this.stackItem(itm)
            return true
    else
        //Non-stackables
        if not this.isInventoryFull()
            this.addItemHandle(itm)
            return true
    return false
    
public function unit.isImmobilized() returns bool
    return (
        this.getAbilityLevel(BUFF_ENSNARE_AIR) > 0 or
        this.getAbilityLevel(BUFF_ENSNARE_GROUND) > 0 or
        this.getAbilityLevel(BUFF_ENTANGLE) > 0 or
        this.getAbilityLevel(BUFF_ENTANGLE_BRAMBLES_ID) > 0
    )
