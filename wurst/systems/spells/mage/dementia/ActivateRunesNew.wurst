package ActivateRunesNew
import DarkGateNew
import DementiaRunesNew
import ClosureForGroups
import Orders
import ClosureEvents
import IttDummyCaster
import LinkedList
import ClosureTimers
import Lodash
import LegacyColors
import ID

constant let ABILITY_ID = 'A07B'
constant let REQUIREMENT_ABILITY_ID = 'A07D'
constant let PORTAL_OFFSET = 350.
constant let RUNE_CAST_RADIUS = 350.
constant let SUMMON_EFFECT_PATH = "Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl"

LinkedList<SummonData> summonsList = new LinkedList<SummonData>()

public class SummonData
    LinkedList<Runes> runeOrder
    string name
    int orderId
    real cooldown
    int summonUnitID
    construct(Runes r1, Runes r2, Runes r3, Runes r4, Runes r5, string name, int orderId, real cooldown, int summonUnitID)
        runeOrder = new LinkedList<Runes>()
        runeOrder.push(r1)
        runeOrder.push(r2)
        runeOrder.push(r3)
        runeOrder.push(r4)
        runeOrder.push(r5)
        this.name = name
        this.orderId = orderId
        this.cooldown = cooldown
        this.summonUnitID = summonUnitID

function onCast()
    var caster = GetSpellAbilityUnit()
    DementiaRunesInstance runesInstance = getRunesInstance(caster)
    DarkPortalInstance portalInstance = getDementiaGate(caster)

    if runesInstance == null
        return

    if not trySummonDemon(caster, runesInstance, portalInstance)
        runesCastSpells(caster, runesInstance)

function isValidTarget(unit caster, unit target) returns boolean
    var owner = caster.getOwner()
    return target.getOwner().isEnemyOf(owner) and not target.isInvulnerable() and not target.isType(UNIT_TYPE_STRUCTURE) and target.isAlive() and IsUnitVisible(target, owner)

function runesCastSpells(unit caster, DementiaRunesInstance runesInstance)
    unit target = null
    var owner = caster.getOwner()
    var casterPos = caster.getPos()
    forUnitsInRange(caster.getPos(), RUNE_CAST_RADIUS) t ->
        if isValidTarget(caster, t)
            if (target == null)
                target = t
            else if (target.getPos().distanceToSq(casterPos) > t.getPos().distanceToSq(casterPos))
                target = t

            for r in runesInstance.runes
                DementiaRuneSpell spell = r.getRandomRuneSpellID()
                new IttDummyCaster(1).castTarget(owner, spell.spellId, 1, spell.orderId, target, r.pos)
                destroy r

function Runes.toString() returns string
    switch this
        case Ka
            return "Ka"
        case Nel
            return "Nel"
        case Lez
            return "Lez"
        default
            print("ERROR: Unsupported rune type")
            return ""

function findMatchingSummonData(LinkedList<Runes> runes) returns SummonData
    for summonInfo in summonsList
        if summonInfo.runeOrder.equals(runes)
            return summonInfo
    return null

function trySummonDemon(unit caster, DementiaRunesInstance runesInstance, DarkPortalInstance portalInstance) returns bool
    if runesInstance != null and portalInstance != null and runesInstance.runes.size() > 0 and caster.hasAbility(REQUIREMENT_ABILITY_ID)
        if portalInstance.isUnitInsidePortal(caster)
            //Have portal, and standing inside portal
            var runeSequence = new LinkedList<Runes>()
            for r in runesInstance.runes
                runeSequence.push(r.runeType)

            //Find matching summon for rune sequence and summon if found
            var summonData = findMatchingSummonData(runeSequence)
            destroy runeSequence
            if summonData != null
                doSummon(summonData, portalInstance, caster.getOwner())
                for r in runesInstance.runes
                    destroy r
                return true
    return false

function doSummon(SummonData summon, DarkPortalInstance portalInstance, player owner)
    //Spawn-effect
    var efx = addEffect(SUMMON_EFFECT_PATH, portalInstance.centerPos + vec3(0, 0, 300))
    efx.setScale(2)

    //On the right timing after spawned effect, do actions
    doAfter(1.25) ->
        efx.destr()
        printTimedToPlayer(GENERAL_COLOR + "You have summoned " + summon.name + GENERAL_COLOR + "!|r", 4, owner)
        portalInstance.summons.push(new Summon(createUnit(owner, summon.summonUnitID, portalInstance.centerPos, angle(-90 * DEGTORAD)), summon.cooldown, summon.orderId))


function initSummonsData()
    summonsList.push(new SummonData(Runes.Ka, Runes.Lez, Runes.Ka, Runes.Nel, Runes.Ka, "|c00ff0000Kalezka Nelka|r", Orders.acidbomb, 1, UNIT_LOCUST_FIRE_LORD))
    summonsList.push(new SummonData(Runes.Lez, Runes.Nel, Runes.Lez, Runes.Lez, Runes.Ka, "|c00005a95Leznel Lezlezka|r", Orders.thunderbolt, 1, UNIT_LOCUST_WATER_LORD))
    summonsList.push(new SummonData(Runes.Nel, Runes.Nel, Runes.Ka, Runes.Nel, Runes.Lez, "|c0075f041Nelnelka Nellez|r", Orders.soulburn, 1.5, UNIT_LOCUST_GHOST))

init
    initSummonsData()
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())
