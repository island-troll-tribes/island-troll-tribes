package TrollUpgrade

// Standard library imports:
import HashMap
import RegisterEvents

// Local imports:
import ID
import MeatSystem
import Pets
import PetReleasing

public constant trollUpgradeMap = new HashMap<int, int>()
..put(SPELL_WARRIOR         , UNIT_WARRIOR)
..put(SPELL_TRACKER         , UNIT_TRACKER)
..put(SPELL_JUGGERNAUT      , UNIT_JUGGERNAUT)
..put(SPELL_ELEMENTALIST    , UNIT_ELEMENTALIST_NEW)
..put(SPELL_HYPNOTIST       , UNIT_HYPNOTIST)
..put(SPELL_DEMENTIA_MASTER , UNIT_DEMENTIA_MASTER)
..put(SPELL_BOOSTER         , UNIT_BOOSTER)
..put(SPELL_MASTER_HEALER   , UNIT_MASTER_HEALER)
..put(SPELL_SAGE            , UNIT_SAGE)
..put(SPELL_CHICKEN         , UNIT_CHICKEN_FORM)
..put(SPELL_SHAPESHIFTER    , UNIT_SHAPESHIFTER_WOLF)
..put(SPELL_ULTIMATE_FORM   , UNIT_ULTIMATE_FORM)
..put(SPELL_ESCAPE_ARTIST   , UNIT_ESCAPE_ARTIST)
..put(SPELL_CONTORTIONIST   , UNIT_CONTORTIONIST)
..put(SPELL_ASSASSIN        , UNIT_ASSASSIN)
..put(SPELL_OBSERVER        , UNIT_OBSERVER)
..put(SPELL_RADAR_SCOUT     , UNIT_RADAR_SCOUT)
..put(SPELL_TRAPPER         , UNIT_TRAPPER)
..put(SPELL_SPY             , UNIT_SPY)
..put(SPELL_RADAR_GATHERER  , UNIT_RADAR_GATHERER)
..put(SPELL_HERB_MASTER     , UNIT_HERB_MASTER)
..put(SPELL_OMNIGATHERER    , UNIT_OMNIGATHERER)

public function replaceUnit(int newUnitId, unit oldUnit) returns unit
    return replaceUnit(newUnitId, oldUnit, true)

public function replaceUnit(int newUnitId, unit oldUnit, bool remove) returns unit
    let owner = GetOwningPlayer(oldUnit)
    let pos = oldUnit.getPos()
    let angle = oldUnit.getFacingAngle()

    ShowUnit(oldUnit, false)
    let newUnit = createUnit(owner, newUnitId, pos, angle)
    newUnit.setHP(newUnit.getMaxHP()     * oldUnit.getHP()   / oldUnit.getMaxHP()  )
    if oldUnit.getMana() > 0
        newUnit.setMana(newUnit.getMaxMana() * oldUnit.getMana() / oldUnit.getMaxMana())

    // Transfer raw meat inventory, if necessary.
    if meatInventoryInstances.has(oldUnit)
        meatInventoryInstances.get(oldUnit).transferMeatInventoryToUnit(newUnit)

    for items in oldUnit.inventory()
        UnitAddItem(newUnit, items)

    if remove
        RemoveUnit(oldUnit)
    return newUnit

function upgradeUnit(int newUnitId, unit oldUnit)
    let newUnit = replaceUnit(newUnitId, oldUnit)
    let owner = GetOwningPlayer(oldUnit)
    int str = GetHeroStr(oldUnit, false)
    int agi = GetHeroAgi(oldUnit, false)
    int inte = GetHeroInt(oldUnit, false)

    newUnit.setStr(str)
    newUnit.setAgi(agi)
    newUnit.setInt(inte)

    //Change globals to new unit
    GroupRemoveUnit(udg_trolls, oldUnit)
    GroupAddUnit(udg_trolls, newUnit)
    udg_PUnits[GetPlayerId(owner)] = newUnit

    // Release the pet, if necessary.
    if newUnitId == UNIT_CHICKEN_FORM or newUnitId == UNIT_SHAPESHIFTER_WOLF
        if owner.getPet() != null
            releasePet(newUnit)

    //Avoid desync with localplayer check
    if GetLocalPlayer() == owner
        SelectUnit(newUnit, true)
        ForceUICancel()

function upgradeAction()
    let spell = GetLearnedSkill()
    let oldUnit = GetLearningUnit()
    var _newUnitId = 0

    _newUnitId = trollUpgradeMap.get(spell)
    if _newUnitId != 0
        upgradeUnit(_newUnitId, oldUnit)

init
    registerPlayerUnitEvent(EVENT_PLAYER_HERO_SKILL, () -> upgradeAction())
