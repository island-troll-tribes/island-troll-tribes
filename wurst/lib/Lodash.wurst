package Lodash
import LinkedList
import HashMap
import HashSet

public class OwnedLinkedList<T> extends LinkedList<T>

public class OwnedIterableMap<K, V> extends IterableMap<K, V>

public abstract class Callable
    var cleanup = true

    function own()
        cleanup = false

    function maybeFree()
        if cleanup
            destroy this

public abstract class EmptyVoidFunction extends Callable
    static function owned(EmptyVoidFunction func) returns EmptyVoidFunction
        return func..own()

    abstract function call()

public abstract class EmptyFunction<T> extends Callable
    static function owned<T>(EmptyFunction<T> func) returns EmptyFunction<T>
        return func..own()

    abstract function call() returns T

public abstract class VoidFunction<T> extends Callable
    static function owned<T>(VoidFunction<T> func) returns VoidFunction<T>
        return func..own()

    abstract function call(T t)

public abstract class Function<S, R> extends Callable
    static function owned<S, R>(Function<S, R> func) returns Function<S, R>
        return func..own()

    abstract function call(S s) returns R

public abstract class Predicate<S> extends Callable
    static function owned<S>(Predicate<S> func) returns Predicate<S>
        return func..own()

    abstract function call(S s) returns bool

public abstract class BiFunction<S, T, R> extends Callable
    static function owned<S, T, R>(BiFunction<S, T, R> func) returns BiFunction<S, T, R>
        return func..own()

    abstract function call(S s, T t) returns R

public abstract class TriFunction<S, T, U, R> extends Callable
    static function owned<S, T, U, R>(TriFunction<S, T, U, R> func) returns TriFunction<S, T, U, R>
        return func..own()

    abstract function call(S s, T t, U u) returns R

public abstract class QuadFunction<S, T, U, V, R> extends Callable
    static function owned<S, T, U, V, R>(QuadFunction<S, T, U, V, R> func) returns QuadFunction<S, T, U, V, R>
        return func..own()

    abstract function call(S s, T t, U u, V v) returns R

public function LinkedList<T>.maybeFree<T>()
    if not this instanceof OwnedLinkedList<T>
        destroy this

public function IterableMap<K, V>.maybeFree<K, V>()
    if not this instanceof OwnedIterableMap<K, V>
        destroy this

public function asOwnedList<T>(vararg T ts) returns OwnedLinkedList<T>
    let ll = new OwnedLinkedList<T>
    for t in ts
        ll.add(t)
    return ll

public function equals<T>(LinkedList<T> a, LinkedList<T> b) returns bool
    if a == null or b == null or a.size() != b.size()
        return false
    let iter = b.staticItr()
    for elemA in a
        let elemB = iter.next()
        if elemA != elemB
            return false
    return true

public function LinkedList<T>.equals<T>(LinkedList<T> b) returns bool
    return equals(this, b)

public function takeWhile<T>(TriFunction<T, int, LinkedList<T>, bool> predicate, LinkedList<T> list) returns LinkedList<T>
    let result = new LinkedList<T>()
    let iter = list.iterator()
    for elem from iter
        if not predicate.call(elem, result.size(), list)
            break
        result.add(elem)
    iter.close()
    predicate.maybeFree()
    list.maybeFree()
    return result

public function takeWhile<T>(BiFunction<T, int, bool> predicate, LinkedList<T> list) returns LinkedList<T>
    let result = takeWhile((x, y, _z) -> predicate.call(x, y), list)
    predicate.maybeFree()
    return result

public function takeWhile<T>(Predicate<T> predicate, LinkedList<T> list) returns LinkedList<T>
    let result = takeWhile((x, _y, _z) -> predicate.call(x), list)
    predicate.maybeFree()
    return result

public function LinkedList<T>.takeWhile<T>(TriFunction<T, int, LinkedList<T>, bool> predicate) returns LinkedList<T>
    return takeWhile(predicate, this)

public function LinkedList<T>.takeWhile<T>(BiFunction<T, int, bool> predicate) returns LinkedList<T>
    return this.takeWhile((x, y, _z) -> predicate.call(x, y))

public function LinkedList<T>.takeWhile<T>(Predicate<T> predicate) returns LinkedList<T>
    return this.takeWhile((x, _y, _z) -> predicate.call(x))

public function take<T>(int numElems, LinkedList<T> list) returns LinkedList<T>
    let result = new LinkedList<T>()
    let take = min(numElems, list.size())
    let iter = list.iterator()
    for elem from iter
        if result.size() == take
            break
        result.add(elem)
    iter.close()
    list.maybeFree()
    return result

public function take<T>(int numElems) returns Function<LinkedList<T>, LinkedList<T>>
    return list -> take(numElems, list)

public function LinkedList<T>.take<T>(int numElems) returns LinkedList<T>
    return take(numElems, this)

public function foldl<Q, T>(Q startValue, BiFunction<T, Q, Q> transform, LinkedList<T> list) returns Q
    var result = startValue
    let iter = list.iterator()
    for elem from iter
        result = transform.call(elem, result)
    iter.close()
    transform.maybeFree()
    list.maybeFree()
    return result

public function foldl<Q, T>(Q startValue, BiFunction<T, Q, Q> transform) returns Function<LinkedList<T>, Q>
    return list -> foldl(startValue, transform, list)

public function LinkedList<T>.foldl<Q, T>(Q startValue, BiFunction<T, Q, Q> transform) returns Q
    return foldl(startValue, transform, this)

public function foldr<Q, T>(Q startValue, BiFunction<T, Q, Q> transform, LinkedList<T> list) returns Q
    var result = startValue
    let iter = list.backiterator()
    for elem from iter
        result = transform.call(elem, result)
    iter.close()
    transform.maybeFree()
    list.maybeFree()
    return result

public function foldr<Q, T>(Q startValue, BiFunction<T, Q, Q> transform) returns Function<LinkedList<T>, Q>
    return list -> foldr(startValue, transform, list)

public function LinkedList<T>.foldr<Q, T>(Q startValue, BiFunction<T, Q, Q> transform) returns Q
    return foldr(startValue, transform, this)

public function every<T>(Predicate<T> predicate, LinkedList<T> list) returns bool
    let iter = list.iterator()
    for elem from iter
        if not predicate.call(elem)
            iter.close()
            return false
    iter.close()
    list.maybeFree()
    predicate.maybeFree()
    return true

public function every<T>(Predicate<T> predicate) returns Predicate<LinkedList<T>>
    return list -> every(predicate, list)

public function LinkedList<T>.every<T>(Predicate<T> predicate) returns bool
    return every(predicate, this)

public function any<T>(Predicate<T> predicate, LinkedList<T> list) returns bool
    let iter = list.iterator()
    for elem from iter
        if predicate.call(elem)
            iter.close()
            return true
    iter.close()
    list.maybeFree()
    predicate.maybeFree()
    return false

public function any<T>(Predicate<T> predicate) returns Predicate<LinkedList<T>>
    return list -> any(predicate, list)

public function LinkedList<T>.any<T>(Predicate<T> predicate) returns bool
    return any(predicate, this)

public function keys<T, Q>(IterableMap<T, Q> map) returns LinkedList<T>
    let keys = new LinkedList<T>()
    let iter = map.iterator()
    for key from iter
        keys.add(key)
    iter.close()
    map.maybeFree()
    return keys

public function IterableMap<T, Q>.keys<T, Q>() returns LinkedList<T>
    return keys(this)

public function values<T, Q>(IterableMap<T, Q> map) returns LinkedList<Q>
    let values = new LinkedList<Q>()
    let iter = map.iterator()
    for key from iter
        values.add(map.get(key))
    iter.close()
    map.maybeFree()
    return values

public function IterableMap<T, Q>.values<T, Q>() returns LinkedList<Q>
    return values(this)

public function map<T, Q>(Function<T, Q> transform, LinkedList<T> list) returns LinkedList<Q>
    let result = new LinkedList<Q>()
    let iter = list.iterator()
    for elem from iter
        result.add(transform.call(elem))
    iter.close()
    transform.maybeFree()
    list.maybeFree()
    return result

public function map<T, Q>(Function<T, Q> transform) returns Function<LinkedList<T>, LinkedList<Q>>
    return list -> map(transform, list)

public function flatten<T>(LinkedList<LinkedList<T>> list) returns LinkedList<T>
    let result = new LinkedList<T>()
    let iter = list.iterator()
    for elem from iter
        let subIter = elem.iterator()
        for subElem from subIter
            result.add(subElem)
    iter.close()
    return result

public function flatten<T>() returns Function<LinkedList<LinkedList<T>>, LinkedList<T>>
    return list -> flatten(list)

public function drop<T>(int numElems, LinkedList<T> list) returns LinkedList<T>
    let result = new LinkedList<T>()
    var drop = min(numElems, list.size())
    let iter = list.iterator()
    for elem from iter
        if drop > 0
            drop -= 1
        else
            result.add(elem)
    iter.close()
    list.maybeFree()
    return result

public function drop<T>(int numElems) returns Function<LinkedList<T>, LinkedList<T>>
    return list -> drop(numElems, list)

public function LinkedList<T>.drop<T>(int numElems) returns LinkedList<T>
    return drop(numElems, this)

public function filter<T>(Predicate<T> filter, LinkedList<T> list) returns LinkedList<T>
    let result = new LinkedList<T>()
    let iter = list.iterator()
    for elem from iter
        if filter.call(elem)
            result.add(elem)
    iter.close()
    filter.maybeFree()
    list.maybeFree()
    return result

public function LinkedList<T>.lfilter<T>(Predicate<T> filter) returns LinkedList<T>
    return filter(filter, this)

public function sum<T>(Function<T, int> fn, LinkedList<T> list) returns int
    return foldl(0, (elem, value) -> value + fn.call(elem), list)

public function LinkedList<T>.sum<T>(Function<T, int> fn) returns int
    return sum(fn, this)

public function LinkedList<int>.sum() returns int
    return foldl(0, (elem, value) -> value + elem, this)

public function LinkedList<real>.sum() returns real
    return foldl(0.0, (elem, value) -> value + elem, this)

public function length<T>(LinkedList<T> list) returns int
    let size = list.size()
    list.maybeFree()
    return size

public function LinkedList<T>.length<T>() returns int
    return length(this)

public function each<T>(VoidFunction<T> func, LinkedList<T> list)
    for elem in list
        func.call(elem)
    list.maybeFree()
    func.maybeFree()

public function LinkedList<T>.each<T>(VoidFunction<T> func)
    each(func, this)

public function zipObject<A, B>(LinkedList<A> a, LinkedList<B> b) returns IterableMap<A, B>
    let map = new IterableMap<A, B>()
    let iterA = a.iterator()
    let iterB = b.iterator()
    while iterA.hasNext()
        let val =  iterB.hasNext()
            ? iterB.next()
            : null
        map.put(iterA.next(), val)
    iterA.close()
    iterB.close()
    a.maybeFree()
    b.maybeFree()
    return map

public function LinkedList<A>.zipObject<A, B>(LinkedList<B> lst) returns IterableMap<A, B>
    return zipObject(this, lst)

public class Pair<A, B>
    A a
    B b

    construct(A a, B b)
        this.a = a
        this.b = b

public function pair<A, B>(A a, B b) returns Pair<A, B>
    return new Pair(a, b)

public function zip<A, B>(LinkedList<A> a, LinkedList<B> b) returns LinkedList<Pair<A, B>>
    let lst = new LinkedList<Pair<A, B>>()
    let iterA = a.iterator()
    let iterB = b.iterator()
    while iterA.hasNext() and iterB.hasNext()
        lst.add(pair(iterA.next(), iterB.next()))
    iterA.close()
    iterB.close()
    a.maybeFree()
    b.maybeFree()
    return lst

public function LinkedList<A>.zip<A, B>(LinkedList<B> lst) returns LinkedList<Pair<A, B>>
    return zip(this, lst)

public class Range
    let incr = 1
    let start = 0
    let finish = INT_MAX
    var curr = start

    construct()

    construct(int start, int finish, int incr)
        this.start = start
        this.finish = finish
        this.incr = incr
        curr = start

    function hasNext() returns bool
        return incr > 0 ? curr < finish : curr > finish

    function next() returns int
        let ret = curr
        curr += incr
        return ret

    function close()
        destroy this

    function iterator() returns Range
        return new Range(start, finish, incr)

    function toList() returns LinkedList<int>
        let lst = new LinkedList<int>()
        for x from this
            lst.add(x)
        close()
        return lst

public function range(int min, int max, int incr) returns Range
    return new Range(min, max, incr)

public function range(int min, int max) returns Range
    return new Range(min, max, 1)

public function range(int max) returns Range
    return new Range(0, max, 1)

public function range() returns Range
    return new Range()

public function rangeStep(int max, int incr) returns Range
    return new Range(0, max, incr)

public function uniq<T>(LinkedList<T> lst) returns LinkedList<T>
    let stored = new HashSet<T>()
    let uniqLst = new LinkedList<T>()
    let iter = lst.iterator()
    for elem from iter
        if not stored.has(elem)
            uniqLst.push(elem)
            stored.add(elem)
    iter.close()
    lst.maybeFree()
    destroy stored
    return uniqLst

public function LinkedList<T>.uniq<T>() returns LinkedList<T>
    return uniq(this)

public function uniqBy<T, R>(LinkedList<T> lst, Function<T, R> func) returns LinkedList<T>
    let stored = new HashSet<R>()
    let uniqLst = new LinkedList<T>()
    let iter = lst.iterator()
    for elem from iter
        let res = func.call(elem)
        if not stored.has(res)
            stored.add(res)
            uniqLst.push(elem)
    iter.close()
    lst.maybeFree()
    func.maybeFree()
    destroy stored
    return uniqLst

public function LinkedList<T>.uniqBy<T, R>(Function<T, R> func) returns LinkedList<T>
    return uniqBy(this, func)

public function union<T>(LinkedList<T> a, LinkedList<T> b) returns LinkedList<T>
    let stored = new HashSet<T>()
    let lst = new LinkedList<T>()
    let iterA = a.iterator()
    let iterB = b.iterator()
    for elem from iterA
        if not stored.has(elem)
            stored.add(elem)
            lst.push(elem)
    for elem from iterB
        if not stored.has(elem)
            stored.add(elem)
            lst.push(elem)
    iterA.close()
    iterB.close()
    a.maybeFree()
    b.maybeFree()
    destroy stored
    return lst

public function LinkedList<T>.union<T>(LinkedList<T> lst) returns LinkedList<T>
    return union(this, lst)

public function intersection<T>(LinkedList<T> a, LinkedList<T> b) returns LinkedList<T>
    let stored = new HashSet<T>()
    let lst = new LinkedList<T>()
    let iterA = a.iterator()
    let iterB = b.iterator()
    for elem from iterA
        stored.add(elem)
    for elem from iterB
        if stored.has(elem)
            lst.push(elem)
    iterA.close()
    iterB.close()
    a.maybeFree()
    b.maybeFree()
    destroy stored
    return lst

public function LinkedList<T>.intersection<T>(LinkedList<T> lst) returns LinkedList<T>
    return intersection(this, lst)

public function difference<T>(LinkedList<T> a, LinkedList<T> b) returns LinkedList<T>
    let store = new HashSet<T>()
    let lst = new LinkedList<T>()
    let iterA = a.iterator()
    let iterB = b.iterator()
    for elem from iterB
        store.add(elem)
    for elem from iterA
        if not store.has(elem)
            lst.push(elem)
    iterA.close()
    iterB.close()
    a.maybeFree()
    b.maybeFree()
    destroy store
    return lst

public function LinkedList<T>.difference<T>(LinkedList<T> lst) returns LinkedList<T>
    return difference(this, lst)

public function indexBy<T, R>(LinkedList<T> lst, Function<T, R> idx) returns IterableMap<R, T>
    let map = new IterableMap<R, T>()
    let iter = lst.iterator()
    for elem from iter
        map.put(idx.call(elem), elem)
    iter.close()
    lst.maybeFree()
    idx.maybeFree()
    return map

public function LinkedList<T>.indexBy<T, R>(Function<T, R> idx) returns IterableMap<R, T>
    return indexBy(this, idx)

public function groupBy<T, R>(LinkedList<T> lst, Function<T, R> idx) returns IterableMap<R, LinkedList<T>>
    let map = new IterableMap<R, LinkedList<T>>()
    let iter = lst.iterator()
    for elem from iter
        let val = idx.call(elem)
        if not map.has(val)
            map.put(val, new LinkedList<T>())
        map.get(val).add(elem)
    iter.close()
    lst.maybeFree()
    idx.maybeFree()
    return map

public function LinkedList<T>.groupBy<T, R>(Function<T, R> idx) returns IterableMap<R, LinkedList<T>>
    return groupBy(this, idx)

public function map<S, T, R>(IterableMap<S, T> map, BiFunction<S, T, R> transform) returns LinkedList<R>
    let res = new LinkedList<R>()
    let iter = map.iterator()
    for key from iter
        let val = transform.call(key, map.get(key))
        res.add(val)
    iter.close()
    map.maybeFree()
    return res

public function IterableMap<S, T>.map<S, T, R>(BiFunction<S, T, R> transform) returns LinkedList<R>
    return map(this, transform)

public function mapValues<S, T, R>(IterableMap<S, T> map, BiFunction<S, T, R> transform) returns IterableMap<S, R>
    let res = new IterableMap<S, R>()
    let iter = map.iterator()
    for key from iter
        let val = transform.call(key, map.get(key))
        res.put(key, val)
    iter.close()
    map.maybeFree()
    return res

public function IterableMap<S, T>.mapValues<S, T, R>(BiFunction<S, T, R> transform) returns IterableMap<S, R>
    return mapValues(this, transform)

public function mapKeys<S, T, R>(IterableMap<S, T> map, BiFunction<S, T, R> transform) returns IterableMap<R, T>
    let res = new IterableMap<R, T>()
    let iter = map.iterator()
    for key from iter
        let val = map.get(key)
        let newKey = transform.call(key, map.get(key))
        res.put(newKey, val)
    iter.close()
    map.maybeFree()
    return res

public function IterableMap<S, T>.mapKeys<S, T, R>(BiFunction<S, T, R> transform) returns IterableMap<R, T>
    return mapKeys(this, transform)

public function toPairs<S, T>(IterableMap<S, T> map) returns LinkedList<Pair<S, T>>
    let lst = new LinkedList<Pair<S, T>>()
    let iter = map.iterator()
    for key from iter
        lst.add(pair(key, map.get(key)))
    iter.close()
    map.maybeFree()
    return lst

public function IterableMap<S, T>.toPairs<S, T>() returns LinkedList<Pair<S, T>>
    return toPairs(this)

public function fromPairs<S, T>(LinkedList<Pair<S, T>> lst) returns IterableMap<S, T>
    let map = new IterableMap<S, T>()
    let iter = lst.iterator()
    for elem from iter
        map.put(elem.a, elem.b)
    iter.close()
    lst.maybeFree()
    return map

public function LinkedList<Pair<S, T>>.fromPairs<S, T>() returns IterableMap<S, T>
    return fromPairs(this)

public function chunk<T>(LinkedList<T> lst, int size) returns LinkedList<LinkedList<T>>
    let chunked = new LinkedList<LinkedList<T>>()
    let iter = lst.iterator()
    while iter.hasNext()
        let chunk = new LinkedList<T>()
        for i = 0 to size - 1
            chunk.add(iter.next())
            if not iter.hasNext()
                break
        chunked.add(chunk)
    iter.close()
    lst.maybeFree()
    return chunked

public function LinkedList<T>.chunk<T>(int size) returns LinkedList<LinkedList<T>>
    return chunk(this, size)

public function pull<T>(LinkedList<T> lst, T pull) returns LinkedList<T>
    let ret = lst.copy()
    let iter = lst.iterator()
    for elem from iter
        if elem == pull
            iter.remove()
    iter.close()
    lst.maybeFree()
    return ret

public function LinkedList<T>.pull<T>(T pull) returns LinkedList<T>
    return pull(this, pull)

@Test
function testIntersection()
    let lstA = asOwnedList(1, 2, 3)
    let lstB = asOwnedList(2, 3, 4)
    intersection(lstA, lstB).equals(asList(2, 3)).assertTrue()

@Test
function testRange()
    let range = range(10)
    range.hasNext().assertTrue()
    range.next().assertEquals(0)
    range.next().assertEquals(1)
    range.next().assertEquals(2)
    range.next().assertEquals(3)
    range.next().assertEquals(4)
    range.next().assertEquals(5)
    range.next().assertEquals(6)
    range.next().assertEquals(7)
    range.next().assertEquals(8)
    range.next().assertEquals(9)
    range.hasNext().assertFalse()

@Test
public function testMapValues()
    let maps = asOwnedList(
        new IterableMap<int, int>()..put(1, 2),
        new IterableMap<int, int>()..put(3, 4),
        new IterableMap<int, int>()..put(5, 6)
    )

    let valuesOf = Function.owned<IterableMap<int, int>, LinkedList<int>>(elem -> values(elem))
    let mapValues = map(valuesOf)
    let values = flatten(mapValues.call(maps))

    values.size().assertEquals(3)
    values.get(0).assertEquals(2)
    values.get(1).assertEquals(4)
    values.get(2).assertEquals(6)

    destroy mapValues

@Test
public function testFlatten()
    let lists = asList(
        asList(
            asList(1, 2, 3, 4, 5),
            asList(6, 7, 8, 9, 10)
        ),
        asList(
            asList(1, 2, 3, 4, 5),
            asList(6, 7, 8, 9, 10)
        )
    )

    let mapFlatten = map(Function.owned(flatten<int>()))
    let result = mapFlatten.call(lists)
    result.size().assertEquals(2)
    result.get(0).size().assertEquals(10)

@Test
function testTake2()
    let ints = asList(1, 2, 3)
    let take2 = take<int>(2)
    take2.call(ints).size().assertEquals(2)

@Test
function testTake()
    let list = new OwnedLinkedList<int>()
    list.size().assertEquals(0)

    list..add(1, 2, 3, 4)
    list.size().assertEquals(4)

    list.take(2).size().assertEquals(2)
    list.take(5).size().assertEquals(list.size())
    list.take(0).size().assertEquals(0)

    let list2 = list.take(3)
    list2.get(0).assertEquals(1)
    list2.get(1).assertEquals(2)
    list2.get(2).assertEquals(3)


@Test
function testLinkedListEvery()
    asList(1, 2, 3).every(x -> x < 4).assertTrue()
    asList(1, 2, 3).every(x -> x < 3).assertFalse()

@Test
function testLinkedListAny()
    asList(1, 2, 3).any(x -> x < 4).assertTrue()
    asList(1, 2, 3).any(x -> x > 3).assertFalse()

@Test
function testTakeWhile()
    let list = new OwnedLinkedList<int>()
    list.size().assertEquals(0)

    list..add(1, 2, 3, 4)
    list.size().assertEquals(4)

    list.takeWhile(x -> x < 3).size().assertEquals(2)
    list.takeWhile((x, y) -> y < 3).size().assertEquals(3)
    list.takeWhile((x, y, z) -> z.get(y) == x).size().assertEquals(4)

    let list2 = list.takeWhile((x, y) -> y < 3)
    list2.get(0).assertEquals(1)
    list2.get(1).assertEquals(2)
    list2.get(2).assertEquals(3)
