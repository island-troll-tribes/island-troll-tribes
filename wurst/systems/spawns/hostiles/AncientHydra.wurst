package AncientHydra
import Hostile
import LesserHydra
import ClosureTimers
import ClosureForGroups
import UnitExtensions


public class AncientHydra extends Hostile
    private static let unitTypeId = UNIT_ANCIENT_HYDRA

    static function initialize()
        register(unitTypeId, hydra -> new AncientHydra(hydra))

    CallbackPeriodic callback
    var frostReady = true

    construct(unit whichUnit)
        super(whichUnit)

    construct(vec2 pos)
        super(players[PLAYER_NEUTRAL_AGGRESSIVE], pos)
        let hydra = getUnit()
        ..addSleep(false)
        ..setCreepGuard(false)
        addEffect(teleportModel, hydra, "overhead")
        callback = doPeriodically(4, cb -> attackCenter())

    function attackCenter()
        let hydra = getUnit()

        if frostReady
            forNearestUnit(getPos(), 600, Filter(-> begin
                return not GetFilterUnit().getOwner().isAllyOf(players[PLAYER_NEUTRAL_AGGRESSIVE])
            end), closest -> begin
                if closest != null
                    hydra.issuePointOrder("breathoffrost", closest.getPos())
                    frostReady = false
                    doAfter(10, -> begin
                        frostReady = true
                    end)
            end)

        if frostReady
            hydra.issuePointOrder("attack", gg_rct_discoduck.getCenter())

    override function getNumCorpses() returns int
        return 8

    override function getTypeId() returns int
        return unitTypeId

    override function onDeath()
        destroy callback

        let pos = getPos()
        for i = 0 to 1
            new LesserHydra(pos)


init
    AncientHydra.initialize()
