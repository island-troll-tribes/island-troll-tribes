package Spears

// Standard library imports:
import ClosureEvents
import ClosureTimers
import DamageEvent
import DummyCaster
import HashMap
import ObjectIdGenerator
import UnitExtensions

// Third-party imports:
import ManaBurn
import ObjectIDManager

// Local imports:
import LocalObjectIDs

// TODO: Move these to spear definitions once an abstract system for collision
// side-effects is supported.
public let DARK_SPEAR_MANA_BURN_PERCENTAGE = .40
public let DARK_SPEAR_MANA_BURN_BASE        = 10.
public let DUMMY_ABILITY_SPEAR_DARK = compiletime(ABIL_ID_GEN.next())

// The amount of time allotted for spears to be in-flight.
let FLIGHT_ALLOWANCE = 10.

// This class allows for a damage listener to reference itself upon firing.
class Wrapper
    DamageListener listener = null

public class Spear
    // The ID of the item associated with this spear.
    int itemId

    // The ID of the ability used to indicate the usage of the spear, which is
    // what the item casts directly.
    int usageAbilityId

    // The ID of the ability used to actually fire the missile for the spear.
    int dummyAbilityId

    // The ID of the order used to execute the dummy ability.
    int dummyOrderId

    static private let definitions = new HashMap<int, thistype>()

    construct(
        int itemId,
        int usageAbilityId,
        int dummyAbilityId,
        int dummyOrderId
    )
        // Store the parameters.
        this.itemId         = itemId
        this.usageAbilityId = usageAbilityId
        this.dummyAbilityId = dummyAbilityId
        this.dummyOrderId   = dummyOrderId

        // Register the definition.
        definitions.put(usageAbilityId, this)

    static function getDefinition(int abilityId) returns thistype
        return definitions.get(abilityId)

function createSpearsDefinition()

function onSpearThrow(unit caster, unit target, Spear spear)
    // Create a persistent dummy caster.
    let dummyCaster = new DummyCaster()
        // Allow for the in-flight time of the missile.
        ..delay(FLIGHT_ALLOWANCE)
        ..owner(caster.getOwner())
        ..origin(caster.getPos())

    // Apply the actual effect to the target.
    let dummy = dummyCaster.castTarget(
        spear.dummyAbilityId,
        1,
        spear.dummyOrderId,
        target
    )

    // Create a wrapper to hold listener.
    let wrapper = new Wrapper()

    // Create a listener to detect when the missile hits the unit, the priority
    // of which is irrelevant because the listener functions independently.
    wrapper.listener = DamageEvent.addListener() ->
        onSpearCollision(caster, target, dummy, spear, wrapper)

    // Note the action.
    Log.debug(
        "Spear {0} was thrown by {1}:{2}, targeting {3}:{4}.".format(
            spear.itemId.asObjectName(),
            caster.getOwner().getNameColored(),
            caster.getName(),
            target.getOwner().getNameColored(),
            target.getName()
        )
    )

    // Clean up the wrapper object later.
    doAfter(FLIGHT_ALLOWANCE) ->
        // Verify that the spear impacted, if the unit did not die beforehand.
        // TODO: Manage a state synchronized to the lifespan of the unit, which
        // will prevent the situation where a unit dies, canceling the impact,
        // and then revives before this timer fires.
        if wrapper.listener != null and target.isAlive()
            Log.error(
                "Spear {0} thrown by {1}:{2} failed to impact {3}:{4}.".format(
                    spear.itemId.asObjectName(),
                    caster.getOwner().getNameColored(),
                    caster.getName(),
                    target.getOwner().getNameColored(),
                    target.getName()
                )
            )

            // Ensure the listener is cleaned up before the dummy is recycled.
            destroy wrapper.listener

        // Clean up the wrapper after its contents are sanitized.
        destroy wrapper

function onSpearCollision(unit caster, unit target, unit dummy, Spear spear, Wrapper wrapper)
    // Ignore damage not caused by the caster.
    if DamageEvent.getSource() != dummy
        return

    // Ignore damage caused to other units.
    if DamageEvent.getTarget() != target
        return

    // Ignore damage used by the engine to indicate debuffs.
    if DamageEvent.getAmount() == 0
        return

    // Note the action.
    Log.debug(
        "Spear {0} thrown by {1}:{2} collided with {3}:{4}.".format(
            spear.itemId.asObjectName(),
            caster.getOwner().getNameColored(),
            caster.getName(),
            target.getOwner().getNameColored(),
            target.getName()
        )
    )

    // Check for the death of the unit after the damage on impact is applied.
    nullTimer() ->
        onSpearImpact(caster, target, spear, wrapper)

function onSpearImpact(unit caster, unit target, Spear spear, Wrapper wrapper)
    // Ignore duplicate checks for the same impact, which may result if damage
    // is dealt twice for a single spear before the null timers can fire.
    if wrapper.listener == null
        return

    // Destroy the listener so that it only fires once.
    destroy wrapper.listener

    // Null the reference in order to facilitate the above check.
    wrapper.listener = null

    // Note the action.
    Log.debug(
        "Spear {0} thrown by {1}:{2} impacted {3}:{4}.".format(
            spear.itemId.asObjectName(),
            caster.getOwner().getNameColored(),
            caster.getName(),
            target.getOwner().getNameColored(),
            target.getName()
        )
    )
    Log.debug(
        "On impact, target HP is {0} and is {1}.".format(
            target.getHP().toString(),
            target.isAlive() ? "alive" : "dead"
        )
    )

    // Handle any effects specific to targets that are trolls.
    if target.isTroll()
        // Handle the rider for dark spears, as necessary.
        // TODO: Support a dispatcher system for spear impacts.
        if spear.dummyAbilityId == DUMMY_ABILITY_SPEAR_DARK
            onDarkSpear(caster, target)

        // Update resistance for the unit.
        addSpearResistance(target)

function addSpearResistance(unit target)
    // Ensure the ability is hidden while the unit possesses it.
    SetPlayerAbilityAvailable(target.getOwner(), ABILITY_SPEAR_RESIST, false)

    // Increment the level of resistance, starting from zero.
    if not target.hasAbility(ABILITY_SPEAR_RESIST)
        target.addAbility(ABILITY_SPEAR_RESIST)
    else if target.getAbilityLevel(ABILITY_SPEAR_RESIST) < 6
        target.incAbilityLevel(ABILITY_SPEAR_RESIST)

    // Undo the resistance shortly afterwards.
    doAfter(1.) ->
        if target.getAbilityLevel(ABILITY_SPEAR_RESIST) > 1
            target.decAbilityLevel(ABILITY_SPEAR_RESIST)
        else
            target.removeAbility(ABILITY_SPEAR_RESIST)

function onSpearThrow()
    // Look up the spear definition for the indicator ability.
    let spear = Spear.getDefinition(EventData.getSpellAbilityId())

    // Ignore irrelevant abilities.
    if spear == null
        return

    // Execute the effect.
    onSpearThrow(
        EventData.getSpellAbilityUnit(),
        EventData.getSpellTargetUnit(),
        spear
    )

function onDarkSpear(unit caster, unit target)
    // Allow the mana drain to affect only trolls.
    if not target.isTroll()
        return

    // Compute the amount of mana to drain.
    let drainAmount = DARK_SPEAR_MANA_BURN_BASE +
        (target.getMana() * DARK_SPEAR_MANA_BURN_PERCENTAGE)

    // Note the action.
    Log.debug(
        "Dark spear throw by {0}:{1} will drain {2} mana for {3}:{4}.".format(
            caster.getOwner().getNameColored(),
            caster.getName(),
            drainAmount.toString(),
            target.getOwner().getNameColored(),
            target.getName()
        )
    )

    // Perform the mana reduction.
    target.drainMana(target, drainAmount)

init
    // Create a listener for the various spear throws.
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
        onSpearThrow()
