package Hostile

// Standard library imports:
import ClosureTimers
import DummyRecycler
import LinkedList
import Sounds

import GameConfig

// Local imports:
import DummyCorpse
import Sniff
import UnitEntity
import PingMinimap
import PlayerExtensions
import ColorUtils

import initlater GreenFish
import initlater Fish
import initlater Hawk
import initlater Mammoth
import initlater DiscoDuck

public abstract class Hostile extends UnitEntity
    private boolean dropOnDeath = true

    construct(unit whichUnit)
        super(whichUnit)

    function getDrops() returns LinkedList<int>
        return new LinkedList<int>()

    function getNumCorpses() returns int
        return 1

    override function postCreate()
        super.postCreate()

    override function onDeath()
        if dropOnDeath
            let pos = getPos()
            let numCorpses = (
                  getNumCorpses()
                * gameConfig.getFoodForKillProportion()
            ).round()
            let drops = getDrops()
            let numDrops = drops.size()
            let killer = EventData.getKillingUnit()

            // Compute the unit responsible for the killer.
            // TODO: This would not work if a player controlled multiple units.
            //       Ideally each dummy cast would be mapped to a real unit.
            let origin = killer != null and killer.getTypeId() == DUMMY_UNIT_ID
                ? killer.getOwner().getTroll()
                : killer

            if numDrops != 0
                let dropsIter = drops.iterator()
                doPeriodicallyCounted(ANIMATION_PERIOD, numDrops) cb ->
                    // Create the drop.
                    let drop = createItem(dropsIter.next(), pos)

                    // Register the drop for sniffing.
                    if origin != null
                        onMove(origin, drop)

                    // Deallocate resources when finished
                    if cb.isLast()
                        dropsIter.close()
                        destroy drops
            else
                destroy drops

            // Stagger spawns to avoid computational lag.
            doPeriodicallyCounted(ANIMATION_PERIOD, numCorpses) cb ->
                createCorpse(pos)

            if this instanceof Hawk
                or this instanceof Fish
                or this instanceof GreenFish
                udg_FISH_CURRENT -= 1
            else
                udg_ANIMAL_CURRENT -= 1

        if this instanceof Mammoth or this instanceof DiscoDuck
            PlaySound(Sounds.warning)
            printTimed(("The {0} has been killed!".format(getUnit().getName())).color(COLOR_RED), 5)
            pingMinimap(getUnit().getPos(), 5, COLOR_YELLOW, PingMinimapStyle.ATTACK)

        super.onDeath()

    function setDropOndeath(boolean dropOnDeath)
        this.dropOnDeath = dropOnDeath

    function getDropOnDeath() returns boolean
        return this.dropOnDeath
