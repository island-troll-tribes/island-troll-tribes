package Hostile
import ID
import LinkedList
import UnitEntity
import Lodash
import GeometryUtils
import ClosureTimers

let LOOT_SPAWN_PERIOD = 0.05

public function createCorpse(player p, int unitId, vec2 pos, angle facing) returns unit
    return CreateCorpse(p, unitId, pos.x, pos.y, facing.degrees())

public abstract class Hostile extends UnitEntity
    construct(unit whichUnit)
        super(whichUnit)

    construct(player whichPlayer, vec2 pos)
        super(whichPlayer, pos)

    construct(player whichPlayer, vec2 pos, angle facing)
        super(whichPlayer, pos, facing)

    function getDrops() returns LinkedList<int>
        return new LinkedList<int>()

    function getNumCorpses() returns int
        return 1

    override function postCreate()
        super.postCreate()

    override function onDeath()
        let pos = getPos()
        let numCorpses = (getNumCorpses() * udg_FOOD_FOR_KILL_PROPORTION).round()

        //Smooth spawn loot to avoid lag/desyncs
        doPeriodicallyCounted(LOOT_SPAWN_PERIOD, numCorpses) cb ->
            createCorpse(players[PLAYER_NEUTRAL_AGGRESSIVE], UNIT_MEAT, pos, randomAngle())

        let drops = getDrops()
        doAfter(LOOT_SPAWN_PERIOD * numCorpses) ->
            if drops.size() != 0
                let dropsIter = drops.iterator()
                doPeriodicallyCounted(LOOT_SPAWN_PERIOD, drops.size()) cb ->
                    createItem(dropsIter.next(), pos)
                    if cb.isLast()
                        dropsIter.close()
                        destroy drops
            else
                destroy drops

        super.onDeath()
