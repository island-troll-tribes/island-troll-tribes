package JumpSystem
import ChatCommands
import GameConfig
import ClosureForGroups
import ClosureTimers
import LocalObjectIDs
import TheOneDefinition
import InstantDummyCaster
import OrderIds
import Assets
import ErrorHandling
import TerrainUtils
import UnitExtensions

let DEFAULT_GRAVITY = 175.
let MAX_TURNSPEED = 3.
let HEIGHT_CHANGE_RATE = 10000.
let CROWFORM_ID = 'Amrf'

let TARGET_SEARCH_MIN_RANGE = 200.
let TARGET_SEARCH_INCREMENT = 25

init
    registerCommandAll("jump") (triggerPlayer, args) ->
        let indexAnim = args.size() > 1 ? args.get(1).toInt() : 2
        let startinTimeScale = args.size() > 2 ? args.get(2).toReal() : 8.
        let flyingTimeScale = args.size() > 3 ? args.get(3).toReal() : 0.85
        if (gameConfig.isTestModeEnabled() == true)
            forUnitsSelected(triggerPlayer) u ->
                if (u.isType(UNIT_TYPE_HERO))
                    performJump(u, u.getPos().polarOffset(u.getFacingAngle(), 400), indexAnim, startinTimeScale, flyingTimeScale)
        else
            printTimedToPlayer("Requires test mode!", 5., triggerPlayer)

function canJumpToTarget(vec2 targetPos) returns bool
    return targetPos.isTerrainWalkable()

public function onStartCast(real maxRange)
    let caster = GetSpellAbilityUnit()
    let targetPos = vec2(GetSpellTargetX(), GetSpellTargetY())
    let casterPos = caster.getPos()
    let jumpPos = getJumpPos(casterPos, targetPos, maxRange)

    //Stop casting if non-jumpable target or we are immobilized
    if not canJumpToTarget(jumpPos) or caster.isImmobilized()
        caster.issueImmediateOrderById(Orders.stop)
        //Set stand animation to prevent looping the cast-animation
        caster.setAnimation(0)

public function getJumpPos(vec2 casterPos, vec2 targetPos, real maxRange) returns vec2
    var jumpPos = targetPos
    let ang = casterPos.angleTo(jumpPos)

    //Limit range if ability used beyond jump range
    if (casterPos.distanceTo(jumpPos) >= maxRange)
        var distance = maxRange
        jumpPos = casterPos.polarOffset(ang, distance)

        //Find furthest point towards cast point where we can jump
        while distance >= TARGET_SEARCH_MIN_RANGE and not canJumpToTarget(jumpPos)
            distance = distance - TARGET_SEARCH_INCREMENT
            jumpPos = casterPos.polarOffset(ang, distance)

    return jumpPos

/**
    indexAnimation is used to pick a precise animation to be played during the jump
    startingTimeScale is used to accelerate the beginning of the animation
    flyingTimeScale is used to slow down the animation during flight time
**/
public function performJump(unit u, vec2 targetPos, int indexAnim, real startingTimeScale, real flyingTimeScale)
    let distance = u.getPos().distanceTo(targetPos)
    let groundSpeed = 1.5 * distance
    new JumpInstance(u, targetPos)

    //Play backflip animation
    u.pause()
    u.setAnimation(indexAnim)
    //Skip to the actual backflip portion of the animation
    u.setTimeScale(startingTimeScale)
    doAfter(0.05) ->
        u.setTimeScale(flyingTimeScale)
    //Reset animation to stand after jumping
    doAfter(distance / groundSpeed) ->
        u.setAnimation("stand")
        u.unpause()
        u.setTimeScale(1)

class JumpInstance
    unit u
    vec3 velocity
    vec2 targetPos
    real gravity = DEFAULT_GRAVITY
    real originalFlyHeight
    real height = 0
    real flightTime = 0.67
    real originalTurnspeed
    angle ang

    construct(unit u, vec2 targetPos, real duration, real gravity)
        this.gravity = gravity
        this.u = u
        this.targetPos = targetPos
        this.flightTime = duration
        let groundSpeed = u.getPos().distanceTo(targetPos)/duration
        let velZ = (gravity * this.flightTime) / 2
        let velXY = u.getPos().angleTo(targetPos).toVec(groundSpeed)
        this.velocity = velXY.withZ(velZ)
        this.ang = velXY.getAngle()
        startJump()

    construct(unit u, vec2 targetPos, real duration)
        this.u = u
        this.targetPos = targetPos
        this.flightTime = duration
        let groundSpeed = u.getPos().distanceTo(targetPos)/duration
        let velZ = (gravity * this.flightTime) / 2
        let velXY = u.getPos().angleTo(targetPos).toVec(groundSpeed)
        this.velocity = velXY.withZ(velZ)
        this.ang = velXY.getAngle()
        startJump()

    construct(unit u, vec2 targetPos)
        this.u = u
        this.targetPos = targetPos
        let groundSpeed = u.getPos().distanceTo(targetPos)/this.flightTime
        let velZ = (gravity * this.flightTime) / 2
        let velXY = u.getPos().angleTo(targetPos).toVec(groundSpeed)
        this.velocity = velXY.withZ(velZ)
        this.ang = velXY.getAngle()
        startJump()

    function startJump()
        //Set pathing off so we can actually fly over thing
        u.setPathing(false)
        //Add crowform to enable flying height adjustment
        u.addAbility(CROWFORM_ID)
        u.removeAbility(CROWFORM_ID)
        this.originalTurnspeed = u.getTurnSpeed()
        u.setTurnSpeed(MAX_TURNSPEED)
        doPeriodicallyTimed(ANIMATION_PERIOD, this.flightTime) cb ->
            updateLoop()
            if cb.isLast()
                //Destructor finishes the jump
                destroy this

    function updateLoop()
        u.setFacing(ang)
        u.setPos(u.getPos() + this.velocity.toVec2() * ANIMATION_PERIOD)
        this.height += this.velocity.z
        this.velocity.z -= this.gravity * ANIMATION_PERIOD
        u.setFlyHeight(this.height, HEIGHT_CHANGE_RATE)

    function finishJump()
        u.setPos(targetPos)
        u.setFacing(ang)
        u.setTurnSpeed(this.originalTurnspeed)
        u.setPathing(true)
        u.setFlyHeight(u.getDefaultFlyHeight(), HEIGHT_CHANGE_RATE)

        // Small water splash effect
        if targetPos.isTerrainShallowWater()
            flashEffect(Abilities.crushingWaveDamage, targetPos)
        if u.getTypeId() == UNIT_ONE
            if InstantDummyCaster.castImmediate(u.getOwner(), JUMP_STOMP_ID, 1, OrderIds.creepthunderclap, u.getPos()) == false
                error("Jump Stomp cast failed")
            flashEffect(Abilities.warStompCaster, u.getPos())

    ondestroy
        finishJump()
