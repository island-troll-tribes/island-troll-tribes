package ScoutRadars

// Standard library imports:
import Assets
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import LinkedList

// Local imports:
import ColorUtils
import LocalObjectIDs
import IdListConstant
import LocalAssets
import ToolTipsUtils

let ABILITY_PING_ELK             = compiletime(ABIL_ID_GEN.next())
let ABILITY_PING_HAWK            = compiletime(ABIL_ID_GEN.next())
let ABILITY_PING_LIVING_CLAY     = compiletime(ABIL_ID_GEN.next())
let ABILITY_PING_TROLL           = compiletime(ABIL_ID_GEN.next())
let ABILITY_PING_BUILDING        = compiletime(ABIL_ID_GEN.next())
let ABILITY_PING_HOSTILE_ANIMALS = compiletime(ABIL_ID_GEN.next())
let UNSUB_RADAR_PING             = compiletime(UNIT_ID_GEN.next())

public let ADVANCED_RADAR_SPELLBOOK = commaList(
    ABILITY_PING_ELK,
    ABILITY_PING_HAWK,
    ABILITY_PING_HOSTILE_ANIMALS,
    ABILITY_PING_BUILDING,
    ABILITY_PING_TROLL,
    ABILITY_PING_LIVING_CLAY,
    // Shadowsight is included here despite not being a radar.
    ABILITY_SHADOW_SIGHT
)

let HOSTILE_ANIMALS_LIST = asList(UNIT_SNAKE, UNIT_JUNGLE_WOLF, UNIT_JUNGLE_BEAR, UNIT_PANTHER,
                                    UNIT_ALIGATOR_MAN           , UNIT_ONE                    , UNIT_MAMMOTH             , UNIT_DISCO_DUCK, UNIT_ANCIENT_HYDRA,
                                    UNIT_ADULT_ELK              , UNIT_ADULT_JUNGLE_BEAR      , UNIT_ADULT_JUNGLE_WOLF   , UNIT_ELK_ADOLESCENT,
                                    UNIT_HAWK_ADOLESCENT        , UNIT_FOREST_DRAGON_HATCHLING, UNIT_RED_DRAGON_HATCHLING,
                                    UNIT_BRONZE_DRAGON_HATCHLING, UNIT_NETHER_DRAGON_HATCHLING, UNIT_ALPHA_HAWK          ,
                                    UNIT_FOREST_DRAGON          , UNIT_GREATER_FOREST_DRAGON  , UNIT_BRONZE_DRAGON       , UNIT_GREATER_BRONZE_DRAGON,
                                    UNIT_RED_DRAGON             , UNIT_GREATER_RED_DRAGON     , UNIT_NETHER_DRAGON       , UNIT_GREATER_NETHER_DRAGON)

let BUILDING_LIST        = asList(UNIT_FIRE,      UNIT_SMOKE_HOUSE,       UNIT_STORAGE_HUT, UNIT_MUD_HUT,     UNIT_ARMORY, UNIT_TELEPORTATION_BEACON,
                                           UNIT_WORKSHOP , UNIT_WITCH_DOCTORS_HUT, UNIT_POT     ,    UNIT_TANNERY    , UNIT_ENSNARE_TRAP, UNIT_OMNITOWER,
                                           UNIT_MAGE_FIRE, UNIT_TROLL_HUT        , UNIT_HATCHERY,    UNIT_SPIRIT_WARD, UNIT_FORGE)

let TRADESHIP_LIST       = asList(UNIT_TRADE_SHIP_1, UNIT_TRADE_SHIP_2, UNIT_TRADE_SHIP_3, UNIT_TRADE_SHIP_4, UNIT_TRADE_SHIP_5, UNIT_TRADE_SHIP_6)

let DONT_PING_THOSE_LIST = asList(UNIT_HAWK, UNIT_FISH, UNIT_GREEN_FISH, UNIT_MEAT, LocalUnitIds.dummyGoldMine)

let COOLDOWN = 30.
let TOOL_TIP_COOLDOWN = " Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())
let MANACOST = 0
let RADAR_RANGE = 3000.
let IMPROVED_RADAR_RANGE = 4500.

public class RadarSpell
    let hotkey = ""
    let name = "Locate "
    let toolTip = "Ping "
    let iconPath = "ReplaceableTextures\\CommandButtons\\"
    let id = '0'
    let btnPositionX = 0
    let btnPositionY = 0
    let baseOrderId = "avatar"
    let cooldown = COOLDOWN
    let manaCost = 10

    construct(string unitToPing, string toolTip, string iconPath, int id, int btnX, int btnY, string hotkey, string baseOrderId, int manaCost, string color)
        this.name = GENERAL_COLOR.toColorString()+"[" + SPECIAL_COLOR.toColorString() + hotkey + GENERAL_COLOR.toColorString() + "] - " + this.name + color + unitToPing + "|r"
        this.toolTip += color+unitToPing + "|r surrounding your position." + toolTip
        this.iconPath += iconPath
        this.id = id
        this.btnPositionX = btnX
        this.btnPositionY = btnY
        this.baseOrderId = baseOrderId
        this.hotkey = hotkey
        this.manaCost = manaCost

    function buildSpell()
        new ChannelAbilityPreset(id, 1, true)
            ..setTargetType(1, 0)
            ..setAnimationNames("spell")
            ..setButtonPositionNormalX(btnPositionX)
            ..setButtonPositionNormalY(btnPositionY)
            ..setIconNormal(iconPath)
            ..setHeroAbility(false)
            ..setItemAbility(false)
            ..setHotkeyNormal(hotkey)
            ..setName(name)
            ..setDisableOtherAbilities(1, false)
            ..setTooltipNormal(1, name)
            ..setTooltipNormalExtended(1, toolTip)
            ..presetOptions(lvl -> 1)
            ..presetCooldown(lvl -> cooldown)
            ..presetManaCost(lvl -> manaCost)
            ..presetFollowThroughTime(lvl -> 1.)

function getRadarSpells() returns LinkedList<RadarSpell>
    return asList(
        //Unsub Scout Radar Spell
        new RadarSpell("Elk|r"+GENERAL_COLOR.toColorString()+" and "+COLOR_RED.toColorString()+"Hostile Units" , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_ENEMY, 2, 1, "R", "stormbolt" , 0, COLOR_GREEN.toColorString()  ),
        new RadarSpell("Elk|r"+GENERAL_COLOR.toColorString()+" and "+COLOR_RED.toColorString()+"Hostile Units" , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_SPY_PING_ENEMY, 2, 1, "A", "stormbolt" , 0, COLOR_GREEN.toColorString()  ),

        //Advanced Radar Spells
        new RadarSpell("Elk"              , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_ELK             , 0, 0, "Q", "locustswarm"   , MANACOST, COLOR_GREEN .toColorString() ),
        new RadarSpell("Hawk"             , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_HAWK            , 0, 0, "W", "manashieldon"  , MANACOST, COLOR_TEAL  .toColorString() ),
        new RadarSpell("Hostile Animals"  , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_HOSTILE_ANIMALS , 0, 0, "E", "manaflareoff"  , MANACOST, COLOR_RED   .toColorString() ),
        new RadarSpell("Hostile Building" , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_BUILDING        , 0, 0, "R", "manaflareon"   , MANACOST, COLOR_ORANGE.toColorString() ),
        new RadarSpell("Trolls"           , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_TROLL           , 0, 0, "A", "manashieldoff" , MANACOST, COLOR_RED   .toColorString() ),
        new RadarSpell("Living Clay"      , TOOL_TIP_COOLDOWN, "BTNSpy.blp" , ABILITY_PING_LIVING_CLAY     , 0, 0, "S", "howlofterror"  , MANACOST, COLOR_PINK  .toColorString() )
    )

function onCast(LinkedList<int> unitId, real red, real green, real blue)
    var caster = GetSpellAbilityUnit()
    var casterPos = caster.getPos()
    var owner = caster.getOwner()
    var range = RADAR_RANGE
    var efx = addEffect(Abilities.thunderclapCaster, casterPos)
    efx.setScale(1.5)
    efx.setTimeScale(1.5)
    efx.destr()

    if caster.hasAbility('BHbd')
        range = IMPROVED_RADAR_RANGE

    forUnitsInRange(caster.getPos(), range) u ->
        if u.getOwner().isEnemyOf(caster.getOwner())

            //Unsub scout Radar
            if unitId.has(UNSUB_RADAR_PING)
                if u.getTypeId() == UNIT_ELK
                    PingMinimapForForceEx(GetPlayersAllies(owner), u.getPos().x, u.getPos().y, 5, bj_MINIMAPPINGSTYLE_SIMPLE, 0, 255, 0)
                else if DONT_PING_THOSE_LIST.has(u.getTypeId()) == false
                    PingMinimapForForceEx(GetPlayersAllies(owner), u.getPos().x, u.getPos().y, 5, bj_MINIMAPPINGSTYLE_SIMPLE, 255, 0, 0)
            else if unitId.has(u.getTypeId())
                PingMinimapForForceEx(GetPlayersAllies(owner), u.getPos().x, u.getPos().y, 5, bj_MINIMAPPINGSTYLE_SIMPLE, red, green, blue)

        //Will ping tradeship
        else if unitId.has(u.getTypeId()) and TRADESHIP_LIST.has(u.getTypeId())
            PingMinimapForForceEx(GetPlayersAllies(owner), u.getPos().x, u.getPos().y, 5, bj_MINIMAPPINGSTYLE_SIMPLE, red, green, blue)


@compiletime
function buildSpells()
    getRadarSpells().forEach(spell -> spell.buildSpell())

init
    registerSpellEffectEvent(ABILITY_PING_ENEMY       , () -> onCast(asList(UNSUB_RADAR_PING) , 0   , 0   , 255 ))
    registerSpellEffectEvent(ABILITY_SPY_PING_ENEMY   , () -> onCast(asList(UNSUB_RADAR_PING) , 0   , 0   , 255 ))
    registerSpellEffectEvent(ABILITY_PING_ELK         , () -> onCast(asList(UNIT_ELK)         , 0   , 255 , 0   ))
    registerSpellEffectEvent(ABILITY_PING_HAWK        , () -> onCast(asList(UNIT_HAWK)        , 0   , 255 , 255 ))
    registerSpellEffectEvent(ABILITY_PING_LIVING_CLAY , () -> onCast(asList(UNIT_LIVING_CLAY) , 255 , 0   , 255 ))
    registerSpellEffectEvent(ABILITY_PING_TROLL       , () -> onCast(TROLL_UNIT_LIST          , 255 , 0   , 255 ))

    registerSpellEffectEvent(ABILITY_PING_HOSTILE_ANIMALS , () -> onCast(HOSTILE_ANIMALS_LIST                   , 255 , 128 , 0   ))
    registerSpellEffectEvent(ABILITY_PING_BUILDING        , () -> onCast(BUILDING_LIST                          , 255 , 102 , 102 ))
