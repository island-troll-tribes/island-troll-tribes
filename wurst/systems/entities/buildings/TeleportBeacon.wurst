package TeleportBeacon
import Building
import ChannelAbilityPreset
import LinkedList
import HashMap
import ClosureEvents
import UnitExtensions
import TerrainUtils
import SimError
import LocalObjectIDs
import Assets
import ToolTipsUtils


constant ABILITY_TELEPORT_BEACON = compiletime(ABIL_ID_GEN.next())
constant RANGE = [0.0, 700, 1100]
constant rangeCheckModFirst = Doodads.glowingRunes2
constant mirrorEfx = Abilities.blinkTarget

constant TOOLTIP_EXT = "Teleports a friendly unit around the Teleportation Beacon 180Â°."

@compiletime function createTeleportAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_TELEPORT_BEACON, 2, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 2.5)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetTargetsAllowed(lvl -> commaList(
            TargetsAllowed.friend,
            TargetsAllowed.organic,
            TargetsAllowed.ground
            )
        )
        ..setHotkeyNormal("Q")
        ..setName("Teleport Mirror")
        ..presetTooltipNormal(lvl -> makeToolTipNormHero("Q", "Teleport Mirror", lvl))
        ..setTooltipNormalExtended(1, TOOLTIP_EXT + " Can be upgraded by putting a Magic into the teleport beacon.")
        ..setTooltipNormalExtended(2, TOOLTIP_EXT)
        ..setIconNormal(Icons.bTNWispSplode)
        ..setIconResearch(Icons.bTNWispSplode)
        ..setIconTurnOff(Icons.bTNWispSplode)
        ..presetButtonPosNormal(0, 0)
        ..setFollowThroughTime(1, 1.0)
        ..setArtEffect(Abilities.disenchantSpecialArt)
        ..setCasterAttachmentPoint("overhead")
        ..presetOption(Option.VISIBLE, true)
        ..setCastRange(1, RANGE[1])
        ..setCastRange(2, RANGE[2])


public class TeleportBeacon extends Building
    private static let unitTypeId = UNIT_TELEPORTATION_BEACON

    static function initialize()
        register(unitTypeId, building -> new TeleportBeacon(building))

    private let effects = new IterableMap<player, LinkedList<effect>>()

    construct(unit whichUnit)
        super(whichUnit)
        EventListener.add(whichUnit, EVENT_PLAYER_UNIT_SELECTED, -> onSelected())
        EventListener.add(whichUnit, EVENT_PLAYER_UNIT_DESELECTED, -> onDeselected())
        EventListener.add(whichUnit, EVENT_PLAYER_UNIT_PICKUP_ITEM, -> onPickupItem())
        EventListener.add(whichUnit, EVENT_PLAYER_UNIT_SPELL_CAST, -> onCast())

    private function onPickupItem()
        let pickedUp = GetManipulatedItem()
        if pickedUp.getTypeId() != ITEM_MAGIC
            return

        let beacon = getUnit()
        if beacon.getAbilityLevel(ABILITY_TELEPORT_BEACON) > 1
            return

        pickedUp.remove()
        beacon.incAbilityLevel(ABILITY_TELEPORT_BEACON)
        flashEffect(Abilities.tomeOfRetrainingCaster, beacon, "origin")

    private function onSelected()
        let whichPlayer = GetTriggerPlayer()

        if effects.has(whichPlayer)
            return

        let beacon = getUnit()
        let level = beacon.getAbilityLevel(ABILITY_TELEPORT_BEACON)
        let range = RANGE[level]
        let beaconPos = beacon.getPos()
        let list = new LinkedList<effect>()
        let path = localPlayer == whichPlayer ? rangeCheckModFirst : ""

        for degs = 0 to 340 step 20
            let angle = degs.toReal().fromDeg()
            let pos = beaconPos.polarOffset(angle, range)
            list.add(addEffect(path, pos))

        effects.put(whichPlayer, list)

    private function onDeselected()
        let whichPlayer = GetTriggerPlayer()
        if effects.has(whichPlayer)
            removeList(whichPlayer)

    private function removeList(player whichPlayer)
        let list = effects.get(whichPlayer)
        for elem in list
            elem.destr()
        destroy list
        effects.remove(whichPlayer)

    private function onCast()
        if GetSpellAbilityId() != ABILITY_TELEPORT_BEACON
            return

        let target = GetSpellTargetUnit()
        if target.isImmobilized()
            return

        let beacon = getUnit()
        let beaconPos = beacon.getPos()
        let targetPos = target.getPos()
        let pos = 2 * beaconPos - targetPos

        if GetWorldBounds().contains(pos) and pos.isTerrainWalkable()
            flashEffect(Abilities.deathPactTarget, beacon, "overhead")
            flashEffect(Abilities.blinkCaster, target.getPos())
            target
            ..setPos(pos)
            ..setFacing(targetPos.angleTo(beaconPos))
            flashEffect(mirrorEfx, target.getPos())
        else
            beacon.issueImmediateOrder("stop")
            simError(target.getOwner(), "Can't teleport there")

    override function postCreate()
        super.postCreate()

        getUnit().addAbility(ABILITY_TELEPORT_BEACON)

    ondestroy
        for whichPlayer in effects
            removeList(whichPlayer)
        destroy effects


init
    TeleportBeacon.initialize()
