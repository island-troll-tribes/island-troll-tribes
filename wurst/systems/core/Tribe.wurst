package Tribe

// Standard library imports:
import HashMap
import LinkedList

// Third-party imports:
import Lodash
import LodashExtensions

// Local imports:
import ColorUtils
import GameConfig
import GameMode
import TribeUtils
import PlayerExtensions
import initlater TribeBoard
import initlater Boards
import initlater ScoreBoard

let listeners = CreateTrigger()

public function registerTribeInitializationFinishEvent(code listener)
    listeners.addAction(listener)

let names = asList(
    "Darkspear",
    "Windfury",
    "Zanku",
    "Ganja",
    "Snaketongue",
    "Zaldeer",
    "Kuzu",
    "Juan'ji",
    "Bloodtusk",
    "Bonecoat",
    "Hydra",
    "Puma",
    "Firewater",
    "Woodland"
)

public class Tribe
    static let playerToTribeMap = new HashMap<player, Tribe>()
    static let tribes = new OwnedLinkedList<Tribe>()

    static let isNotDefeated = Predicate.owned<Tribe>(tribe -> not tribe.isDefeated())
    static let memberIsDead = Predicate.owned<player>(member -> not member.getTroll().isAlive())
    static let hasNoAliveMembers = Predicate.owned<Tribe>(tribe -> tribe.getMembers().every(memberIsDead))

    int tribeId
    rect spawn
    let tribePlayers = new OwnedLinkedList<player>()
    let tribe = CreateForce()
    let name = ""
    var defeated = true

    static function initialize()
        GameMode.onModeSelectionFinish(function onModesFinish)

    static function onModesFinish()
        resetAllianceState()
        let numTribes = gameConfig.getNumTribes()
        names.shuffle()
        for tribeId = 0 to numTribes - 1
            new Tribe(tribeId, names.dequeue() + " Tribe")
        listeners.execute()

    static function resetAllianceState()
        for i = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
            for j = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
                if i != j
                    SetPlayerAllianceStateBJ(players[i], players[j], bj_ALLIANCE_UNALLIED)

    static function getTribes() returns LinkedList<Tribe>
        return tribes

    static function ofPlayer(player query) returns Tribe
        return playerToTribeMap.get(query)

    construct(int id, string name)
        this.tribeId = id
        this.name = name

        let range = getPlayerIdRangeForTribe(tribeId)
        for pid = range.min to range.max
            let member = players[pid]
            if member.isIngame() and not member.isObserver()
                addMember(member)
                defeated = false

        if this.getMembers().size() > 0
            let tribePlayer = getNonMember()
            tribePlayer.setName(name)
            this.addNonMemberPlayer(tribePlayer)

        for a in tribePlayers
            // Automatically share vision and control with the non-member player.
            // TODO: Maybe remove this when privating.
            SetPlayerAllianceStateBJ(a, getNonMember(), bj_ALLIANCE_ALLIED_VISION)
            SetPlayerAllianceStateBJ(getNonMember(), a, bj_ALLIANCE_ALLIED_ADVUNITS)
            SetPlayerAllianceStateBJ(a, getNonMember(), bj_ALLIANCE_ALLIED_ADVUNITS)
            for b in tribePlayers
                if a != b
                    SetPlayerAllianceStateBJ(a, b, bj_ALLIANCE_ALLIED_VISION)
                    a.setPlayerAlliance(b, ALLIANCE_SHARED_ADVANCED_CONTROL, true)

        if not defeated
            tribes.push(this)

    function addMember(player member)
        tribePlayers.push(member)
        playerToTribeMap.put(member, this)
        tribe.addPlayer(member)

    function addNonMemberPlayer(player shared)
        playerToTribeMap.put(shared, this)
        tribe.addPlayer(shared)

    function getId() returns int
        return tribeId

    function isDefeated() returns bool
        return defeated

    function makePlayersObservers()
        getMembers().forEach() member ->
            member.makeObserver()

            // Removing the tribeboard
            TribeBoard.findForPlayer(member).board.display(member, false)

            // Enabling the score board, maximizing it so the player doesn't miss it
            scoreBoard.board..display(member, true)..maximize(member)

    function displayDefeated()
        // Displaying which tribe has been defeated to every player & observer
        // Might be redondant with the "You have won/been defeated" but I think that's passable
        printTimed("The ".color(ENERGY_COLOR) + this.name.color(SPECIAL_COLOR) + " tribe has been defeated".color(ENERGY_COLOR), 7)

    function wasDefeated()
        makePlayersObservers()
        defeated = true
        scoreBoardEntries.get("PlayerName")
            .updateEntry(this.name, this.name, iconPlayerDefeated)

        if tribe.containsPlayer(GetLocalPlayer())
            print("You have been defeated.".color(HIGHLIGHT_COLOR))
        displayDefeated()

    function wasVictorious()
        makePlayersObservers()
        if tribe.containsPlayer(GetLocalPlayer())
            print("You have won! Please play again!".color(HIGHLIGHT_COLOR))

    function getForce() returns force
        return tribe

    function getMembers() returns LinkedList<player>
        return tribePlayers

    function getNonMember() returns player
        return players[12 + tribeId]

    function setSpawn(rect _spawn)
        spawn = _spawn

    function getSpawn() returns rect
        return spawn

    function getName() returns string
        return name

init
    Tribe.initialize()
