package BushSpawns

// Standard library imports:
import HashMap
import ClosureTimers

// Local imports:
import Indicators
import LocalObjectIDs
import ItemPoolExtensions
import UnitExtensions

let BUSH_SPAWN_PERIOD = 0.1

class BushPool
    // The global collection of all bushes.
    static let bushes = CreateGroup()

    // The mapping used to lookup an itempool for a unit type.
    static let map = new HashMap<int, thistype>()

    // Looks up the registered pool for the given unit type.
    static function findForUnitId(int unitId) returns thistype
        return map.get(unitId)

    // The itempool being wrapped.
    let pool = CreateItemPool()

    // Assume that all bushes are created via indicators.
    construct(int unitID, int indicatorID)
        // Register the ID to map a unit to an itempool.
        map.put(unitID, this)

        // Use indicators to place bushes on the map.
        registerIndicator(indicatorID, unitID)

        // Add the unit to the collective group of bushes upon creation.
        registerCallback(unitID) (unit target) ->
            bushes.addUnit(target)

    // Forward the call to the itempool.
    function addItem(int itemId, real weight)
        pool.addItemType(itemId, weight)

    // Forward the call to the itempool.
    function getItem(vec2 pos) returns item
        return pool.placeRandomItem(pos)

function addItemToBush(unit target)
    // Ignore units that have been modified and are no longer viable.
    if target == null or not target.isAlive()
        return

    // Randomly choose the item being created.
    let choice = BushPool
        .findForUnitId(target.getTypeId())
        .getItem(target.getPos())

    // Allow the itempool to miss.
    if target != null
        // Check that the target has room for the item.
        if not target.addOrStackItem(choice)
            // Remove the item if no room was available.
            choice.remove()

public function addItemsToBushes()
    // Use an iterator to distribute the bush spawns over a period.
    let iter = BushPool.bushes.iterator()

    // Begin the spawns, delaying to disperse computation.
    doPeriodicallyCounted(BUSH_SPAWN_PERIOD, BushPool.bushes.size()) cb ->
        // Perform the current operation.
        addItemToBush(iter.next())

        // Clean up resources on the final iteration.
        if cb.isLast()
            iter.close()

init
    new BushPool(UNIT_THIEFS_BUSH, 'd106')
        ..addItem(ITEM_NETS,           15)
        ..addItem(ITEM_MANA_CRYSTAL,   15)
        ..addItem(ITEM_SMOKE_BOMB,     15)
        ..addItem(ITEM_MANA_POTION,    15)
        ..addItem(ITEM_HEALING_POTION, 15)
        ..addItem(ITEM_BEE_HIVE,        5)
        ..addItem(ITEM_THIEF_MED,       5)
        ..addItem(ITEM_SPIRIT_WATER,    5)
        ..addItem(ITEM_DRUNKS_POTION,   5)
        ..addItem(ITEM_NETHER_POTION,   5)

    new BushPool(UNIT_SCOUTS_BUSH, 'd105')
        ..addItem(ITEM_LIVING_CLAY,    4)
        ..addItem(ITEM_CLAY_EXPLOSION, 1)

    new BushPool(UNIT_HIDDEN_STASH, 'd001')
        ..addItem(ITEM_ACORN,       4)
        ..addItem(ITEM_CLAY_BALL,   1)
        ..addItem(ITEM_MAGIC_ACORN, 1)

    new BushPool(UNIT_MUSHROOM_COLONY, 'd102')
        ..addItem(ITEM_MUSHROOM, 1)

    new BushPool(UNIT_THISTLE_SHRUB, 'd107')
        ..addItem(ITEM_THISTLES, 1)

    new BushPool(UNIT_BLUE_HERB_BUSH, 'd101')
        ..addItem(ITEM_BLUE_HERB, 1)

    new BushPool(UNIT_ORANGE_HERB_BUSH, 'd103')
        ..addItem(ITEM_ORANGE_HERB, 1)

    new BushPool(UNIT_YELLOW_HERB_BUSH, 'd109')
        ..addItem(ITEM_YELLOW_HERB, 1)

    new BushPool(UNIT_PURPLE_HERB_BUSH, 'd104')
        ..addItem(ITEM_PURPLE_HERB, 1)

    new BushPool(UNIT_ATHELAS_BUSH, 'd100')
        ..addItem(ITEM_ATHELAS_SEED, 1)

    new BushPool(UNIT_WATER_HERB_BUSH, 'd108')
        ..addItem(ITEM_RIVER_ROOT, 1)
        ..addItem(ITEM_RIVER_STEM, 1)

    // Remove all Scout Bushes, as per #502, pending playtesting.
    // TODO: Properly remove the indicator units once playtesting is complete.
    registerCallback(UNIT_SCOUTS_BUSH) (unit target) ->
        target.remove()
