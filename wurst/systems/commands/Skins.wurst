package Skins

// Standard library imports:
import ClosureTimers
import HashMap
import LinkedList
import OnUnitEnterLeave

// Local imports:
import ChatCommands
import Classes
import ColorUtils
import Feature
import LocalObjectIDs
import PlayerFeature
import StringExtensions
import Transformation

let TIMEOUT = 10.0

// The base message used for notifying users of the exchange.
let MSG = compiletime(
    asList(
        "Congratulations on unlocking a skin for this class! Type".color(GENERAL_COLOR),
        "-{0}".color(ENERGY_COLOR),
        "within the next".color(GENERAL_COLOR),
        TIMEOUT.toInt().toString().color(HIGHLIGHT_COLOR),
        "seconds to use.".color(GENERAL_COLOR)
    ).joinBy(" ")
)

class CustomSkin
    static let customSkinList = new HashMap<integer, thistype>()

    integer newUnitTypeId
    string featureName

    construct(integer unitTypeId, integer newUnitTypeId, string featureName)
        this.newUnitTypeId = newUnitTypeId
        this.featureName = featureName
        customSkinList.put(unitTypeId, this)

        // Register the transformation used to provide the model.
        registerTransformation(unitTypeId, newUnitTypeId)

        // Register the transformation used to inverse the change.
        registerTransformation(newUnitTypeId, unitTypeId)

        // Undo the transformation prior to any other ones.
        registerPriorEffect() (unit target, int unitID) ->
            // Verify that the current transformation involves this skin.
            if target.getTypeId() == newUnitTypeId
                // Avoid repeating this callback recursively.
                transformUnit(target, unitTypeId)

// This function is called externally.
// TODO: This won't work with the new transformation registration methodology.
//       See the associated PR for an in-depth explanation.
//       This is not fixed part of it because skins are currently defunct.
@compiletime function buildSkins()
    new CustomSkin(UNIT_BEAST_MASTER,  UNIT_BEAST_MASTER_1,  "skin-bm-1"     )
    new CustomSkin(UNIT_HUNTER,        UNIT_HUNTER_1,        "skin-hunter-1" )
    new CustomSkin(UNIT_MAGE,          UNIT_MAGE_1,          "skin-mage-1"   )
    new CustomSkin(UNIT_MASTER_HEALER, UNIT_MASTER_HEALER_1, "skin-mh-1"     )
    new CustomSkin(UNIT_BOOSTER,       UNIT_BOOSTER_1,       "skin-booster-1")
    new CustomSkin(UNIT_ELEMENTALIST,  UNIT_ELEMENTALIST_1,  "skin-ele-1"    )

function onEnterHandler(unit target)
    // Store the original type ID of the target.
    let originID = target.getTypeId()

    // Look up the feature corresponding to the custom skin for the unit.
    let skin = CustomSkin.customSkinList.get(originID)

    // Exit if the unit does not have a skin.
    if skin == null
        return

    // Exit if the owner is not enabled for the custom skins.
    if not PlayerFeature.isPlayerEnabled(target.getOwner(), skin.featureName)
        return

    // Notify the owner of the option to use the custom skin.
    target.getOwner().print(MSG.format(skin.featureName), TIMEOUT)

    // Register the command used to switch to the custom skin.
    registerCommand(target.getOwner(), skin.featureName) (owner, args) ->
        // Transform the unit to impart the custom skin.
        // TODO: Generate skins to match trolls and uncomment this.
        // transformUnit(target, skin.newUnitTypeId)

    // Prevent the user from using the transformation during gameplay.
    doAfter(TIMEOUT) ->
        deregisterCommand(target.getOwner(), skin.featureName)

init
    buildSkins()

    // Register the callback used to handle skins for new units.
    onEnter() ->
        onEnterHandler(getEnterLeaveUnit())

    // Register the callback used to handle skins for sub-classes.
    registerAfterEffect() (unit target, int unitID) ->
        // Verify that the unit changed classes.
        if getTrollClassType(target) != getTrollClassType(unitID)
            onEnterHandler(target)

    PlayerFeature
        .get("WorldEdit")
        ..enableFeature("skin-bm-1")
        ..enableFeature("skin-hunter-1")
        ..enableFeature("skin-mage-1")
        ..enableFeature("skin-mh-1")
        ..enableFeature("skin-booster-1")
        ..enableFeature("skin-ele-1")

    Feature
        .get("skin-booster-1")
        ..addPlayer("Quantum")
        ..addPlayer("Mambo")
        ..addPlayer("Davee3")
        ..addPlayer("Bananbuske")
        ..addPlayer("Oh_snap")
        ..addPlayer("Bliss-darkeyes")
        ..addPlayer("Liquid.")
        ..addPlayer("Srup")
        ..addPlayer("Lasvegass")
        ..addPlayer("Kicuch")
        ..addPlayer("Albinoblackbat")
        ..addPlayer("Mephisto.")
        ..addPlayer("Master-Troll")
        ..addPlayer("Scatman33")
        ..addPlayer("Tahsis")
        ..addPlayer("PIC")
        ..addPlayer("Rukhal")
        ..addPlayer("Quazz")
        ..addPlayer("Xan_Xriegor")
        ..addPlayer("Viking.")

    Feature
        .get("skin-hunter-1")
        ..addPlayer("Quantum")
        ..addPlayer("Mambo")
        ..addPlayer("Davee3")
        ..addPlayer("Bananbuske")
        ..addPlayer("Oh_snap")
        ..addPlayer("Bliss-darkeyes")
        ..addPlayer("Liquid.")
        ..addPlayer("Srup")
        ..addPlayer("Lasvegass")
        ..addPlayer("Kicuch")
        ..addPlayer("Albinoblackbat")
        ..addPlayer("Mephisto.")
        ..addPlayer("bmxsesh")
        ..addPlayer("Tahsis")
        ..addPlayer("Quazz")
        ..addPlayer("Xan_Xriegor")
        ..addPlayer("Nik")

    Feature
        .get("skin-mh-1")
        ..addPlayer("Quantum")
        ..addPlayer("Bananbuske")
        ..addPlayer("Oh_snap")

    Feature
        .get("skin-mage-1")
        ..addPlayer("Quantum")
        ..addPlayer("Mambo")
        ..addPlayer("Davee3")

    Feature
        .get("skin-ele-1")
        ..addPlayer("Quantum")
        ..addPlayer("Mambo")

    Feature
        .get("skin-bm-1")
        ..addPlayer("Quantum")
