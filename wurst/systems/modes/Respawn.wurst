package Respawn

// Standard library imports:
import ClosureTimers
import LinkedList
import RegisterEvents

// Local imports:
import ChatCommands
import ColorUtils
import Game
import GameConfig
import GroupExtensions
import ForcedDuel
import Mammoth
import PlayerExtensions
import StringExtensions
import TimerUtils
import UnitExtensions

public constant GRACE_PERIOD_REVIVE_DELAY = 10.0
public constant GRACE_PERIOD_TIMER = getTimer()

function isGracePeriodActive() returns boolean
    return gameConfig.isGracePeriodEnabled() and GRACE_PERIOD_TIMER.getRemaining() > 0

function quadraticReviveDelay(real numSeconds) returns real
    let numMinutes = numSeconds / 60
    return numMinutes * numMinutes

function revive(unit dyingUnit, player owner)
    let spawn = owner.getTribe().getSpawn()
    dyingUnit.revive(spawn.getCenter(), true)
    owner.setGold(udg_MAX_HEAT)
    if GetLocalPlayer() == owner
        PanCameraToTimed(spawn.getCenterX(), spawn.getCenterY(), 0.3)

function respawnTimeHandler(player triggerPlayer, LinkedList<string> args)
    let numSeconds = args.size() > 1 ? args.get(1).toReal() * 60 : GAME_TIMER.getElapsed()
    let respawnTime = quadraticReviveDelay(numSeconds)
    let msg = "{0}Respawn time: |r{1}{2}s|r".format(
        GENERAL_COLOR.toColorString(), ENERGY_COLOR.toColorString(), respawnTime.toInt().toString())
    printTimedToPlayer(msg, 10, triggerPlayer)

function compare(unit a, unit b) returns int
    let aType = a.isType(UNIT_TYPE_STRUCTURE).toInt()
    let bType = a.isType(UNIT_TYPE_STRUCTURE).toInt()
    return aType == bType
        ? a.getLevel() - b.getLevel()
        : aType - bType

init
    registerCommandAll("rt", (triggerPlayer, args) -> respawnTimeHandler(triggerPlayer, args))
    registerCommandAll("respawn-time", (triggerPlayer, args) -> respawnTimeHandler(triggerPlayer, args))

    registerGameStartEvent() ->
        if gameConfig.isGracePeriodEnabled()
            let numSeconds = gameConfig.getGracePeriodDurationMinutes() * 60
            GRACE_PERIOD_TIMER.start(numSeconds) ->
                let msg = "{0}Grace period is over. Now you will not be automatically revived when you die! You can still be revived if your team builds a |c00ff0000Spirit Ward|r{1}!|r".format(GENERAL_COLOR.toColorString(), GENERAL_COLOR.toColorString())
                printTimed(msg, 15)
                MAMMOTH_GATE.kill()
                MAMMOTH_GATE.setAnimation("death alternate")
        else
            MAMMOTH_GATE.kill()
            MAMMOTH_GATE.setAnimation("death alternate")

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        let dyingUnit = GetDyingUnit()

        if dyingUnit.isTroll()
            let owner = dyingUnit.getOwner()

            if isGracePeriodActive()
                let msg = "{0}Grace period has not ended, your troll will revive in {1} seconds|r".format(
                    GENERAL_COLOR.toColorString(), GRACE_PERIOD_REVIVE_DELAY.toInt().toString())
                printTimedToPlayer(msg, 10, owner)

                doAfter(GRACE_PERIOD_REVIVE_DELAY) ->
                    revive(dyingUnit, owner)

            else if gameConfig.isRespawnSystemEnabled()
                let seconds = GAME_TIMER.getElapsed()
                let delay = quadraticReviveDelay(seconds)

                if gameConfig.isForcedDuelEnabled() and delay >= DUEL_TIMER.getRemaining()
                    let msg = "Forced duel approaching, your troll will not revive."
                    printTimedToPlayer(msg, 10, owner)

                else
                    let delayTimer = getTimer()
                    let msg = "Your troll will revive in {0} seconds|r".format(delay.toInt().toString())
                    printTimedToPlayer(msg, 10, owner)

                    let timerDialog = delayTimer.createTimerDialog()
                    let display = GetLocalPlayer().getTribe() == owner.getTribe()
                    timerDialog.setTitle("{0} Respawn".format(owner.getName()))
                    timerDialog.display(display)

                    delayTimer.doAfter(delay) ->
                        timerDialog.display(false)
                        timerDialog.destr()

                        let units = ENUM_GROUP
                            ..enumUnitsOfForce(owner.getAllies())
                            .asList()
                            ..sortWith((a, b) -> compare(a, b))

                        let spawnOn = units.getFirst()
                        let pos = spawnOn.getPos()
                        dyingUnit.revive(pos, true)
                        owner.setGold(udg_MAX_HEAT)
                        if GetLocalPlayer() == owner
                            PanCameraToTimed(pos.x, pos.y, 0.3)

                        destroy units
