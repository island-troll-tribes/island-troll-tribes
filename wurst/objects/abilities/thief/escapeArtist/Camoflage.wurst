package Camoflage

import ChannelAbilityPreset
import LocalObjectIDs
import Lodash
import Assets
import ToolTipsUtils
import BuffObjEditing

let COOLDOWN = 30.
let MANACOST = 0
let DURATION = 0
let TOOLTIP_NORM = "Camouflage"
let TOOLTIP_EXTENDED = "Stand Next to a tree and cast to turn invisible. You can not move or cast spells or it "+
                        "breaks the invisibility. While invisible, you lose 3x as many stats as normal. Has {0} seconds cooldown."
                        .format(COOLDOWN.toToolTipLightBlue())

// Didn't understand how the chech nearby tree condition worked in jurst so I just recoded those

function createBuff()
    new BuffDefinition(BUFF_CAMOFLAGE, BuffIds.invisibility)
        ..setIcon(Icons.bTNAmbush)
        ..setTooltipNormal(1, TOOLTIP_NORM)
        ..setTooltipNormalExtended(1, "This unit is camouflaged with the trees, but loses 3x the stats.")


class Camoflage extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.presetManaCost(lvl -> MANACOST)
        this.presetCooldown(lvl -> COOLDOWN)
        this.setHeroAbility(false)
        this.setItemAbility(false)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_EXTENDED)
        this.setIconNormal(Icons.bTNAmbush)
        this.setIconResearch(Icons.bTNAmbush)
        this.setIconTurnOff(Icons.bTNAmbush)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setFollowThroughTime(1, 1)
        this.setAnimationNames("death")


@compiletime function createCamouflage()
    new Camoflage(ABILITY_CAMOFLAGE, "Q", new Pair(0, 0))
    new Camoflage(ABILITY_AS_CAMOFLAGE, "D", new Pair(2, 1))
