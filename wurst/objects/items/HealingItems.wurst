package HealingItems

// Standard Lib Imports:
import HashMap
import ClosureEvents
import Assets
import ObjectIdGenerator
import ObjectIds
import ItemObjEditing

// Local Imports:
import Items
import HealingSystem
import LocalObjectIDs
import LocalAssets
import ToolTipsUtils

// TODO: Remove this and register the healing in the package directly.
import HealingPotion

constant ABIL_MEAT   = compiletime(ABIL_ID_GEN.next())
constant ABIL_BANANA = compiletime(ABIL_ID_GEN.next())
constant ABIL_HONEY  = compiletime(ABIL_ID_GEN.next())

constant MEAT_ICON   = Icons.bTNMonsterLure
constant BANANA_ICON = LocalIcons.bTNBanana
constant HONEY_ICON  = LocalIcons.bTNHoneycomb

constant MEAT_MODEL   = LocalItems.ham
constant BANANA_MODEL = LocalItems.banana
constant HONEY_MODEL  = LocalItems.honeycomb

public constant MEAT_HEAL   = 50.
public constant BANANA_HEAL = 38.
public constant HONEY_HEAL  = 90.

constant TT_MEAT  = "A well done steak. Instantly heals {0} health point on use.".format(MEAT_HEAL.toToolTipGreen())
constant TT_BANANA = "A banana left by an animal. Restores {0} health point on use.".format(BANANA_HEAL.toToolTipGreen())
constant TT_HONEY = "A portion of honeycomb left by an animal. Restores {0} health point on use.".format(HONEY_HEAL.toToolTipGreen())

@compiletime function createHealingItems()
    createItemBerserkCast(ABIL_MEAT)
        ..setName("Cooked Meat Heal")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

    createItemBerserkCast(ABIL_BANANA)
        ..setName("Banana Heal")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

    createItemBerserkCast(ABIL_HONEY)
        ..setName("Honeycomb Heal")
        ..setCooldown(1, 0)
        ..setArtCaster(Abilities.healTarget)

@compiletime function createCookedMeat() returns ItemDefinition
    return createPerishableItem(ITEM_COOKED_MEAT)
        ..setInterfaceIcon(MEAT_ICON)
        ..setModelUsed(MEAT_MODEL)
        ..setName("Cooked Meat")
        ..setTooltipExtended(TT_MEAT)
        ..setDescription(TT_MEAT)
        ..setLumberCost(2)
        ..setScalingValue(0.85)
        ..setTintingColor1Red(255)
        ..setTintingColor2Green(160)
        ..setTintingColor3Blue(125)
        ..setAbilities(ABIL_MEAT.toRawCode())
        ..setCooldownGroup(ABIL_MEAT.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")

@compiletime function createBanana() returns ItemDefinition
    return createPerishableItem(ITEM_BANANA)
        ..setInterfaceIcon(BANANA_ICON)
        ..setModelUsed(BANANA_MODEL)
        ..setName("Banana")
        ..setTooltipExtended(TT_BANANA)
        ..setDescription(TT_BANANA)
        ..setLumberCost(2)
        ..setScalingValue(0.8)
        ..setAbilities(ABIL_BANANA.toRawCode())
        ..setCooldownGroup(ABIL_BANANA.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")

@compiletime function createMagicBanana() returns ItemDefinition
    return createPerishableItem(ITEM_HONEYCOMB)
        ..setInterfaceIcon(HONEY_ICON)
        ..setModelUsed(HONEY_MODEL)
        ..setName("Honeycomb")
        ..setTooltipExtended(TT_HONEY)
        ..setDescription(TT_HONEY)
        ..setLumberCost(10)
        ..setScalingValue(0.8)
        ..setAbilities(ABIL_HONEY.toRawCode())
        ..setCooldownGroup(ABIL_HONEY.toRawCode())
        ..setNumberofCharges(1)
        ..setClassification("Purchasable")


HashMap<int, real> itemSelfHealAmount = null
HashMap<int, real> itemTargetedHealAmount = null


function initHealItemTable()
    itemSelfHealAmount = new HashMap<int,real>()
    itemSelfHealAmount.put(ITEM_COOKED_MEAT, MEAT_HEAL)
    itemSelfHealAmount.put(ITEM_SMOKED_MEAT, 40.)
    itemSelfHealAmount.put(ITEM_BANANA, BANANA_HEAL)
    itemSelfHealAmount.put(ITEM_HONEYCOMB, HONEY_HEAL)

function initHealAbilityTable()
    itemTargetedHealAmount = new HashMap<int,real>()
    itemTargetedHealAmount.put(ABILITY_HEALING_POTION, POT_HEAL)


function onSelfHealItem()
    let itm = GetManipulatedItem()
    let itemId = itm.getTypeId()
    let user = GetManipulatingUnit()
    if itemSelfHealAmount.has(itemId)
        new HealingInstance(user, itemSelfHealAmount.get(itemId), HealingType.ITEM)

function onSpellEffect()
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()
    let spellId = GetSpellAbilityId()

    if itemTargetedHealAmount.has(spellId)
        new HealingInstance(target, caster, itemTargetedHealAmount.get(spellId), HealingType.ITEM)

init
    initHealItemTable()
    initHealAbilityTable()
    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM) ->
        onSelfHealItem()
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
        onSpellEffect()
