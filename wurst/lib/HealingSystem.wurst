package HealingSystem

// Standard library imports:
import StandardTextTags

trigger eventTrigger = CreateTrigger()
HealingInstance eventHealing = null

/** Gets the class instance of the current healing event.
Can be modified during the event to change the healing done via multiplier or amount.*/
public function getHealingInstance() returns HealingInstance
    return eventHealing

/** Only supports healing done by HealingSystem package. So no support stock WC3 healing abilities. */
public function onUnitHealed(code c) returns triggercondition
    return eventTrigger.addCondition(Condition(c))

public enum HealingType
    ITEM
    ABILITY
    OTHER

public class HealingInstance
    HealingType healingType

    // The amount that the target will be healed.
    real amount

    // The actual amount the target will heal based on its current health.
    real trueAmount

    // The factor that the healing will be scaled by.
    real multiplier

    // The unit to be healed.
    unit target

    // The unit responsible for the healing.
    unit caster

    /** Creates a new HealingInstance, fires onUnitHealed events for it and applies the healing after possible event modifications */
    construct(unit target, real amount, HealingType healingType)
        this.healingType = healingType
        this.amount = amount
        // Compute the actual amount of health to be healed.
        // TODO: Fire a separate event after healing with the true amount.
        this.trueAmount = min(target.getMissingHP(), amount)
        this.multiplier = 1
        this.target = target
        this.caster = target
        execute()

    construct(unit target, unit caster, real amount, HealingType healingType)
        this.healingType = healingType
        this.amount = amount
        // Compute the actual amount of health to be healed.
        // TODO: Fire a separate event after healing with the true amount.
        this.trueAmount = min(target.getMissingHP(), amount)
        this.multiplier = 1
        this.target = target
        this.caster = caster
        execute()

    private function fireHealingEvent()
        let prev = eventHealing
        eventHealing = this
        eventTrigger.evaluate()
        eventHealing = prev

    private function execute()
        // Fire callbacks to modify the instance.
        this.fireHealingEvent()

        // Compute the final amount to be healed.
        let modifiedHealAmount = this.amount * this.multiplier

        // Perform the operation.
        target.setHP(target.getHP() + modifiedHealAmount)

        // Create a text tag to visualize the effect.
        standardTextTag(
            target.getPos(),
            "+{0}".format(modifiedHealAmount.floor().toString())
        )
            ..setColor(colorA(31, 191, 0, 255))
            ..matchVisibility(this.target)

        // Destroy upon completion.
        destroy this

    function reduceHealAmount(real reduction) returns real
        this.amount = max(0, this.amount - reduction)
        return this.multiplier

    function increaseHealAmount(real increase) returns real
        this.amount = max(0, this.amount + increase)
        return this.multiplier

    function reduceMultiplier(real reduction) returns real
        this.multiplier = max(0, this.multiplier - reduction)
        return this.multiplier

    function increaseMultiplier(real increase) returns real
        this.multiplier = max(0, this.multiplier + increase)
        return this.multiplier

    function scaleMultiplier(real factor) returns real
        this.multiplier = max(0, this.multiplier * factor)
        return this.multiplier

    function getAmount() returns real
        return this.amount

    function getTrueAmount() returns real
        return this.trueAmount

    function getTarget() returns unit
        return this.target

    function getCaster() returns unit
        return this.caster

    function getHealingType() returns HealingType
        return this.healingType
