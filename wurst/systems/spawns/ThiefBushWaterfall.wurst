package ThiefBushWaterfall
import HashMap
import JumpSystem
import TerrainUtils
import ErrorHandling

@configurable let THIEF_BUSH_WATERFALL_HEIGHT = 140.0
@configurable let THIEF_BUSH_WATERFALL_DURATION = 1.0
@configurable let THIEF_BUSH_WATERFALL_GRAVITY = 50.0

let entranceToExitMap = new HashMap<region, rect>()

function waterfallEntrance()
    let hero = GetEnteringUnit()
    if hero.isType(UNIT_TYPE_GROUND)
        let exit = entranceToExitMap.get(GetTriggeringRegion())
        var dest = exit.randomPoint()
        for i = 1 to 15
            //15 Attempts to random a walkable spot
            if i == 15
                error("Couldnt find a random point in waterfall exit region!")
            if not dest.isTerrainWalkable()
                dest = exit.randomPoint()
            else
                break
        waterFallJump(hero, dest)

init
    let thiefBushEntrance_NW_A = CreateRegion()..addRect(gg_rct_Thief_Bush_NW_A_In)
    let thiefBushEntrance_NE_A = CreateRegion()..addRect(gg_rct_Thief_Bush_NE_A_In)
    let thiefBushEntrance_NE_B = CreateRegion()..addRect(gg_rct_Thief_Bush_NE_B_In)
    let thiefBushEntrance_SE_A = CreateRegion()..addRect(gg_rct_Thief_Bush_SE_A_In)
    let thiefBushEntrance_SW_A = CreateRegion()..addRect(gg_rct_Thief_Bush_SW_A_In)
    let thiefBushEntrance_SW_C = CreateRegion()..addRect(gg_rct_Thief_Bush_SW_C_In)

    entranceToExitMap
    ..put(thiefBushEntrance_NW_A, gg_rct_Thief_Bush_NW_A_Out)
    ..put(thiefBushEntrance_NE_A, gg_rct_Thief_Bush_NE_A_Out)
    ..put(thiefBushEntrance_NE_B, gg_rct_Thief_Bush_NE_B_Out)
    ..put(thiefBushEntrance_SE_A, gg_rct_Thief_Bush_SE_A_Out)
    ..put(thiefBushEntrance_SW_A, gg_rct_Thief_Bush_SW_A_Out)
    ..put(thiefBushEntrance_SW_C, gg_rct_Thief_Bush_SW_C_Out)

    CreateTrigger()
    ..registerEnterRegion(thiefBushEntrance_NW_A, null)
    ..registerEnterRegion(thiefBushEntrance_NE_A, null)
    ..registerEnterRegion(thiefBushEntrance_NE_B, null)
    ..registerEnterRegion(thiefBushEntrance_SE_A, null)
    ..registerEnterRegion(thiefBushEntrance_SW_A, null)
    ..registerEnterRegion(thiefBushEntrance_SW_C, null)
    ..addCondition(Condition(function waterfallEntrance))

