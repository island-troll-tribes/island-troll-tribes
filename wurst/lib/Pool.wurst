package Pool
import HashMap
import ErrorHandling

public class Pool<T>
    var totalWeight = 0
    let options = new IterableMap<T, int>()

    function add(int weight, T t)
        totalWeight += weight
        options.put(t, weight)

    function add(T t)
        add(1, t)

    function random() returns T
        var rand = GetRandomInt(1, totalWeight)
        let iter = options.iterator()
        for key from iter
            let weight = options.get(key)
            rand -= weight
            if rand <= 0
                iter.close()
                return key

        // we shouldn't reach here...
        error("ERROR: pool.random() returned null!")
        iter.close()
        return null

    function remove(T t)
        if not options.has(t)
            error("Invalid pool access")

        let value = options.get(t)
        totalWeight -= value
        options.remove(t)

    function update(int weight, T t)
        if not options.has(t)
            error("Invalid pool access")

        let value = options.get(t)
        totalWeight -= value
        options.put(t, weight)

    function get(T t) returns int
        if not options.has(t)
            error("Invalid pool access")

        return options.get(t)


@Test
function test()
    let pool = new Pool<int>()
        ..add(1)
        ..add(2)
        ..add(3)

    pool.random().assertGreaterThan(0)
    pool.random().assertLessThan(4)
