package DementiaRunesNew

// Standard library imports:
import Assets
import ChannelAbilityPreset
import HashMap
import ClosureTimers
import LinkedList
import Orders
import RegisterEvents

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import ToolTipsUtils

let MANACOST = 15
let COOLDOWN  = 20.

let TOOLTIP_NORM_NEL = "Summon Nel Rune"
let TOOLTIP_NORM_KA  = "Summon Ka Rune"
let TOOLTIP_NORM_LEZ = "Summon Lez Rune"

let COOLDOWN_TOOLTIP = "Has {0} seconds cooldown.".format(COOLDOWN.toToolTipLightBlue())
let RUNE_TOOLTIP = "They circle the caster until activated and when activated they seek a nearby enemy and blast it with their element. 5 runes at a time max. "

let TOOLTIP_EXT_NEL = "Summons a {0}Nel|r rune from dementia space. {0}Nel|r runes are commonly used in crippling spells. ".format(COLOR_GREEN.toColorString())+RUNE_TOOLTIP+COOLDOWN_TOOLTIP
let TOOLTIP_EXT_KA  = "Summons a {0}Ka|r rune from dementia space. {0}Ka|r runes are commonly used in fire spells. ".format(COLOR_RED.toColorString())+RUNE_TOOLTIP+COOLDOWN_TOOLTIP
let TOOLTIP_EXT_LEZ = "Summons a {0}Lez|r rune from dementia space. {0}Lez|r runes are commonly used in frost spells. ".format(COLOR_TEAL.toColorString())+RUNE_TOOLTIP+COOLDOWN_TOOLTIP

let ICON_NEL = "ReplaceableTextures\\CommandButtons\\BTNNelRune.blp"
let ICON_KA  = "ReplaceableTextures\\CommandButtons\\BTNKaRune.blp"
let ICON_LEZ = "ReplaceableTextures\\CommandButtons\\BTNLezRune.blp"

let LOOP_INTERVAL      = 0.03125
let ORBIT_ANGULARSPEED = 80.
let ORBIT_DISTANCE     = 170.
let MAX_RUNE_COUNT     = 5

// Spells Casted by Runes
let RUNE_ABILITY_FIRE_BOLT    = 'A07C'
let RUNE_ABILITY_BURN         = 'A064'
let RUNE_ABILITY_NULL_DAMAGE  = 'A01Y'
let RUNE_ABILITY_DRUNKEN_HAZE = 'A03E'
let RUNE_ABILITY_FROST_NOVA   = 'A02A'

let RUNE_LEZ_EFFECT_PATH = Doodads.glowingRunes4
let RUNE_NEL_EFFECT_PATH = Doodads.glowingRunes6
let RUNE_KA_EFFECT_PATH  = Doodads.glowingRunes0

let dementiaRunesInstances = new HashMap<unit, DementiaRunesInstance>()
let runeSpellsList = new LinkedList<DementiaRuneSpell>()

public enum Runes
    Nel
    Lez
    Ka
    None

public class DementiaRuneSpell
    int spellId
    int orderId
    string name

    construct(string name, int spellId, int orderId)
        this.name = name
        this.spellId = spellId
        this.orderId = orderId

class InvokeRune extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos, string toolTipNorm, string toolTipExt, string icon)
        super(newAbilityId, 1, true)
        this.setFollowThroughTime(1, 1)
        this.setIconNormal(icon)
        this.setCasterAttachmentPoint1("")
        this.setTargetAttachmentPoint1("")
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setHeroAbility(false)
        this.setManaCost(1, MANACOST)
        this.setCooldown(1, COOLDOWN)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, toolTipNorm))
        this.setTooltipNormalExtended(1, toolTipExt)
        this.setHotkeyNormal(hotkey)
        this.setName(toolTipNorm)

@compiletime function createRuneSpells()
    new InvokeRune(ABILITY_INVOKE_RUNE_1, "W", new Pair(1, 0), TOOLTIP_NORM_NEL, TOOLTIP_EXT_NEL, ICON_NEL)
    new InvokeRune(ABILITY_INVOKE_RUNE_2, "E", new Pair(2, 0), TOOLTIP_NORM_KA , TOOLTIP_EXT_KA , ICON_KA)
    new InvokeRune(ABILITY_INVOKE_RUNE_3, "R", new Pair(3, 0), TOOLTIP_NORM_LEZ, TOOLTIP_EXT_LEZ, ICON_LEZ)

class DementiaRune
    DementiaRunesInstance instance
    Runes runeType
    //effect FX = null
    unit dummy
    vec3 pos

    construct (DementiaRunesInstance instance, Runes runeType)
        this.instance = instance
        pos = instance.ownerUnit.getPos3Real()
        this.runeType = runeType
        if this.runeType == Runes.Lez
            dummy = createUnit(instance.ownerUnit.getOwner(), UNIT_LOCUST_LEZ, pos, angle(0))
        else if this.runeType == Runes.Nel
            dummy = createUnit(instance.ownerUnit.getOwner(), UNIT_LOCUST_NEL, pos, angle(0))
        else if this.runeType == Runes.Ka
            dummy = createUnit(instance.ownerUnit.getOwner(), UNIT_LOCUST_KA, pos, angle(0))
        //FX.setScale(1.5)
        //FX.setTimeScale(0.1)

    function setPos(vec3 newpos)
        pos = newpos
        //Adjust orbs a little lower since the SFX looks like its higher
        //FX.setPos(pos - vec3(0,0,75))
        dummy.setPos(pos.toVec2())
        dummy.setFlyHeight(50, 600)

    function setFacing(angle facing)
        dummy.setFacing(facing)

    function getRandomRuneSpellID() returns DementiaRuneSpell
        if this.runeType == Runes.Ka
            return runeSpellsList.get(GetRandomInt(0, 1))
        else if this.runeType == Runes.Nel
            return runeSpellsList.get(GetRandomInt(2, 3))
        else
            return runeSpellsList.get(4)


    ondestroy
        if instance.runes.has(this)
            instance.runes.remove(this)
        dummy.remove()
        //FX.destr()

public class DementiaRunesInstance
    angle runeAngleBase
    unit ownerUnit
    real elapsedLifetime
    CallbackPeriodic runeLoop = null

    LinkedList<DementiaRune> runes

    construct (unit caster)
        ownerUnit = caster
        elapsedLifetime = 0
        runeAngleBase = angle(0)
        runes = new LinkedList<DementiaRune>()
        startRuneLoop()

    function startRuneLoop()
        runeLoop = doPeriodically(LOOP_INTERVAL) runeUpdateLoop ->
            if ownerUnit.isAlive()
                elapsedLifetime += LOOP_INTERVAL
                runeAngleBase = angle(runeAngleBase.radians() + LOOP_INTERVAL * ORBIT_ANGULARSPEED * DEGTORAD)
                updateRunePositions()
            else
                destroy this

    function updateRunePositions()
        //Calculate orb angles and set it
        angle offset = angle((360 / runes.size())*DEGTORAD)
        int i = 0
        vec3 ownerpos = ownerUnit.getPos3Real()
        for r in runes
            angle indexRuneAngle = runeAngleBase + offset * i.toReal()
            r.setPos(ownerpos.offset2d(indexRuneAngle, ORBIT_DISTANCE))
            r.setFacing(r.pos.angleTo2d(ownerUnit.getPos()))
            i = i + 1

    function addRune(DementiaRune rune)
        if runes.size() < MAX_RUNE_COUNT
            runes.add(rune)
        else
            destroy runes.get(0)
            runes.add(rune)


    ondestroy
        destroy runeLoop

        runes.forEach(r -> destroy r)
        destroy runes

        if dementiaRunesInstances.has(ownerUnit)
            if (dementiaRunesInstances.get(ownerUnit) == this)
                dementiaRunesInstances.remove(ownerUnit)


function onCast()
    var caster = GetSpellAbilityUnit()
    var ID = GetSpellAbilityId()
    Runes runeType = Runes.None

    if ID == ABILITY_INVOKE_RUNE_1
        runeType = Runes.Nel
    else if ID == ABILITY_INVOKE_RUNE_3
        runeType = Runes.Lez
    else if ID == ABILITY_INVOKE_RUNE_2
        runeType = Runes.Ka


    if dementiaRunesInstances.has(caster)
        //If caster has instance, add rune
        var instance = dementiaRunesInstances.get(caster)
        instance.addRune(new DementiaRune(instance, runeType))
    else
        //If caster has no instance, create one
        var instance = new DementiaRunesInstance(caster)
        dementiaRunesInstances.put(caster, instance)
        instance.addRune(new DementiaRune(instance, runeType))

public function getRunesInstance(unit owner) returns DementiaRunesInstance
    if (dementiaRunesInstances.has(owner))
        return dementiaRunesInstances.get(owner)
    else
        return null

function setupRuneSpellsList()
    // Spells Casted by runes
    runeSpellsList.add(new DementiaRuneSpell("Firebolt"     , RUNE_ABILITY_FIRE_BOLT   , Orders.creepthunderbolt))
    runeSpellsList.add(new DementiaRuneSpell("Soul burn"    , RUNE_ABILITY_BURN        , Orders.soulburn))
    runeSpellsList.add(new DementiaRuneSpell("Null damage"  , RUNE_ABILITY_NULL_DAMAGE , Orders.cripple))
    runeSpellsList.add(new DementiaRuneSpell("Drunken haze" , RUNE_ABILITY_DRUNKEN_HAZE, Orders.drunkenhaze))
    runeSpellsList.add(new DementiaRuneSpell("Frost nova"   , RUNE_ABILITY_FROST_NOVA  , Orders.frostnova))

init
    setupRuneSpellsList()
    registerSpellEffectEvent(ABILITY_INVOKE_RUNE_1, () -> onCast())
    registerSpellEffectEvent(ABILITY_INVOKE_RUNE_2,  () -> onCast())
    registerSpellEffectEvent(ABILITY_INVOKE_RUNE_3, () -> onCast())
