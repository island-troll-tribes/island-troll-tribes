package PlayerScore

// Standard-library imports:
import HashMap
import LinkedList
import ClosureTimers
import ClosureEvents
import DamageEvent

// Local imports:
import DamageListeners
import GameMode
import Tribe
import ColorUtils
import GameConfig
import ChatCommands
import HealingSystem
import UnitExtensions
import LocalObjectIDs
import PlayerExtensions
import ScoreBoard


let unitCategories = new IterableMap<LinkedList<int>, string>()
..put(asList(UNIT_ELK        , UNIT_ELK_ADOLESCENT, UNIT_ADULT_ELK  ), "Elk")
..put(asList(UNIT_HAWK       , UNIT_HAWK_ADOLESCENT, UNIT_ALPHA_HAWK), "Hawk")
..put(asList(UNIT_SNAKE                                             ), "Snake")
..put(asList(UNIT_JUNGLE_WOLF, UNIT_ADULT_JUNGLE_WOLF               ), "Wolf")
..put(asList(UNIT_JUNGLE_BEAR, UNIT_ADULT_JUNGLE_BEAR               ), "Bear")
..put(asList(UNIT_PANTHER    , UNIT_ELDER_PANTHER                   ), "Panther")

 // A hashMap to link a player to its score
public let playerScores = new IterableMap<player, Score>


/**
    Store the player's units kill count, damage dealt to troll,
    healing done to ally and gold acquired from selling stuff
**/
public class Score

    static function createScoreMap()
        let tribes = Tribe.getTribes()

        for tribe in tribes
            for member in tribe.getMembers()
                playerScores.put(member, new Score(member))
            playerScores.put(tribe.getNonMember(), new Score(tribe.getNonMember()))

    static function initialize()
        registerTribeInitializationFinishEvent(function createScoreMap)

    IterableMap<string, int> playerKill
    int damageTroll = 0
    int selfHealing = 0
    int allyHealing = 0
    int meatEaten = 0
    int goldAmount = 0
    int previousGoldAmount = 0
    player _player

    construct(player _player)
        this._player = _player
        playerKill = new IterableMap<string, int>()
        ..put("Elk"    , 0)
        ..put("Hawk"   , 0)
        ..put("Snake"  , 0)
        ..put("Wolf"   , 0)
        ..put("Bear"   , 0)
        ..put("Panther", 0)

    /**
        This function compute the gold acquired from selling an item
    **/
    function addGold()
        // Get player gold amount before item sale
        previousGoldAmount = this._player.getLumber()

        // nulltimer neccessary here to get the gold before the sold event gold are added to the player
        nullTimer() ->
            // Substracting new gold amount with previous one to determine the gold acquired by selling the item
            let goldAdded = this._player.getLumber() - previousGoldAmount
            goldAmount += goldAdded
            scoreBoardEntries.get("Gold Acquired").addValue(_player, goldAdded)

    function addSelfHealing(int healingAmount)
        selfHealing += healingAmount

    function addAllyHealing(int healingAmount)
        allyHealing += healingAmount

    function getHealing() returns string
        return getHealingStr(selfHealing, allyHealing)

    function addDamage(int damage)
        damageTroll += damage

    function addKill(string categoryName)
        if categoryName != null
            let killCount = playerKill.get(categoryName)
            playerKill.put(categoryName, killCount + 1)

    function addMeatEaten()
        meatEaten++

    function printScore()
        var msg = ("Damage dealt (troll) : "    .color(GOLD_COLOR) + "{0}\n".color(SPECIAL_COLOR)+
                   "Healing done (self/ally) : ".color(GOLD_COLOR) + "{1}\n".color(SPECIAL_COLOR)+
                   "Gold acquired : "           .color(GOLD_COLOR) + "{2}\n".color(SPECIAL_COLOR)+
                   "Meat Eaten : "              .color(GOLD_COLOR) + "{3}\n".color(SPECIAL_COLOR)
                   ).format(
                       damageTroll.toString(),
                       getHealing(),
                       goldAmount.toString(),
                       meatEaten.toString())

        for killCategory in playerKill
            let name = killCategory
            let killCount = playerKill.get(killCategory).toString()
            msg += ("{0} kill count : ".color(GOLD_COLOR) + "{1}\n").format(name, killCount)
        printTimedToPlayer(msg, 10, this._player)

function getUnitCategory(int unitId) returns string
    for unitType in unitCategories
        if unitType.has(unitId)
            return unitCategories.get(unitType)
    return null

function getHealingStr(int self, int ally) returns string
    return self.toString() + "/" + ally.toString()

function getTribeHealing(player _player) returns string
    let tribe = _player.getTribe()
    var self = 0
    var ally = 0
    for member in tribe.getMembers()
        self += playerScores.get(member).selfHealing
        ally += playerScores.get(member).allyHealing
    return getHealingStr(self, ally)


init

    Score.initialize()
    GameMode.onModeSelectionFinish() ->
        if gameConfig.isPlayerScoreEnabled()
            // Register kill count if unit has been killed by a player
            EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
                let unitKilledId = GetDyingUnit().getTypeId()
                let killerOwner = GetKillingUnit().getOwner()
                let categoryName = getUnitCategory(unitKilledId)

                if playerScores.has(killerOwner)
                    and categoryName != null
                    playerScores.get(killerOwner).addKill(categoryName)
                    scoreBoardEntries.get(categoryName).addValue(killerOwner, 1)


            // Register damage dealt amount if unit damaged is a troll
            DamageEvent.addListener(DamageListenerPriorities.SCORE castTo int) ->
                let attackerOwner = DamageEvent.getSource().getOwner()
                let target = DamageEvent.getTarget()
                let dmgAmount = DamageEvent.getAmount()

                if playerScores.has(attackerOwner)
                    and target.getOwner().isEnemyOf(attackerOwner)
                    and target.isTroll()
                    playerScores.get(attackerOwner).addDamage(dmgAmount.toInt())
                    scoreBoardEntries.get("Damage Dealt")
                        .addValue(attackerOwner, dmgAmount.toInt())


            // Register healing amount if player heals an ally
            onUnitHealed() ->
                let instance = getHealingInstance()
                let caster = instance.getCaster()
                let target = instance.getTarget()
                let healerOwner = caster.getOwner()
                let healingAmount = instance.getTrueAmount()

                if playerScores.has(healerOwner)
                    // Do not take pet healing into account, atleast for now
                    if target.isTroll()
                        if healerOwner != target.getOwner()
                            playerScores.get(healerOwner).addAllyHealing(healingAmount.toInt())

                        // Do not include self healing consumable items
                        // I have mixed opinion on this, we should differentiate healing done from ability/item
                        // This we can "quantify" how much cooked meat priest can actually save through healing spells
                        // Still, I think having the healing done from meat could also be useful
                        else if healerOwner == target.getOwner()
                            and instance.getHealingType() != HealingType.ITEM
                            playerScores.get(healerOwner).addSelfHealing(healingAmount.toInt())

                        // Healing's kind of an edge case due to the string format "self/ally"
                        let healingStr = playerScores.get(healerOwner).getHealing()
                        scoreBoardEntries.get("Healing self/ally")
                            .updateEntry(healerOwner.getName(), healingStr, null)

                        let tribeHealingStr = getTribeHealing(healerOwner)
                        scoreBoardEntries.get("Healing self/ally")
                            .updateTribeEntry(healerOwner, tribeHealingStr)


            // Register cooked meat eaten amount
            EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM) ->
                let itm = GetManipulatedItem()
                let itemId = itm.getTypeId()
                let user = GetManipulatingUnit()
                let owner = user.getOwner()

                // Other unit apart from troll can eat, like pets
                if itemId == ITEM_COOKED_MEAT
                    and playerScores.has(owner)
                    playerScores.get(owner).addMeatEaten()
                    scoreBoardEntries.get("Meat Eaten").addValue(owner, 1)

            // Register gold acquired
            EventListener.add(EVENT_PLAYER_UNIT_PAWN_ITEM) ->
                let owner = GetTriggerUnit().getOwner()
                if playerScores.has(owner)
                    playerScores.get(owner).addGold()


            // Dunno if I should let player see their score during the game, but I'll let this
            // here as trial, might be useful for debug, only display the triggered player score
            registerCommandAll("score") (player triggerPlayer, LinkedList<string> arguments) ->
                playerScores.get(triggerPlayer).printScore()
