library CheckWin requires PublicLibrary, ClassSelection, MMD, GameConfig {

	boolean tribeWasStillAlive[12];
	public boolean GAME_END = false;

	public function FlagTribeWinner(force tribe) {
		ForForce(tribe, function() {
			FlagPlayer(GetEnumPlayer(), FLAG_WINNER);
		});
	}

	public function FlagTribeLoser(force tribe) {
		ForForce(tribe, function() {
			FlagPlayer(GetEnumPlayer(), FLAG_LOSER);
		});
	}

	function notGracePeriod() -> boolean {
		return !GameConfig.getInstance().getTestMode() && (!GameConfig.getInstance().isGracePeriodEnabled() || TimerGetRemaining(GRACE_PERIOD_TIMER) <= 0);
	}

	function customVictory() {
		CVic(GetEnumPlayer(), true, true);
	}

	function customDefeat() {
		CDef(GetEnumPlayer(), "You have been defeated.");
	}

	function winTimer() {
		integer i;

		ReleaseTimer(GetExpiredTimer());

		for (0 <= i < GameConfig.getInstance().getNumTribes()) {
			if (tribeWasStillAlive[i]) {
				ForForce(TEAM[i + 1], function customVictory);
			} else {
				ForForce(TEAM[i + 1], function customDefeat);
			}
		}
	}

	function checkWin() {
		integer i, j;
		integer pid;
		integer ppt = GameConfig.getInstance().getNumPlayersPerTribe();
		integer nt = GameConfig.getInstance().getNumTribes();
		integer numTribesAlive = 0;
		boolean alive[];
		timer t;
		timerdialog dt;

		if (GAME_END) {
			return;
		}

		for (0 <= i < nt) {
			if (tribeWasStillAlive[i]) {
				alive[i] = false;

				for (0 <= j < ppt) {
					pid = i * ppt + j;
					if (GetUnitState(GetPlayerTroll(Player(pid)), UNIT_STATE_LIFE) > .455) {
						alive[i] = true;
					}
				}

				if (alive[i]) {
					numTribesAlive += 1;
				}
			}
		}

		if (numTribesAlive > 1) {
			for (0 <= i < nt) {
				if (!alive[i] && tribeWasStillAlive[i]) {
					FlagTribeLoser(TEAM[i + 1]);
					ForForce(TEAM[i + 1], function customDefeat);
					DisplayTText(HIGHLIGHT_COLOR + "Tribe " + I2S(i + 1) + " has been defeated.", 30);
					tribeWasStillAlive[i] = false;
				}
			}
		} else {
			GAME_END = true;

			for (0 <= i < nt) {
				if (alive[i]) {
					FlagTribeWinner(TEAM[i + 1]);
					DisplayTimedTextToForce(TEAM[i + 1], 60, HIGHLIGHT_COLOR + "You have won! Please play again!");
				}
				else if (tribeWasStillAlive[i]) {
					FlagTribeLoser(TEAM[i + 1]);
					DisplayTimedTextToForce(TEAM[i + 1], 60, HIGHLIGHT_COLOR + "Your tribe has been killed! Please play again.");
					tribeWasStillAlive[i] = false;
				}
			}

			displayStats();

			t = NewTimer();
			dt = CreateTimerDialog(t);
			TimerStart(t, 20, false, function winTimer);
			TimerDialogSetTitle(dt, "Game ends in...");
			TimerDialogDisplay(dt, true);
		}
	}

	function removeNonPresentTribes() {
		integer i, j;
		integer pid;
		integer ppt = GameConfig.getInstance().getNumPlayersPerTribe();
		integer nt = GameConfig.getInstance().getNumTribes();

		for (0 <= i < nt) {
			tribeWasStillAlive[i] = false;
			for (0 <= j < ppt) {
				pid = i * ppt + j;
				if (!isobserver[pid] &&
					GetPlayerController(Player(pid)) == MAP_CONTROL_USER &&
					GetPlayerSlotState(Player(pid)) == PLAYER_SLOT_STATE_PLAYING) {
					tribeWasStillAlive[i] = true;
				}
			}
		}
	}

	function onInit() {
		Map.onGameStart(function removeNonPresentTribes);

		gg_trg_check_win = CreateTrigger();
		TriggerAddCondition(gg_trg_check_win, Condition(function notGracePeriod));
		TriggerAddAction(gg_trg_check_win, function checkWin);
	}
}
