#!/usr/bin/python3.6
from itertools import filterfalse

def S2I(id):
    return sum(x * 256 ** i for i, x in enumerate(map(ord, reversed(id))))
   
def I2S(id):
    return "".join(chr((id % 256 ** (i + 1)) // 256 ** i) for i in reversed(range(4)))
    
def process_file(input, output):
    # Each object definition is suffixed by two blank lines.
    with open(input) as input:
        blocks = input.read().split("\n\n\n")
    
    # The last block is just the final suffix.
    del blocks[-1]
    
    # The first block contains the header.
    header, sep, blocks[0] = blocks[0].rpartition("\n\n")
    
    # An object generated by Wurst will set the "wurs" property.
    def is_wurst(block):
        return '("wurs",' in block
    
    # Remove the blocks that contain a "wurs" property.
    print(f"Read {len(blocks)} definitions.") 
    blocks = list(filterfalse(is_wurst, blocks))
    
    # Write the file.
    with open(output, "w") as output:
        output.write(header + sep + "\n\n\n".join(blocks) + "\n")
    print(f"Wrote {len(blocks)} definitions.")
