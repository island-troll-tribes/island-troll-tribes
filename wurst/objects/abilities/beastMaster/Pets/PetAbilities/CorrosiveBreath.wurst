package CorrosiveBreath

// Standard Library Imports
import UpgradeObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import Assets
import OrderIds
import InstantDummyCaster
import BuffObjEditing

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import ColorUtils
import StringExtensions
import SpiritualGuidance
import CustomProjectile

let BUFF_ID_DMG_DEC = compiletime(BUFF_ID_GEN.next())

let CORROSIVE_BREATH_COOLDOWN = 75.

let CORROSIVE_BREATH_CAST_RANGE = 300.
let CORROSIVE_BREATH_CAST_RANGE_INCREASE = 50.

let GROUND_CORROSION_DURATION = 4.
let GROUND_CORROSION_DURATION_INCREASE = 1.

let GROUND_CORROSION_AOE = 100.
let GROUND_CORROSION_AOE_INCREASE = 50.

let ARMOR_REDUCED = 2
let ARMOR_REDUCED_INCREASE = 1

let DAMAGE_DECREASE_FACTOR = 0.05

let GROUND_CORROSION_INTERVAL_CAST = 1.

let ADDITIONAL_EFFECT_STR = "\nGain an additional effect when the unit reach adulthood.".color(HIGHLIGHT_COLOR) + "\n\nAdditional Effect : ".color(GOLD_COLOR)

let CORROSIVE_BREATH_TOOLTIP = "Corrosive Breath"
let CORROSIVE_BREATH_TOOLTIP_EXT = "Spit corrosive saliva on the target position, creating an acid zone, each enemy unit walking into the zone have their armor reduced."
                                   + makeToolTipCooldown(CORROSIVE_BREATH_COOLDOWN)
                                   + ADDITIONAL_EFFECT_STR
                                   + "Unit walking in the acid zone have their weapons corroded, reducing their attack damage."

// Druid Spiritual guidance allow max level to be reached
let MAX_LEVEL = 7
let MAX_UPGD_ABIL_LEVEL = MAX_LEVEL - PET_UPGRADE_BONUS

let UPGD_MANA_COST = 4 // mana cost * abilLevel

@compiletime function createCorrosiveBreathUpgrade() returns UpgradeDefinition
    return new UpgradeDefinition(UPGD_CORROSIVE_BREATH)
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_CORROSIVE_BREATH.toRawCode())
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_CORROSION_ARMOR.toRawCode())
        ..addEffectAbilityLevelBonus(1, 1, ABILITY_CORROSION_DAMAGE.toRawCode())
        ..setLevels(MAX_LEVEL)
        ..setName(1, "Corrosive Breath bonus")
        ..setIcon(1, Icons.bTNCorrosiveBreath)

@compiletime function createUpgradeAbility() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_PET_CORROSIVE_BREATH_UPGD, MAX_UPGD_ABIL_LEVEL, true)
        ..setHeroAbility(false)
        ..presetCastRange(lvl -> 99999)
        ..presetCooldown(lvl -> 0)
        ..presetFollowThroughTime(lvl -> 0)
        ..presetArtDuration(lvl -> 0)
        ..setAnimationNames("")
        ..setName("Increase Corrosive Breath")
        ..setIconNormal(Icons.bTNSkillz)
        ..presetButtonPosNormal(0, 2)
        ..setHotkeyNormal("Z")
        ..setArtCaster(Abilities.aIsmTarget)
        ..presetManaCost(lvl -> UPGD_MANA_COST * lvl)
        ..presetTooltipNormal(lvl -> makeToolTipNormUpgradeLevel("Z", CORROSIVE_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> "Increase Corrosive Breath ability to the next level."  + "\n\n"
            + "Armor reduced : "              .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(ARMOR_REDUCED.toReal()     , ARMOR_REDUCED_INCREASE.toReal()      , lvl, MAX_LEVEL, COLOR_GREEN, true)
            + "\nDamage reduced : "           .color(GOLD_COLOR)    + toolTipAbilityEffectPerLevel(0.                         , DAMAGE_DECREASE_FACTOR * 100         , lvl, MAX_LEVEL, COLOR_GREEN, true) + " percents".color(GOLD_COLOR)
            + "\nCorrosive ground duration : ".color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(GROUND_CORROSION_DURATION  , GROUND_CORROSION_DURATION_INCREASE   , lvl, MAX_LEVEL, COLOR_GREEN, true) + " seconds.".color(SPECIAL_COLOR)
            + "\nArea of effect : "           .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(GROUND_CORROSION_AOE       , GROUND_CORROSION_AOE_INCREASE        , lvl, MAX_LEVEL, COLOR_GREEN, true)
            + "\nCast range : "               .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(CORROSIVE_BREATH_CAST_RANGE, CORROSIVE_BREATH_CAST_RANGE_INCREASE , lvl, MAX_LEVEL, COLOR_GREEN, true)
            )
        ..setEditorSuffix("(Wurst)")

@compiletime function createCorrosiveBreath() returns ChannelAbilityPreset
    return new ChannelAbilityPreset(ABILITY_CORROSIVE_BREATH, MAX_LEVEL, true)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> CORROSIVE_BREATH_COOLDOWN)
        ..setHeroAbility(true)
        ..setItemAbility(false)
        ..presetTargetTypes(Targettype.POINT)
        ..setName(CORROSIVE_BREATH_TOOLTIP)
        ..presetHotkey("A")
        ..presetTooltipNormal(lvl -> makeToolTipNormLevel("A", CORROSIVE_BREATH_TOOLTIP, lvl))
        ..presetTooltipNormalExtended(lvl -> CORROSIVE_BREATH_TOOLTIP_EXT  + "\n\n"
            + "Armor reduced : "              .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(ARMOR_REDUCED.toReal()     , ARMOR_REDUCED_INCREASE.toReal()      , lvl, MAX_LEVEL, COLOR_GREEN, true)
            + "\nDamage reduced : "           .color(GOLD_COLOR)    + toolTipAbilityEffectPerLevel(0.                         , DAMAGE_DECREASE_FACTOR * 100         , lvl, MAX_LEVEL, COLOR_GREEN, true) + " percents".color(GOLD_COLOR)
            + "\nCorrosive ground duration : ".color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(GROUND_CORROSION_DURATION  , GROUND_CORROSION_DURATION_INCREASE   , lvl, MAX_LEVEL, COLOR_GREEN, true) + " seconds.".color(SPECIAL_COLOR)
            + "\nArea of effect : "           .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(GROUND_CORROSION_AOE       , GROUND_CORROSION_AOE_INCREASE        , lvl, MAX_LEVEL, COLOR_GREEN, true)
            + "\nCast range : "               .color(SPECIAL_COLOR) + toolTipAbilityEffectPerLevel(CORROSIVE_BREATH_CAST_RANGE, CORROSIVE_BREATH_CAST_RANGE_INCREASE , lvl, MAX_LEVEL, COLOR_GREEN, true)
            )
        ..setIconNormal(Icons.bTNCorrosiveBreath)
        ..setIconResearch(Icons.bTNCorrosiveBreath)
        ..setIconTurnOff(Icons.bTNCorrosiveBreath)
        ..setAnimationNames("")
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> GROUND_CORROSION_AOE + GROUND_CORROSION_AOE_INCREASE * lvl)
        ..setCheckDependencies(true)
        ..presetButtonPosNormal(0, 1)
        ..presetCastRange(lvl -> CORROSIVE_BREATH_CAST_RANGE + CORROSIVE_BREATH_CAST_RANGE_INCREASE * lvl)
        ..presetFollowThroughTime(lvl -> 1.3)
        ..setEditorSuffix("(Wurst)")

@compiletime function createCorrosion() returns AbilityDefinitionAlchemistAcidBomb
    return new AbilityDefinitionAlchemistAcidBomb(ABILITY_CORROSION_ARMOR)
        ..setDummyAbility()
        ..setMissileArt(Abilities.chimaeraAcidMissile)
        ..setMissileSpeed(1000)
        ..setLevels(7)
        ..presetArmorPenalty(lvl -> ARMOR_REDUCED + ARMOR_REDUCED_INCREASE * lvl)
        ..presetPrimaryDamage(lvl -> 0)
        ..presetSecondaryDamage(lvl -> 0)
        ..presetAreaofEffect(lvl -> 1)
        ..presetDurationHero(lvl -> 2)
        ..presetDurationNormal(lvl -> 4)
        ..setName("Corrode Armor")
        ..setEditorSuffix("(Wurst)")

@compiletime function createBuffDecreaseDamage()
    new BuffDefinition(BUFF_ID_DMG_DEC, 'Acri')
        ..setIcon(Icons.bTNCorrosiveBreath)
        ..setTargetAttachments(2)
        ..setTargetAttachmentPoint0("hand,left")
        ..setTargetAttachmentPoint1("hand,right")
        ..setArtTarget(Abilities.bottleImpact)
        ..setTooltipNormal(1, "Corroded Weapon")
        ..setTooltipNormalExtended(1, "This unit weapons are corroded; its attack damage have been decreased")
        ..setEditorSuffix("(Wurst)")

@compiletime function createCorrosionDamageDecrease() returns AbilityDefinitionCripple
    return new AbilityDefinitionCripple(ABILITY_CORROSION_DAMAGE)
        ..setDummyAbility()
        ..setLevels(MAX_LEVEL)
        ..presetDamageReduction(lvl -> 0 + lvl * DAMAGE_DECREASE_FACTOR)
        ..presetMovementSpeedReduction(lvl -> 0)
        ..presetAttackSpeedReduction(lvl -> 0)
        ..presetDurationHero(lvl -> 2)
        ..presetDurationNormal(lvl -> 4)
        ..presetBuffs(lvl -> BUFF_ID_DMG_DEC.toRawCode())
        ..setEditorSuffix("(Wurst)")
        ..setName("Corrode Weapons")



// Spell projectile, manual adjust the numbers so it looks cool ingame
class CorrosiveBreathProjectile extends CustomProjectile
    int abilLevel
    unit caster

    construct(vec3 startPos, vec3 targetPos, real groundSpeed, string effectPath, int abilLevel, unit caster)
        super(startPos, targetPos, groundSpeed, 300, effectPath)
        this.abilLevel = abilLevel
        this.caster = caster
        this.missileFx.setScale(abilLevel * 0.2 + 0.4)

    override function onImpact()
        flashEffect(Abilities.bottleMissile, targetPos, abilLevel * 0.5)
        handleGroundCorrosion()

    function handleGroundCorrosion()
        let owner = caster.getOwner()

        let fxAmount = 5 + (abilLevel * 10)
        //Spawn acid FX on ground
        for i = 0 to fxAmount
            let randAngle = angle(GetRandomReal(0, 2*bj_PI))
            let randomDist = GetRandomReal(15, GROUND_CORROSION_AOE + GROUND_CORROSION_AOE_INCREASE * abilLevel)
            let acidFx = addEffect(Abilities.bottleImpact, targetPos.toVec2().polarOffset(randAngle, randomDist).withTerrainZ(0))
            //acidFx.setScale(0.7)
            doAfter(GROUND_CORROSION_DURATION + GROUND_CORROSION_DURATION_INCREASE * abilLevel - 0.5) ->
                acidFx.destr()

        // casting acid bomb on the units in area
        doPeriodicallyTimed(GROUND_CORROSION_INTERVAL_CAST, GROUND_CORROSION_DURATION + GROUND_CORROSION_DURATION_INCREASE * abilLevel) corrosionAOE ->
            forUnitsInRange(targetPos.toVec2(), GROUND_CORROSION_AOE + GROUND_CORROSION_AOE_INCREASE * abilLevel) u ->
                if u.isAlive() and u.getOwner().isEnemyOf(owner)
                    and not u.isType(UNIT_TYPE_FLYING)
                    and not u.isInvulnerable()
                    and not u.isHidden()
                    InstantDummyCaster.castTarget(owner, ABILITY_CORROSION_ARMOR, abilLevel, OrderIds.acidbomb, u)
                    if caster.getTypeId() == UNIT_CORROSIVE_DRAGON
                        InstantDummyCaster.castTarget(owner, ABILITY_CORROSION_DAMAGE, abilLevel, OrderIds.cripple, u)



init
    EventListener.onPointCast(ABILITY_CORROSIVE_BREATH) (unit caster, vec2 target) ->
        // Get correct Z value when dragon fly over cliff
        let casterPos3D = caster.getPos().withTerrainZ().op_plus(vec3(0, 0, caster.getPos3Fly().z))
        let lvl = caster.getAbilityLevel(ABILITY_CORROSIVE_BREATH)

        let fxPath = Abilities.greenDragonMissile

        new CorrosiveBreathProjectile(
            casterPos3D + vec3(0, 60, -10), // Trying to adjust starting pos with dragon mouth
            target.withTerrainZ(),
            400,
            fxPath,
            lvl,
            caster
            )
