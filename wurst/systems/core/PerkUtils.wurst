package PerkUtils

import HashMap
import HashSet

import ErrorHandling
import Lodash

import Toolkit
import ColorUtils
import StringExtensions

public class Perk
    private VoidFunction<player> onRegisterFn
    private VoidFunction<player> onUnregisterFn

    construct()
        this.onActivate() p ->
        this.onDeactivate() (p) ->

    function onDeactivate(VoidFunction<player> fn)
        this.onUnregisterFn = fn

    function onActivate(VoidFunction<player> fn)
        this.onRegisterFn = fn
    
    function activate(player p)
        this.onRegisterFn.call(p)
    
    function deactivate(player p)
        this.onUnregisterFn.call(p)

let perksDefinitions = new HashMap<string,Perk>()

public function addPerk(string perkName, Perk perk)
    perksDefinitions.put(perkName, perk)

public function removePerk(string perkName)
    perksDefinitions.remove(perkName)

let perksPlayers = new HashMap<player,HashSet<string>>()

public function player.addPerk(string perkName)
    var playerPerks = perksPlayers.get(this)
    if(playerPerks == null)
        playerPerks = new HashSet<string>()
        perksPlayers.put(this, playerPerks)

    if(playerPerks.has(perkName))
        return
    
    playerPerks.add(perkName)
    
    // Execute handlers<
    let perk = perksDefinitions.get(perkName)
    if(perk == null)
        error("Perk {0} does not exist".format(perkName))
    
    perk.activate(this)

public function player.removePerk(string perkName)
    let playerPerks = perksPlayers.get(this)
    
    if(playerPerks == null or not playerPerks.has(perkName))
        return
    
    playerPerks.remove(perkName)
    
    // Execute handler
    let perk = perksDefinitions.get(perkName)
    if(perk == null)
        error("Perk {0} does not exist".format(perkName))
    
    perk.deactivate(this)

public function player.hasPerk(string perkName) returns boolean
    let playerPerks = perksPlayers.get(this)
    return playerPerks != null and playerPerks.has(perkName)

init
    registerToolkitCommand("perk") (triggerPlayer, args) ->
        if(triggerPlayer.hasPerk(args.get(1)))
            printTimedToPlayer("Perk is on".color(GENERAL_COLOR), 10, triggerPlayer)
        else
            printTimedToPlayer("Perk is off".color(GENERAL_COLOR), 10, triggerPlayer)
    
    registerToolkitCommand("toggle-perk") (triggerPlayer, args) ->
        let perkName = args.get(1)
        if(triggerPlayer.hasPerk(perkName))
            triggerPlayer.removePerk(perkName)
            printTimedToPlayer("Perk is now off".color(GENERAL_COLOR), 10, triggerPlayer)
        else
            triggerPlayer.addPerk(perkName)
            printTimedToPlayer("Perk is now on".color(GENERAL_COLOR), 10, triggerPlayer)