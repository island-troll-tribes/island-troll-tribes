package Pets

// Standard library imports:
import HashMap
import LinkedList

// Third-party imports:
import Lodash
import LodashExtensions

// Local imports:
import LocalObjectIDs
import Transformation
import ChatCommands
import StringExtensions
import ColorUtils
import PetUpgradeHandler

let emptyChain = new LinkedList<int>()

let growthChains = new OwnedLinkedList<OwnedLinkedList<int>>()
    ..push(asOwnedList(
        UNIT_ELK,
        UNIT_TAMED_ELK
    ))
    ..push(asOwnedList(
        UNIT_JUNGLE_WOLF,
        UNIT_TAMED_WOLF
    ))
    ..push(asOwnedList(
        UNIT_JUNGLE_BEAR,
        UNIT_TAMED_BEAR
    ))
    ..push(asOwnedList(
        UNIT_HAWK_HATCHLING,
        UNIT_TAMED_HAWK
    ))
    ..push(asOwnedList(
        UNIT_FIRE_DRAGON_HATCHLING,
        UNIT_FIRE_DRAGON
    ))
    ..push(asOwnedList(
        UNIT_CORROSIVE_DRAGON_HATCHLING,
        UNIT_CORROSIVE_DRAGON
    ))
    ..push(asOwnedList(
        UNIT_FROST_DRAGON_HATCHLING,
        UNIT_FROST_DRAGON
    ))
    ..push(asOwnedList(
        UNIT_STORM_DRAGON_HATCHLING,
        UNIT_STORM_DRAGON
    ))
    ..push(asOwnedList(
        UNIT_NETHER_DRAGON_HATCHLING,
        UNIT_NETHER_DRAGON
    ))

let transformations = zip(
    // TODO: Use dropRight
    growthChains.map((chain, index) -> chain.take(chain.size() - 1)).flatten(),
    growthChains.map((chain, index) -> chain.drop(1)).flatten()
)

// Generate the transformations during compilation.
let transformationIDs = compiletime(registerTransformations(transformations))

public let pets = new IterableMap<player, unit>()

public function unit.getPetGrowthChain() returns LinkedList<int>
    // Iterate over the chains until a match is found.
    for chain in growthChains
        if chain.has(this.getTypeId())
            return chain

    // Return an empty chain if the unit is not a pet.
    return emptyChain

public function player.getPet() returns unit
    return pets.get(this)

public function player.addPet(unit pet)
    pets.put(this, pet)

public function player.removePet()
    pets.getAndRemove(this)

// A unit is a pet if it belongs to a growth chain.
public function unit.isPet() returns bool
    return this.getPetGrowthChain().size() > 0

public function group.enumPets()
    // Ensure that the group is empty.
    this.clear()

    // Enumerate over the pets for all players.
    pets.forEach() (player key, unit value) ->
        if value != null
            this.addUnit(value)

public function player.addPetUpgrades(int value, boolean updateUpgradeAbilityLevel)
    if this.getPet() != null
        petUpgradeHandlerInstance.get(this.getPet()).incremenAllUpgrades(value, updateUpgradeAbilityLevel)


init
    // Register the transformations at runtime.
    registerTransformations(transformations, transformationIDs, true)

    registerCommandAll("cnp") (triggerPlayer, args) ->
        // 25 characters Max
        let name = args.get(1).substring(0, 25)

        if triggerPlayer.getPet() != null
            printTimedToPlayer("You have renamed your pet to ".color(GENERAL_COLOR) + name.color(HIGHLIGHT_COLOR), 5, triggerPlayer)
            triggerPlayer.getPet().setName(name)
        else
            printTimedToPlayer("You do not own any pet".color(COLOR_RED), 5, triggerPlayer)
    registerCommandAll("anim") (triggerPlayer, args) ->
        let name = args.get(1).substring(0, 25)
        triggerPlayer.getPet().setAnimation(name)
