package Hawk

// Standard library imports:
import ClosureForGroups
import LinkedList

// Local imports:
import BonyAnimal
import Classes
import LocalObjectIDs

let types = asList(
    UNIT_HAWK,
    UNIT_HAWK_HATCHLING,
    UNIT_TAMED_HAWK,
    UNIT_STORM_DRAGON,
    UNIT_STORM_DRAGON_HATCHLING,
    UNIT_CORROSIVE_DRAGON,
    UNIT_CORROSIVE_DRAGON_HATCHLING,
    UNIT_NETHER_DRAGON,
    UNIT_NETHER_DRAGON_HATCHLING,
    UNIT_FIRE_DRAGON,
    UNIT_FIRE_DRAGON_HATCHLING
)

public class Hawk extends BonyAnimal
    private static let unitTypeId = UNIT_HAWK

    static function initialize()
        register(unitTypeId, hawk -> new Hawk(hawk))

    construct(unit whichUnit)
        super(whichUnit)

    override function getDrops() returns LinkedList<int>
        let drops = super.getDrops()
            ..add(ITEM_HAWK_EGG)

        forNearestUnit(getPos(), 400, Filter(-> begin
            return getTrollBaseClass(GetFilterUnit()) == UNIT_BEAST_MASTER
        end), bm -> begin
            if bm != null
                drops.add(ITEM_HAWK_EGG)
        end)

        return drops

init
    for typeID in types
        Hawk.register(typeID, target -> new Hawk(target))
