package AutoSkill

// Standard library imports:
import HashMap
import RegisterEvents

// Local imports:
import Classes
import LocalObjectIDs
import Transformation
import UnitExtensions
import LegacyHotkeys

let legacySkillMap = new HashMap<int, int>()
    ..put(ABILITY_MAGE_SPELLBOOK, ABILITY_MAGE_LEGACY_SPELLBOOK)
    ..put(ABILITY_HYPNOTIST_SPELLBOOK, ABILITY_HYPNOTIST_LEGACY_SPELLBOOK)

let skillMap = new HashMap<int, int>()
    // Hunter
    ..put(UNIT_HUNTER,               ABILITY_TRACK)
    ..put(UNIT_HUNTER_1,             ABILITY_TRACK)
    ..put(UNIT_WARRIOR,              ABILITY_WARRIOR_SPELLBOOK)
    ..put(UNIT_WARRIOR,              ABILITY_GIANT_SWING)
    ..put(UNIT_TRACKER,              ABILITY_TRACKER_SPELLBOOK)
    ..put(UNIT_JUGGERNAUT,           ABILITY_RAGE)

    // Mage
    ..put(UNIT_MAGE,                 ABILITY_MAGE_SPELLBOOK)
    ..put(UNIT_MAGE_1,               ABILITY_MAGE_SPELLBOOK)
    ..put(UNIT_ELEMENTALIST,         ABILITY_ELEMENTALIST_NEW_SPELLBOOK)
    ..put(UNIT_HYPNOTIST,            ABILITY_HYPNOTIST_SPELLBOOK)
    ..put(UNIT_DEMENTIA_MASTER,      ABILITY_DEMENTIA_MASTER_SPELLBOOK)

    // Priest
    ..put(UNIT_PRIEST,               ABILITY_PRIEST_SPELLBOOK)
    ..put(UNIT_BOOSTER,              ABILITY_BOOSTER_SPELLBOOK)
    ..put(UNIT_BOOSTER_1,            ABILITY_BOOSTER_SPELLBOOK)
    ..put(UNIT_MASTER_HEALER,        ABILITY_MASTER_HEALER_SPELLBOOK)
    ..put(UNIT_MASTER_HEALER_1,      ABILITY_MASTER_HEALER_SPELLBOOK)
    ..put(UNIT_SAGE,                 ABILITY_SAGE_SPELLBOOK)

    // Beastmaster
    ..put(UNIT_SHAPESHIFTER_WOLF,    ABILITY_SHAPESHIFTER_FORM)
    ..put(UNIT_SHAPESHIFTER_BEAR,    ABILITY_SHAPESHIFTER_FORM)
    ..put(UNIT_SHAPESHIFTER_PANTHER, ABILITY_SHAPESHIFTER_FORM)
    ..put(UNIT_SHAPESHIFTER_TIGER,   ABILITY_SHAPESHIFTER_FORM)
    ..put(UNIT_DRUID,                ABILITY_DRUID_SPELLBOOK)
    ..put(UNIT_JUNGLE_TYRANT,        ABILITY_JUNGLE_TYRANT_EVOLUTION)

    // Thief
    ..put(UNIT_THIEF,                ABILITY_CLOAK)
    ..put(UNIT_ESCAPE_ARTIST,        ABILITY_ESCAPE_ARTIST_SPELLBOOK)
    ..put(UNIT_CONTORTIONIST,        ABILITY_CONTORTIONIST_SPELLBOOK)
    ..put(UNIT_ASSASSIN,             ABILITY_ASSASSINATE)

    // Scout
    ..put(UNIT_SCOUT,                ABILITY_REVEAL_ID)
    ..put(UNIT_OBSERVER,             ABILITY_OBSERVER_SPELLBOOK)
    ..put(UNIT_OBSERVER,             ABILITY_OBSERVER_WARD_AREA)
    ..put(UNIT_TRAPPER,              ABILITY_TRAPPER_SPELLBOOK)
    ..put(UNIT_SPY,                  ABILITY_CHAIN_REVEAL)

    // Gatherer
    ..put(UNIT_GATHERER,             ABILITY_ITEM_RADAR)
    ..put(UNIT_HERB_MASTER,          ABILITY_TELE_HERB_GATHER)
    ..put(UNIT_RADAR_GATHERER,       ABILITY_TELE_RADAR_GATHER)
    ..put(UNIT_OMNIGATHERER,         ABILITY_ITEM_WARP)

// TODO: Remove public once TrollUpgrade is fixed.
public function autoSkill(unit target)
    // Exit if the unit is not a troll.
    if not target.isTroll()
        return

    // Look up the corresponding ability for the unit.
    var abilityID = skillMap.get(target.getTypeId())

    // Exit if the unit does not have a configured skill.
    if abilityID == 0
        return

    // Override the ability to provide legacy hotkeys, if applicable.
    if target.getOwner().usesLegacyHotkeys() and legacySkillMap.has(abilityID)
        abilityID = legacySkillMap.get(abilityID)

    // Ensure that the unit has the ability.
    target.addAbility(abilityID)

    // Look up the instance of the ability.
    let skill = target.getAbility(abilityID)

    // Check whether the unit is a base class.
    let isBase = target.getTrollClassType() == ClassType.BASE_CLASS

    // Look up the relevant statistics for the ability.
    // TODO: Use ABILITY_IF_REQUIRED_LEVEL once properly configured.
    // TODO: Use ABILITY_IF_LEVEL_SKIP_REQUIREMENT once Blizzard supports it.
    let numLevels = skill.getField(ABILITY_IF_LEVELS)
    // Spells with many levels, e.g. Assassinate or Shapeshift, advance faster.
    let levelSkip = (isBase or numLevels > 3) ? 1 : 2
    let baseLevel = numLevels > 3 ? 1 : (isBase ? 2 : 0)

    // Compute the maximum allowed level for the ability.
    let newLevel = 1 + ((target.getLevel() - baseLevel) / levelSkip).floor()

    // Correct the level for the ability, which may require removing it.
    if newLevel > 0
        target.setAbilityLevel(abilityID, min(newLevel, numLevels))
    else
        target.removeAbility(abilityID)

init
    registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL) ->
        autoSkill(GetTriggerUnit())

    // Enable abilities that subclasses start with immediately.
    registerAfterEffect() (unit target, int unitID) ->
        autoSkill(target)
