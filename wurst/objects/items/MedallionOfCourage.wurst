package MedallionOfCourage

// Stanard library imports:
import Assets
import ChannelAbilityPreset
import ItemObjEditing
import RegisterEvents
import UpgradeObjEditing

// Third Party imports:
import SimError

// Local imports:
import Classes
import ColorUtils
import Items
import LocalObjectIDs
import PlayerExtensions

// The description for the item.
let DESCRIPTION = "" +
    "Unique|n".color(COLOR_PURPLE) +
    "A strange medallion that installs courage in its bearer.|n" +
    "Using this will allow you to upgrade directly into your final form.|n" +
    "Usable by Gatherer, Mage, Priest, Scout, and Thief.".color(COLOR_GOLD)

@compiletime function createMedallionAbility()
    createItemBerserkCast(ABILITY_SUPERSUB_COURAGE)

@compiletime function createMedallionOfCourage()
    createUsableItem(ITEM_MEDALLION_COURAGE)
        ..setAbilities(commaList(ABILITY_SUPERSUB_COURAGE))
        ..setName("Medallion of Courage")
        ..setDescription(DESCRIPTION)
        ..setTooltipExtended(DESCRIPTION)
        ..setInterfaceIcon(Icons.bTNMedalionOfCourage)
        ..setModelUsed(Objects.potofGold)
        ..setCanBeSoldToMerchants(false)

// The message used to notify players
let hint =  "{0} unlocked a new class choice!".color(GENERAL_COLOR)

// The upgrade that allows a player to upgrade into a supersub.
@compiletime function createMedallionDummyUpgrade()
    new UpgradeDefinition(UPGD_MEDALLION_COURAGE)
        ..setName(1, "Subclass or Medallion Of Courage")

// Validates and unlocks the research corresponding to the Medallion of Courage.
function onUse(unit caster, item target)
    // Exit if the item used is not relevant.
    if target.getTypeId() != ITEM_MEDALLION_COURAGE
        return
    // Cache the state of the the operation.
    let owner = caster.getOwner()
    let unitId = caster.getTypeId()

    // Block certain classes from using the medallion.
    if unitId == UNIT_HUNTER or unitId == UNIT_BEASTMASTER
        simError(owner, "Your class cannot use this item.")
        return

    // Block unnecessary usage of the medallion.
    if unitId.getTrollClassType() != ClassType.BASE_CLASS
        simError(owner, "Only base trolls can use item.")
        return

    // Block redundant usage of the medallion.
    if GetPlayerTechResearched(owner, UPGD_MEDALLION_COURAGE, true)
        simError(owner, "This unit has already benefitted from this item.")
        return

    // Consume the item manually, having verified it can be used.
    target.remove()

    // Unlock the research.
    owner.setTechResearched(UPGD_MEDALLION_COURAGE, 1)

    // Update the compound requirement manually.
    // TODO: Remove this once compound requirements for abilities are fixed.
    owner.setTechResearched(UPGD_TROLL_LEVEL_AND_MEDAL, caster.getLevel())

    // Notify the user.
    owner.print(hint.format(caster.getProperName().color(GOLD_COLOR)))

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM) ->
        onUse(EventData.getManipulatingUnit(), EventData.getManipulatedItem())
