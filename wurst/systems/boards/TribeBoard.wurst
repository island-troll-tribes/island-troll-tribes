package TribeBoard

// Standard library imports:
import Assets
import ClosureTimers
import HashMap
import LinkedList
import RegisterEvents

// Third-party imports:
import LodashExtensions

// Local imports:
import ColorUtils
import Boards
import Game
import PlayerExtensions
import StringExtensions
import Tribe
import EventHelper

let PERIOD = 1.0

let ICON_COOKED_MEAT = Icons.bTNMonsterLure
let ICON_SLEEP = Icons.pASBTNElunesBlessing
let ICON_HEAT = Icons.pASBTNIncinerate

class TribeBoard
    static let boards = new HashMap<player, thistype>()

    static function findForPlayer(player p) returns thistype
        return boards.get(p)

    Tribe tribe
    multiboard board
    CallbackPeriodic cb

    construct(Tribe tribe)
        this.tribe = tribe
        this.cb = doPeriodically(PERIOD, cb -> updateBoard())
        createBoard()

    function createBoard()
        let members = tribe.getMembers()

        board = CreateMultiboard()
            ..setColumnCount(4)
            ..setRowCount(members.size())
            ..setTitle("Team Stats")

        var row = 0
        for member in members
            boards.put(member, this)

            board
                .getItem(row, 0)
                ..setStyle(true, false)
                ..setValue(member.getName().color(HIGHLIGHT_COLOR))
                ..setWidth(0.1)
                ..release()

            board
                .getItem(row, 1)
                ..setStyle(true, true)
                ..setIcon(ICON_COOKED_MEAT)
                ..setWidth(0.04)
                ..release()

            board
                .getItem(row, 2)
                ..setStyle(true, true)
                ..setIcon(ICON_SLEEP)
                ..setWidth(0.04)
                ..release()

            board
                .getItem(row, 3)
                ..setStyle(true, true)
                ..setIcon(ICON_HEAT)
                ..setWidth(0.04)
                ..release()

            board.display(member, true)

            row += 1

    function updateBoard()
        let members = tribe.getMembers()
        let title = getGameTimersBoardTitle()

        board.setTitle(title)

        var row = 0
        for member in members
            let troll = member.getTroll()

            board
                .getItem(row, 1)
                ..setValue(troll.getHP().toInt().toString().color(HEALTH_COLOR))
                ..release()

            board
                .getItem(row, 2)
                ..setValue(troll.getMana().toInt().toString().color(ENERGY_COLOR))
                ..release()

            board
                .getItem(row, 3)
                ..setValue(member.getGold().toString().color(COLOR_GOLD))
                ..release()

            if not member.isIngame()
                board
                    .getItem(row, 0)
                    ..setValue(member.getName().color(GRAY_COLOR))
                    ..release()

            row += 1

    function fixDisplay()
        doAfter(0.5) ->
            for member in tribe.getMembers()
                board
                    ..display(member, false)
                    ..display(member, true)


init
    registerGameStartEvent() ->
        nullTimer() ->
            Tribe.getTribes().each(tribe -> new TribeBoard(tribe))

        registerPlayerEvent(EVENT_PLAYER_LEAVE) ->
            let leaver = EventData.getTriggerPlayer()
            if Tribe.ofPlayer(leaver) != null
                TribeBoard
                    .findForPlayer(leaver)
                    .fixDisplay()
