package Transformation
import Shapeshift
import Classes
import ClosureEvents
import GameConfig
import ID
import LegacyTriggers
import MeatSystem

function replaceUnit(unit whichUnit, integer newUnitId) returns unit
    var oldUnit = whichUnit
    unit newUnit = createUnit(whichUnit.getOwner(), newUnitId, oldUnit.getPos(), oldUnit.getFacingAngle())

    //Bogus check
    if oldUnit == null
        return oldUnit

    //Hide original
    oldUnit.hide()

    //Copy stats
    newUnit.setMana(oldUnit.getMana())
    newUnit.setHP(oldUnit.getHP())

    //Transfer items
    for i = 0 to oldUnit.inventorySize()-1
        item moveItem = oldUnit.itemInSlot(i)
        if moveItem != null
            oldUnit.removeItem(moveItem)
            newUnit.addItemHandle(moveItem)
    oldUnit.remove()
    return newUnit

public function trollUpgrade(unit whichUnit, integer newUnitId)
    var oldUnit = whichUnit
    player owner = oldUnit.getOwner()
    int strength = GetHeroStr(oldUnit, false)
    int agility = GetHeroAgi(oldUnit, false)
    int intelligence = GetHeroInt(oldUnit, false)
    unit newUnit = replaceUnit(whichUnit, newUnitId)

    //Transfer raw meat inventory
    if meatInventoryInstances.has(oldUnit)
        meatInventoryInstances.get(oldUnit).transferMeatInventoryToUnit(newUnit)

    //Change globals to new unit
    udg_trolls.removeUnit(oldUnit)
    udg_trolls.addUnit(newUnit)
    udg_PUnits[owner.getId()] = newUnit

    //Level and 1 skillpoint for non-baseclasses
    newUnit.setLevel(0, false)
    if getTrollClassType(newUnit) != ClassType.BASE_CLASS
        newUnit.setSkillPoints(1)

    //Copy stats
    newUnit.setAgi(agility)
    newUnit.setStr(strength)
    newUnit.setInt(intelligence)

    //Preserve / release BM pet
    if newUnitId == UNIT_CHICKEN_FORM or newUnitId == UNIT_SHAPESHIFTER_WOLF
        udg_parameterUnit = newUnit
        TriggerExecute(gg_trg_Release_Pets)
        SetPlayerTechResearched(owner, 'Roch', 1)
        owner.setAbilityAvailable(ABILITY_ID_WOLFS_HUNGER, true)
        owner.setAbilityAvailable(ABILITY_ID_BEARS_BULWARK, false)
        owner.setAbilityAvailable(ABILITY_ID_PROWL, false)
        owner.setAbilityAvailable(ABILITY_ID_VICIOUS_STRIKES_ORB, false)
        owner.setAbilityAvailable(ABILITY_ID_VICIOUS_STRIKES_ACTIVE, false)
    else if newUnitId == UNIT_TRUE_FORM or newUnitId == UNIT_ULTIMATE_FORM
        udg_parameterUnit = newUnit
        TriggerExecute(gg_trg_Rest_BM_SKills)
        SetPlayerTechResearched(owner, 'Roch', 1)

    // Assassin begins with Assassinate level 1
    if newUnitId == UNIT_ASSASSIN
        newUnit.setSkillPoints(1)
        newUnit.selectSkill(ABILITY_ASSASINATE)

    //Avoid desync with localplayer check
    if owner == GetLocalPlayer()
        owner.select(newUnit)
        ForceUICancel()

function handleTransformation()
    unit u = GetTriggerUnit()
    int upgradeSkill = GetLearnedSkill()

    if upgradeSkill == 'S002'
        if gameConfig.getUseOldMage()
            trollUpgrade(u, UNIT_ELEMENTALIST)
        else
            trollUpgrade(u, UNIT_ELEMENTALIST_NEW)
init
    EventListener.add(EVENT_PLAYER_HERO_SKILL) ->
        handleTransformation()
