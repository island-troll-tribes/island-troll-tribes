package SharedGold

// Standard library imports:
import ClosureTimers
import LinkedList
import RegisterEvents
import SimError

// Third-party imports:
import ChatCommands
import Lodash
import Setting

// Local imports:
import ColorUtils
import LocalObjectIDs
import PlayerExtensions
import PlayerUtils
import Tribe

// Whether a player is currently sharing gold.
let sharing = new Setting("share-gold")

// The duration for notifications.
let MESSAGE_DURATION = 10.

// The base message used for notifying users of manual trades.
let TRADE_MESSAGE = compiletime(
    asList(
        "{0}".color(GENERAL_COLOR),  // The action: Sent | Received.
        "{1}",                       // The amount, an integer.
        "gold".color(GOLD_COLOR),    // A constant.
        "{2}".color(GENERAL_COLOR),  // The preposition: to | from.
        "{3}"                        // The name of the counterparty.
    ).joinBy(" ")
)

// The base message used for notifying users of inheritance from leavers.
let LEAVE_MESSAGE = compiletime(
    asList(
        "They left you".color(GENERAL_COLOR),
        "{0}".color(GOLD_COLOR),
        "gold.".color(GENERAL_COLOR)
    ).joinBy(" ")
)

// The help message for the manual trade command.
let HELP_MESSAGE = "Command should be used as: -g [player] [amount]"

// The scheduled toggles to the setting.
let scheduled = new OwnedLinkedList<player>()

// The gold per pool, indexed by tribe player, which may temporarily differ from
// the true gold of the tribe player when it pawns an item.
let pools = new OwnedIterableMap<Tribe, int>()

// The number of pending transactions that haven't been processed, a semaphore.
var pending = 0

// Checks whether the player is truly sharing gold.
function player.isSharing() returns bool
    // Check whether the scheduled toggles change the setting from its true value.
    return xor(
        sharing.get(this).toBool(),
        scheduled.lodashFilter(member -> member == this).length().isOdd()
    )

function handleChatTrade(player origin, LinkedList<string> arguments)
    // Verify the arguments.
    if arguments.size() != 2 and arguments.size() != 3
        simError(origin, HELP_MESSAGE)
        return

    // Compute the parameters for the trade.
    let target = findPlayerByString(arguments.get(1))
    let tribe = origin.getTribe()
    let currentGold = origin.getLumber()
    let amount = arguments.size() > 2 ? arguments.get(2).toInt() : currentGold

    // Verify the target.
    if target == null
        simError(origin, "No matching player found.")
        return

    // Verify the parameters.
    if tribe == null
        // This is an unexpected error not due to the player.
        Log.error("You are not in a tribe.")
    else if amount > currentGold
        simError(origin, "Not enough gold.")
    else if amount <= 0
        simError(origin, "Amount must be positive.")
    else if target == origin
        simError(origin, "You cannot trade with yourself.")
    else if target.getTribe() != origin.getTribe()
        simError(origin, "That player is not in your tribe.")
    else if not target.isIngame()
        simError(origin, "That player has left the game.")
    else if origin.isSharing() and target.isSharing()
        simError(origin, "You are already sharing gold with that player.")
    else
        // Perform the transaction.
        origin.subLumber(amount)
        target.addLumber(amount)

        // Notify the target.
        target.print(
            TRADE_MESSAGE.format(
                "Received",
                amount.toString(),
                "from",
                origin.getNameColored()
            ),
            MESSAGE_DURATION
        )

        // Notify the giver.
        origin.print(
            TRADE_MESSAGE.format(
                "Sent",
                amount.toString(),
                "to",
                target.getNameColored()
            ),
            MESSAGE_DURATION
        )

        // Sync the gold for all those involved.
        handleTransaction(origin)

// Syncs gold for all members of the tribe that share gold.
function Tribe.syncGold()
    Log.debug("Syncing gold for: " + this.getName())

    // Look up the value for the pool.
    let value = pools.get(this)

    // Update the tracking value for the tribe.
    pools.put(this, value)

    // Update the shared pool.
    this.getNonMember().setLumber(value)

    // Sync each player in the pool.
    for member in this.getMembers()
        if sharing.get(member).toBool()
            member.setLumber(value)

function Tribe.updateGold(int differential)
    // Compute the new value for the pool.
    let value = pools.get(this) + differential

    // Update the tracking value for the tribe.
    pools.put(this, value)

    // Sync the gold after the update.
    this.syncGold()

function initialize()
    // Fill in the initial value for the pools.
    for tribe in Tribe.getTribes()
        pools.put(tribe, 0)

    // Prevent sharing initially.
    sharing.make("false", input -> input.isBool())

    // Delay the actual action to ensure gold is synced first.
    sharing.action() (target, value) ->
        // Look up the tribe for the player.
        let tribe = target.getTribe()

        // Ignore settings for players without a tribe.
        if tribe != null
            // Schedule the change.
            scheduled.add(target)

            // Begin handling updates to process the change.
            doPeriodically(ANIMATION_PERIOD) (cb) ->
                handleScheduled(cb)

    // Allow manual trading in addition to automatic pooling.
    sharing.finish() ->
        // Allow for both the full command and abbreviation.
        for command in asList("g", "gold")
            registerCommandAll(command) (triggerer, arguments) ->
                handleChatTrade(triggerer, arguments)

        // Handle the setting for any leavers.
        registerPlayerEvent(EVENT_PLAYER_LEAVE) ->
            onLeaver(EventData.getTriggerPlayer())

        // Check for players that left during synchronization.
        for index = 0 to bj_MAX_PLAYER_SLOTS - 1
            if players[index].getSlotState() == PLAYER_SLOT_STATE_LEFT
                onLeaver(players[index])

    // Initialize the setting.
    sharing.initialize()

function handleScheduled(CallbackPeriodic cb)
    // Continue polling if there are pending transactions.
    if pending != 0
        return
    Log.debug("Beginning to handle scheduled toggles.")

    // Apply all relevant scheduled updates after sync.
    while scheduled.size() > 0
        // Handle toggling a player at a time.
        let target = scheduled.dequeue()
        Log.debug("Handling scheduled toggle for: " + target.getName())

        // Apply the change, keeping in mind that dequeueing above will
        // change the computation of the true value of the setting.
        Log.debug("Updating setting to: " + target.isSharing().toString())
        handleSetting(target, target.isSharing())

    // Cease polling once work is complete.
    destroy cb

// Handles the actual work for toggling the setting.
function handleSetting(player target, boolean value)
    // Add gold to pool upon sharing.
    if value
        // Look up the tribe for the player.
        let tribe = target.getTribe()

        // Ignore players without a tribe.
        if tribe != null
            // Add their gold into the pool.
            tribe.updateGold(target.getLumber())
    else
        // Reset gold upon disabling sharing.
        target.setLumber(0)

// Share gold upon leaving.
function onLeaver(player target)
    sharing.put(target, "true")

    // Look up the tribe for the player.
    let tribe = target.getTribe()

    // Ignore players without a tribe.
    if tribe == null
        return

    // Notify their allies, as necessary.
    for member in tribe.getMembers()
        if not sharing.get(member).toBool()
            member.print("Use -share-gold to access their gold.")

function handleTransaction(unit origin)
    handleTransaction(origin.getOwner())

function handleTransaction(player origin)
    Log.debug("Scheduling transaction for: " + origin.getName())
    // Look up the tribe for the transactor.
    let tribe = origin.getTribe()

    // Ignore and alarm for transactors without a tribe, an unexpected event.
    if tribe == null
        Log.error("Transactor does not have a tribe: " + origin.getName())
        return

    // Acquire the semaphore.
    pending += 1

    // Delay to ensure that the triggering transaction has been executed. This
    // is necessary because EVENT_PLAYER_UNIT_PAWN_ITEM fires prior to updating
    // the gold of the player selling the item.
    nullTimer() ->
        handleTransactions(tribe)

// Handle pending transactions for all members of the tribe.
function handleTransactions(Tribe tribe)
    Log.debug("Handling transaction involving: " + tribe.getName())

    // Look up the current gold for relevant pool.
    let current = pools.get(tribe)

    // Compute the gold differential across all members.
    let differential = tribe.getMembers()
        // Ignore members that are not sharing gold.
        .lodashFilter(member -> sharing.get(member).toBool())
        // Also consider the tribe player, which can pawn items.
        ..add(tribe.getNonMember())
        // Compute the differential for this player.
        .map(member -> member.getLumber() - current)
        .sum()

    // Apply the differential to the pool.
    Log.debug("Gold differential: {0}".format(differential.toString()))
    tribe.updateGold(differential)

    // Release the semaphore.
    pending -= 1

init
    // Delay initialization until tribes are set.
    registerTribeInitializationFinishEvent() ->
        initialize()

    // Sync when a unit buys an item from a shop.
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM) ->
        handleTransaction(GetBuyingUnit())

    // Sync when a unit sells an item to a shop.
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PAWN_ITEM) ->
        handleTransaction(GetTriggerUnit())

    // Sync when a unit picks up gold.
    // TODO: Support the possible items this via a registry.
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_ALLIGATOR_GOLD
            handleTransaction(GetTriggerUnit())
