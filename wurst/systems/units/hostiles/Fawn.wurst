package Fawn
import ID
import ClosuresForItems
import UnitUtils
import ClosureTimers
import DummyCaster
import ElkCritter
import BabyAnimal
import Orders
import UnitExtensions
import GameConfig
import LinkedList
import Game

let ACORN_DISTANCE_THRESHOLD_SQ = (50.0).squared()

public class Fawn extends BabyAnimal
    private static let unitTypeId = UNIT_FAWN
    private static let fawns = new LinkedList<thistype>()
    private static let iterator = fawns.iterator()

    static function initialize()
        register(unitTypeId, fawn -> new Fawn(fawn))
        registerGameStartEvent(function onGameStart)

    static function onGameStart()
        if gameConfig.isTameableFawnEnabled()
            doPeriodically(ANIMATION_PERIOD, cb -> nextFawnCheckForAcorn())

    static function nextFawnCheckForAcorn()
        if fawns.size() == 0
            return

        if not iterator.hasNext()
            iterator.reset()

        let next = iterator.next()
        next.checkForAcorn()

    construct(unit whichUnit)
        super(whichUnit)
        fawns.add(this)

    construct(player whichPlayer, vec2 pos)
        super(whichPlayer, pos)
        fawns.add(this)

    override function getTypeId() returns int
        return unitTypeId

    function checkForAcorn()
        let fawn = getUnit()
        if fawn.getOwner() != players[PLAYER_NEUTRAL_PASSIVE]
            return

        let pos = fawn.getPos()
        let acorn = findNearestItem(pos, 300, i -> i.getTypeId() == ITEM_ACORN)
        if acorn == null
            return

        let acornPos = acorn.getPos()
        if acornPos.distanceToSq(pos) > ACORN_DISTANCE_THRESHOLD_SQ
            fawn.issuePointOrderById(Orders.move, acornPos)
            return

        let troll = findNearestUnit(acornPos, 500, Filter(-> GetFilterUnit().isTroll()))
        if troll == null
            return

        let owner = troll.getOwner()

        new DummyCaster
            ..owner(owner)
            ..origin(acornPos.add(-100, 0))
            ..castImmediate(SPELL_ELK_CRITTER_ID, 1, Orders.mechanicalcritter)

        let charges = acorn.getCharges()
        if charges == 1
            acorn.remove()
        else
            acorn.setCharges(charges - 1)

        destroy this

    ondestroy
        fawns.remove(this)

init
    Fawn.initialize()
