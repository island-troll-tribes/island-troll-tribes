package PetGrowth

// Standard library imports:
import ClosureTimers
import LinkedList

// Local imports:
import FlyingUnitDefinition
import TrollUpgrade
import Pets
import Hawk
import UnitEntity
import IDUtils

// The frequency for which pet growth is checked.
let GROWTH_FREQUENCY = 4.

// The probability that a pet will advance.
let GROWTH_RATE = 1.

function checkGrowth(unit pet)
    // Look up the growth chain for the pet.
    let chain = pet.getPetGrowthChain()

    // Look up the next unit along the chain.
    let next = chain.get(chain.indexOf(pet.getTypeId()) + 1)

    // Exit if the unit is at the end of its chain or if it was not chosen.
    if next == 0 or GetRandomReal(0., 1.) > GROWTH_RATE
        return

    // Remove the old unit from being tracked.
    pet.getOwner().removePet()

    // Replace the pet.
    let replacement = replaceUnit(next, pet, false)

    // Register the replacement.
    replacement.getOwner().addPet(replacement)

    // Increment hawk abilities.
    if UnitEntity.findForUnit(pet) instanceof Hawk
        for abilityId in hawkAbilities
            // Calculate the new ability level.
            let level = pet.getAbilityLevel(abilityId) + GetRandomInt(0, 1)

            // Set the ability level for the replacement
            replacement.setAbilityLevel(abilityId, level.clamp(1, 6))

    // Remove the old pet once it is no longer needed.
    pet.remove()

init
    doPeriodically(GROWTH_FREQUENCY) (CallbackPeriodic cb) ->
        for pet in ENUM_GROUP..enumPets()
            checkGrowth(pet)
