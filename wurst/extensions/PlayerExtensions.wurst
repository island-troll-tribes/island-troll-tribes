package PlayerExtensions

// Standard library imports:
import HashMap
import HashSet

// Local imports:
import CameraUtils
import ForceExtensions
import initlater Tribe
import UnitExtensions

let newObs = new HashSet<player>()

let trolls = new HashMap<player, unit>()

public function player.getTribe() returns Tribe
    return Tribe.ofPlayer(this)

public function player.isPlaying() returns boolean
    return this.getController() == MAP_CONTROL_USER and this.getSlotState() == PLAYER_SLOT_STATE_PLAYING

public function player.subLumber(int val)
    this.subState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function player.getAllies() returns force
    return GetPlayersAllies(this)

public function player.setHandicapXP(real handicap)
    SetPlayerHandicapXP(this, handicap)

public function player.setColor(playercolor color, bool changeExisting)
    SetPlayerColorBJ(this, color, changeExisting)

public function player.isObserver() returns bool
    return IsPlayerObserver(this) or newObs.has(this)

public function player.removeTroll()
    // Remove both references to the current troll.
    trolls.getAndRemove(this).deregisterTroll()

public function player.setTroll(unit troll)
    // Ensure that each player only has one troll each.
    trolls.put(this..removeTroll(), troll..registerTroll())

public function player.getTroll() returns unit
    return trolls.get(this)

public function player.makeObserver()
    this.setState(PLAYER_STATE_OBSERVER, 1)
    this.setupObs()

public function player.makeObserverNew()
    newObs.add(this)
    this.setupObs()

public function player.isObserverNew() returns boolean
    return newObs.has(this)

public function player.setupObs()
    let iter = bj_FORCE_ALL_PLAYERS.iterator()
    for otherPlayer from iter
        SetPlayerAllianceStateBJ(otherPlayer, this, bj_ALLIANCE_NEUTRAL_VISION)

    SetPlayerAllianceStateBJ(this, players[PLAYER_NEUTRAL_AGGRESSIVE], bj_ALLIANCE_NEUTRAL)

public function player.setZoom(real zoom)
    setZoom(this, zoom)

public function player.getZoom() returns real
    return getZoom(this)

public function player.canControl(unit target) returns bool
    return GetPlayerAlliance(target.getOwner(), this, ALLIANCE_SHARED_CONTROL)

public function player.canSee(unit target) returns bool
    return GetPlayerAlliance(target.getOwner(), this, ALLIANCE_SHARED_VISION)

public function player.setTechMaxAllowed(integer techid, integer maximum)
    SetPlayerTechMaxAllowed(this, techid, maximum)

public function player.getTechMaxAllowed(integer techid) returns int
    return GetPlayerTechMaxAllowed(this, techid)

public function player.addTechResearched(integer techid, integer levels)
    AddPlayerTechResearched(this, techid, levels)

public function player.setTechResearched(integer techid, integer setToLevel)
    SetPlayerTechResearched(this, techid, setToLevel)

public function player.getTechResearched(integer techid, boolean specificonly) returns boolean
    return GetPlayerTechResearched(this, techid, specificonly)

public function player.getTechCount(integer techid, boolean specificonly) returns int
    return GetPlayerTechCount(this, techid, specificonly)
