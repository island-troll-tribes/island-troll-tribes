package ITTKnockback
import Assets
import TerrainUtils
import MapBounds
import LinkedListModule
import HashMap

/** The square rect size used for finding destructables. */
@configurable let DESTRUCTABLE_ENUM_SIZE	= 120.

/**
If enabled, units have their move-speed changed while airborne.
Warning: this is not a lock-safe form of crowd control.
*/
@configurable let USE_MOVE_SPEED_MODIFIERS  = true

/**
If enabled, units have their prop window changed while airborne.
Warning: this is not a lock-safe form of crowd control.
*/
@configurable let USE_PROP_WINDOW_MODIFIERS = true

public class ITTKnockback
	use LinkedListModule

	/**
	Fraction of velocity retained after colliding with ground/destructable.
	*/
	static var restitutionCoefficientGround	   = .2
	static var restitutionCoefficientDestructable = .3

	/** Ratio. */
	static var frictionCoefficientGround = .0725

	/** In units per second squared. */
	static var gravity = 90.

	/**
	If a unit is not falling faster than this, it will not bounce. Units
	per second.
	*/
	static var elasticityThreshold = -400.

	/**
	If a unit's vertical component is not greater than this, it will not
	become airborne. Units per second.
	*/
	static var airborneThreshold = 150.

	/**
	For the purposes of friction, distinguish a unit which is airborne
	versus one which is sliding. Height in units.
	*/
	static var isAirborneThreshold = 5.

	/** Below this speed, sliding units will stop. */
	static var minimumSlideSpeed = 30.

	/** Above this speed, sliding units will spawn a dust effect. */
	static var frictionFxThreshold = 45.
	static var frictionFxPath = Objects.impaleTargetDust

	/** Above this speed, destructables hit will be destroyed. */
	static var destroyDestructableSpeedThreshold = 3000.

	/** Below this height, destructables hit may be destroyed. */
	static var destroyDestructableHeightThreshold = -5.

	/**
	Apply a knockback vector to unit u. `velocity` is initial speed in units
	per second. `groundAngle` and `airAngle` are the direction and trajectory
	parameters, respectively. Example:

		import Knockback3
		...
		unit u = ...
		Knockback3.add(u, 1000., angle(0.), angle(bj_PI / 4.))
	*/
	static function add(unit u, real velocity, angle groundAngle, angle airAngle)
		let instVel = velocity * ANIMATION_PERIOD
		let v	   = ZERO3.polarProject(instVel, groundAngle, airAngle)

		if unitNodes.has(u)
			unitNodes.get(u).del += v
		else
			let knockback = new ITTKnockback()
			unitNodes.put(u, knockback)
			knockback.u   = u
			knockback.del = v
			if size == 1
				clock.startPeriodic(ANIMATION_PERIOD, function tick)

			if knockback.u.addAbility(HEIGHT_ENABLER)
				knockback.u.removeAbility(HEIGHT_ENABLER)


	/**
	Apply a knockback vector to unit u. If the unit is stopped, this vector will
	throw the unit to the position at vec2 `target`. Along the XY-plane, the
	unit will move `groundSpeed` units per second. Note that the more vertical
	angle will always be used from the pair of possible trajectories. Example:

		import Knockback3
		...
		unit u	 = ...
		let target = vec2(GetSpellTargetX(), GetSpellTargetY())

		Knockback3.add(u, target, 500.)
	*/
	static function add(unit u, vec2 target, real groundSpeed)
		let t	 = (target - u.getPos()).length() / groundSpeed
		let theta = u.getPos().angleTo(target)
		let velZ  = gravity * t / 2. / ANIMATION_PERIOD
		let vel   = theta.toVec(groundSpeed).withZ(velZ)
		let speed = vel.length()

		add(u, speed, theta, vec2(groundSpeed, vel.z).getAngle())


	static function setVel(unit u, real velocity, angle groundAngle, angle airAngle)
		if unitNodes.has(u)
			let knockback = unitNodes.get(u)
			let instVel   = velocity * ANIMATION_PERIOD

			knockback.del = ZERO3.polarProject(instVel, groundAngle, airAngle)
		else
			add(u, velocity, groundAngle, airAngle)


	static function getVel(unit u) returns vec3
		return unitNodes.has(u) ? unitNodes.get(u).del : ZERO3


	// Instance Variables
	private unit u
	private vec3 del


	private static function tickNearGround(ITTKnockback knockback, vec3 newPos3, vec3 pos3, bool newInMap, real velXySquared)
		if newPos3.toVec2().isTerrainWalkable() and newInMap
			knockback.u.setXY(newPos3)

			if knockback.del.z <= isAirborneThreshold
				knockback.del *= (1. - frictionCoefficientGround)

				if velXySquared > frictionFxThreshold * frictionFxThreshold * ANIMATION_PERIOD
					addEffect(frictionFxPath, knockback.u.getPos().withTerrainZ()).destr()

			if USE_MOVE_SPEED_MODIFIERS
				knockback.u.setMoveSpeed(knockback.u.getDefaultMovespeed())

			if USE_PROP_WINDOW_MODIFIERS
				knockback.u.setPropWindow(knockback.u.getDefaultPropWindow() * bj_DEGTORAD)

		else
			knockback.del = knockback.del.project(vec3(0., 0., 1.))

		if knockback.del.z < elasticityThreshold * ANIMATION_PERIOD
			knockback.del.z = knockback.del.z*-1.*restitutionCoefficientGround

		if knockback.del.z > airborneThreshold * ANIMATION_PERIOD
			knockback.u.setFlyHeight(pos3.z + knockback.del.z, 0.)
			knockback.del.z = knockback.del.z - gravity * ANIMATION_PERIOD


	private static function tickAboveGround(ITTKnockback knockback, vec3 newPos3, vec3 pos3)
		knockback.del.z -= gravity * ANIMATION_PERIOD
		let heightDifference = newPos3.getTerrainZ() - pos3.getTerrainZ()

		knockback.u..setFlyHeight(newPos3.z - heightDifference, 0.)
				   ..setXY(newPos3)

		if USE_MOVE_SPEED_MODIFIERS
			knockback.u.setMoveSpeed(0.)

		if USE_PROP_WINDOW_MODIFIERS
			knockback.u.setPropWindow(angle(0.))


	private static bool hitDestructable
	private static let destructableRect = Rect(-1 * DESTRUCTABLE_ENUM_SIZE, -1 * DESTRUCTABLE_ENUM_SIZE, DESTRUCTABLE_ENUM_SIZE, DESTRUCTABLE_ENUM_SIZE)

	private static function tickTryDestructable(ITTKnockback knockback, vec3 newPos3)
		hitDestructable = false
		MoveRectTo(destructableRect, newPos3.x, newPos3.y)
		EnumDestructablesInRect(destructableRect, null) ->
			let des = GetEnumDestructable()
			if des.getLife() > 0.
				des.kill()
				hitDestructable = true

		if hitDestructable
			knockback.del *= restitutionCoefficientDestructable


	private static constant unitNodes = new HashMap<unit, ITTKnockback>()

	private static function tickUnitDone(ITTKnockback knockback)
		knockback.u.setFlyHeight(0., 0.)
		unitNodes.remove(knockback.u)

		if USE_MOVE_SPEED_MODIFIERS
			knockback.u.setMoveSpeed(knockback.u.getDefaultMovespeed())

		if USE_PROP_WINDOW_MODIFIERS
			knockback.u.setPropWindow(knockback.u.getDefaultPropWindow() * bj_DEGTORAD)


	private static let	  clock	  = CreateTimer()

	private static function tick()
		for knockback from staticItr()
			let pos3		 = knockback.u.getPos3Zero()
			let newPos3	  = pos3 + knockback.del
			let newInMap	 = newPos3.inPlayable()
			let velXySquared = knockback.del.toVec2().lengthSq()

			if pos3.z < isAirborneThreshold
				tickNearGround(knockback, newPos3, pos3, newInMap, velXySquared)
			else if newInMap
				tickAboveGround(knockback, newPos3, pos3)

			if velXySquared > destroyDestructableSpeedThreshold * ANIMATION_PERIOD and pos3.z < destroyDestructableHeightThreshold
				tickTryDestructable(knockback, newPos3)

			if velXySquared < minimumSlideSpeed * ANIMATION_PERIOD and knockback.del.z > elasticityThreshold * ANIMATION_PERIOD and knockback.del.z < -1 * elasticityThreshold * ANIMATION_PERIOD and pos3.z < isAirborneThreshold
				tickUnitDone(knockback)
				knockback.remove()

		if size == 0
			clock.pause()
