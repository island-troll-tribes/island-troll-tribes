package ClassSelector

// Local imports:
import ClosureTimers
import HashMap
import LinkedList
import RegisterEvents

// Third-party imports:
import LodashExtensions

// Local imports:
import ColorUtils
import GameConfig
import LocalObjectIDs
import PlayerExtensions
import StringExtensions
import UnitExtensions
import TimerUtils
import Tribe

let UNIT_TROLL_TOTEM = 'o00H'

let spawnList = asList(
    gg_rct_revive_1,
    gg_rct_revive_2,
    gg_rct_revive_3,
    gg_rct_revive_4,
    gg_rct_revive_5,
    gg_rct_revive_6,
    gg_rct_revive_7,
    gg_rct_revive_8,
    gg_rct_revive_9,
    gg_rct_revive_10,
    gg_rct_revive_11,
    gg_rct_revive_12
)

let listeners = CreateTrigger()

public function registerClassSelectionEndEvent(code listener)
    listeners.addAction(listener)

public class ClassSelector
    static let spawners = new IterableMap<unit, thistype>()

    static function findByTotem(unit totem) returns thistype
        return spawners.get(totem)

    static function initializeSpawns()
        let randomSpawns = gameConfig.getRandomSpawns()
        let tribes = Tribe.getTribes()
        let numTribes = max(tribes.length(), randomSpawns)

        let spawns = spawnList.take(numTribes)
        if randomSpawns > 0
            spawns.shuffle()

        for tribe in tribes
            let spawn = spawns.dequeue()
            tribe.setSpawn(spawn)
            new ClassSelector(tribe)

    static function startClassSelection()
        initializeSpawns()

        var selectionTime = 0

        if not gameConfig.isAllTrollEnabled()
            selectionTime = gameConfig.getSelectionTimeAllowed()
            print("Choose a troll class.".color(GENERAL_COLOR))
            print("Your class will be random otherwise.".color(GENERAL_COLOR))

        let clock = getTimer()

        let clockDialog = clock.createTimerDialog()
        ..setTitle("Select Class")
        ..display(true)

        clock.doAfter(selectionTime.toReal()) ->
            spawners.values().each(spawner -> spawner.endSelection())
            listeners.execute()
            clockDialog.destr()

    static function initialize()
        registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL) ->
            findByTotem(GetSellingUnit()).handleUnitSold()

        registerTribeInitializationFinishEvent(function startClassSelection)

    Tribe tribe
    let pickers = new LinkedList<unit>()
    let pool = new LinkedList<int>()
    rect spawn
    unit totem

    construct(Tribe _tribe)
        tribe = _tribe

        if not tribe.isDefeated()
            spawn = tribe.getSpawn()

            initializeTotem()
            initializePool()
            initializePickers()

            spawners.put(totem, this)

    private function initializeTotem()
        let pos = spawn.getCenter()
        let owner = tribe.getMembers().getFirst()
        totem = createUnit(owner, UNIT_TROLL_TOTEM, pos, angle(0))
        ..addUnitToStock(UNIT_HUNTER, 1, 1)
        ..addUnitToStock(UNIT_BEAST_MASTER, 1, 1)
        ..addUnitToStock(UNIT_MAGE, 1, 1)
        ..addUnitToStock(UNIT_PRIEST, 1, 1)
        ..addUnitToStock(UNIT_THIEF, 1, 1)
        ..addUnitToStock(UNIT_SCOUT, 1, 1)
        ..addUnitToStock(UNIT_GATHERER, 1, 1)
        ..addUnitToStock(UNIT_REPICK_TROLL, 1, 1)
        ..addUnitToStock(UNIT_RANDOM_TROLL, 1, 1)

    private function initializePool()
        let allTrollUnitId = gameConfig.getAllTrollUnitId()
        if gameConfig.isAllTrollEnabled() and allTrollUnitId != 0
            pool.add(allTrollUnitId)
        else
            pool
            ..add(UNIT_HUNTER)
            ..add(UNIT_MAGE)
            ..add(UNIT_BEAST_MASTER)
            ..add(UNIT_PRIEST)
            ..add(UNIT_THIEF)
            ..add(UNIT_SCOUT)
            ..add(UNIT_GATHERER)

    private function initializePickers()
        let pos = spawn.getCenter()
        for member in tribe.getMembers()
            pickers.push(createUnit(member, UNIT_HERO_PICKER, pos.polarOffset(angle(PI), 1200), angle(0)))
            member.panCamToTimed(totem, 0)
            doAfter(0.3) ->
                member.selectSingle(totem)

    function endSelection()
        if gameConfig.isStartWithOneFire()
            let owner = tribe.getMembers().getFirst()
            createUnit(owner, UNIT_FIRE, spawn.getCenter(), angle(0))

        pickers.each(picker -> picker.remove())

        for member in tribe.getMembers()
            var troll = member.getTroll()
            if troll == null
                // Here we are not using handleRandom, because we remove the totem
                // later and the code relies on the totem existing on sell events
                // and the sell event is fired after the removal of the totem
                // This means the stocking/restocking will not work, but this doesn't
                // matter as players will have already picked by this point
                troll = placeRandomTroll(member)
                handleSelection(member, troll)

            troll
            ..unpause()

        totem.remove()

    function getRandomTrollId() returns int
        return pool.get(GetRandomInt(0, pool.size()-1))

    function placeRandomTroll(player p) returns unit
        return createUnit(p, getRandomTrollId(), spawn.randomPoint(), angle(0))

    function setClassUnavailable(int which)
        if not gameConfig.isOldRandomEnabled() and gameConfig.getAllTrollUnitId() == 0
            pool.remove(which)

    function setClassAvailable(int which)
        pool.add(which)

    function handleUnitSold()
        if GetSellingUnit().getTypeId() == UNIT_TROLL_TOTEM
            let sold = GetSoldUnit()
            let owner = sold.getOwner()
            if sold.getTypeId() == UNIT_REPICK_TROLL
                sold.remove()
                handleTrollRemoval(owner)
            else if sold.getTypeId() == UNIT_RANDOM_TROLL
                sold.remove()
                handleRandom(owner)
            else
                handleSelection(owner, sold)

    function handleSelection(player owner, unit troll)
        let trollId = troll.getTypeId()

        // Prevent having 2 trolls at the same time
        handleTrollRemoval(owner)

        setClassUnavailable(trollId)
        owner.setTroll(troll)

        troll
            ..pause()
            ..setHeat(gameConfig.getMaxHeat())
            ..setLevel(gameConfig.startingLevel, false)

        if gameConfig.isStartWithFire()
            troll.addItemById(ITEM_FIRE_KIT)
        if gameConfig.isStartWithSpiritWard()
            troll.addItemById(ITEM_SPIRIT_WARD_KIT)

    function handleTrollRemoval(player p)
        let troll = p.getTroll()
        if troll != null
            let trollId = troll.getTypeId()

            setClassAvailable(trollId)
            totem.addUnitToStock(trollId, 1, 1)
            p.removeTroll()
            troll.remove()

    function handleRandom(player p)
        let trollId = getRandomTrollId()
        IssueNeutralImmediateOrderById(p, totem, trollId)

init
    ClassSelector.initialize()
