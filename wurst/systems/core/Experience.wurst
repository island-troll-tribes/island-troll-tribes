package Experience

// Standard library imports:
import ClosureTimers
import DummyCaster
import LinkedList
import RegisterEvents

// Local imports:
import Classes
import BeastMaster
import GroupUtils
import Hunter
import LocalObjectIDs
import PlayerExtensions
import UnitEntity
import UnitExtensions

constant creepExp = [3, 25]
constant heroExp = [0, 100, 120, 160, 220, 300]
constant expPerLevel = [0, 200]
constant expRange = 1200.0
public constant GOK_MULTIPLIER = 1.5

public function getMultiplier(unit troll) returns integer
    switch getTrollClassType(troll)
        case BASE_CLASS
            return 4
        case SUB_CLASS
            return 3
        case SUPER_CLASS
            return 2
        default
            return 1

function performExperienceGain()
    let dead = GetDyingUnit()
    let killer = GetKillingUnit()

    // Do not grant experience for team kills or deaths without a killer.
    if killer == null or killer.isAllyOf(dead)
        return

    // Enumerate all allies that will share the experience.
    let heroes = ENUM_GROUP
        ..enumUnitsInRange(killer.getPos(), expRange, null)
        .asList()
        .filter(
            target -> (
                target.isType(UNIT_TYPE_HERO) and
                target.isAllyOf(killer) and
                target.isAlive() and
                target != killer
            )
        )

    // Add the appropriate unit responsible for the kill.
    if killer.isType(UNIT_TYPE_HERO)
        heroes.add(killer)
    else
        heroes.add(killer.getOwner().getTroll())

    let deadUnitLevel = dead.getLevel()
    let baseExp = dead.isType(UNIT_TYPE_HERO)
        ? heroExp[deadUnitLevel]
        : creepExp[deadUnitLevel]
    let reduceExpGain = dead.getOwner().getId() == PLAYER_NEUTRAL_AGGRESSIVE

    for hero in heroes
        let multiplier = getMultiplier(hero)
        var experience = (baseExp * multiplier / heroes.size()).floor()
        var level = hero.getLevel()
        var heroCurrentXp = hero.getXp()

        // Increase experience for Gem of Knowledge holders.
        if hero.hasItemById(ITEM_GEM_OF_KNOWLEDGE)
            var entity = UnitEntity.findForUnit(hero)
            if not (entity instanceof BeastMaster or entity instanceof Hunter)
                experience = (experience * GOK_MULTIPLIER).floor()

        while experience > 0
            let expReduction = reduceExpGain
                ? max(0.4, 0.9 - 0.1 * level)
                : 1.0
            let expThisLevel = expPerLevel[level] - heroCurrentXp
            let expGain = (experience * expReduction).toInt()
            if expGain > expThisLevel
                heroCurrentXp += expThisLevel
                experience -= (expThisLevel / expReduction).toInt()
                level += 1
            else
                heroCurrentXp += expGain
                experience = 0

        hero.setXp(heroCurrentXp)

    // Deallocate the structures used.
    destroy heroes



init
    for i = 2 to 30
        creepExp[i] = creepExp[i - 1] + (i + 1) * 5
        expPerLevel[i] = expPerLevel[i - 1] * 2 - expPerLevel[i - 2] + 100

    for i = 6 to 30
        heroExp[i] = heroExp[i - 1] + 100

    for i = 0 to PLAYER_NEUTRAL_AGGRESSIVE - 1
        players[i].setHandicapXP(0)

    doPeriodically(ANIMATION_PERIOD) (cb) ->
        for troll in getTrolls()
            let owner = troll.getOwner()
            if (troll.getMana() < 1 or troll.getHeat() < 1) and troll.isAlive()
                let pos = troll.getPos()
                let killer = ENUM_GROUP
                    ..enumUnitsInRange(
                        pos,
                        expRange,
                        Filter(() -> GetFilterUnit().getOwner().getTroll() != null)
                    )
                    .asList()
                    .filter(x -> not x.getOwner().isAllyOf(owner))
                    ..sortWith(
                        (a, b) -> (
                            a.getPos().distanceToSq(pos) - b.getPos().distanceToSq(pos)
                        ).toInt()
                    )
                    .getFirst()

                if killer == null
                    troll.kill()
                else
                    killer.damageTarget(troll, troll.getHP() * 2, ATTACK_TYPE_CHAOS)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function performExperienceGain)
