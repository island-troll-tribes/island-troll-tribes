package FrostBlast

import ClosureEvents
import ClosureTimers
import OverCharge
import Assets
import ClosureForGroups
import Orders
import BuffObjEditing
import DummyCaster
import Lodash
import ChannelAbilityPreset
import ToolTipsUtils

let ABILITY_ID = 'ESFB'
let DUMMY_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
let DUMMY_ABILITY_BUFF_ID = compiletime(BUFF_ID_GEN.next())
let BUFF_SLOW = 'Bfro'
let COOLDOWN = 28.
let MISSILE_SPEED = 1100.
let MISSILE_LIFETIME = 1.5
let MANACOST = 12
let IMPACT_TRIGGER_AOE = 130.
let MISSILE_FLY_HEIGHT = 140.
let IMPACT_EFFECT_AOE = 250.
let OVERCHARGE_DAMAGE_MULTIPLIER = 0.3
let OVERCHARGE_PROJECTILE_COUNT = 7
let OVERCHARGE_PROJECTILE_INTERVAL = 0.35
let IMPACT_EFFECT_MIN_DAMAGE = 25.
let IMPACT_EFFECT_MAX_DAMAGE = 65.
let IMPACT_EFFECT_MIN_SLOW_AMOUNT = 0.35
let IMPACT_EFFECT_MAX_SLOW_AMOUNT = 0.75
let IMPACT_EFFECT_MIN_DURATION = 2.
let IMPACT_EFFECT_MAX_DURATION = 5.
let SPAWN_OFFSET_DISTANCE = 50.
let LOOP_INTERVAL = 0.03125
let SPELL_ICON = Icons.bTNFrostBolt
let PROJECTILE_EFFECT_PATH = Abilities.frostWyrmMissile
let PROJECTILE_EFFECT_PATH_OVERCHARGED = Abilities.zigguratFrostMissile

let IMPACT_EFFECT_PATH = Abilities.frostNovaTarget
let TOOLTIP_NORM = "Frost Blast"
let TOOLTIP_EXTENDED = ("Shoots out a missile of frost that explodes on impact, dealing {0} - {1} damage to units in a small area and slows "+
                       "their movement and attack speeds by {2} - {3} for {4} - {5} seconds with effects increasing by distance travelled before impact. "+
                       "Has {6} seconds cooldown.").format(IMPACT_EFFECT_MIN_DAMAGE.toToolTipRed(), IMPACT_EFFECT_MAX_DAMAGE.toToolTipRed(),
                       IMPACT_EFFECT_MIN_SLOW_AMOUNT.toToolTipOrange(), IMPACT_EFFECT_MAX_SLOW_AMOUNT.toToolTipOrange(),
                       IMPACT_EFFECT_MIN_DURATION.toToolTipLightBlue(), IMPACT_EFFECT_MAX_DURATION.toToolTipLightBlue(), COOLDOWN.toToolTipLightBlue())

function createBuff()
    new BuffDefinition(DUMMY_ABILITY_BUFF_ID, BUFF_SLOW)
    ..setTooltipNormal(1, "Frost Blast slow")
    ..setTooltipNormalExtended(1, "Slowed by Frost Blast")
    ..setIcon(SPELL_ICON)
    ..setIconNormal(1, SPELL_ICON)

function createDummySlow()
    new AbilityDefinitionSlowCreep(DUMMY_ABILITY_ID)
    ..setLevels(10)
    ..setArtCaster("")
    ..setArtEffect("")
    ..setArtTarget("")
    ..setArtSpecial("")
    ..presetBuffs(lvl -> toRawCode(DUMMY_ABILITY_BUFF_ID))
    ..presetCastingTime(lvl -> 0)
    ..presetCastRange(lvl -> 9999)
    ..presetAreaofEffect(lvl -> 0)
    ..presetManaCost(lvl -> 0)
    ..presetCooldown(lvl -> 0)
    ..presetAttackSpeedFactor(lvl -> IMPACT_EFFECT_MIN_SLOW_AMOUNT + (IMPACT_EFFECT_MAX_SLOW_AMOUNT-IMPACT_EFFECT_MIN_SLOW_AMOUNT)/9* (lvl-1))
    ..presetMovementSpeedFactor(lvl -> IMPACT_EFFECT_MIN_SLOW_AMOUNT + (IMPACT_EFFECT_MAX_SLOW_AMOUNT-IMPACT_EFFECT_MIN_SLOW_AMOUNT)/9* (lvl-1))
    ..presetDurationHero(lvl -> IMPACT_EFFECT_MIN_DURATION + (IMPACT_EFFECT_MAX_DURATION-IMPACT_EFFECT_MIN_DURATION)/9 * (lvl-1))
    ..presetDurationNormal(lvl -> IMPACT_EFFECT_MIN_DURATION + (IMPACT_EFFECT_MAX_DURATION-IMPACT_EFFECT_MIN_DURATION)/9 * (lvl-1))
    ..setLevelSkipRequirement(0)
    ..setHeroAbility(false)
    ..setItemAbility(false)

class FrostBlast extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setTargetType(1, 0)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(SPELL_ICON)
        this.setIconResearch(SPELL_ICON)
        this.setIconTurnOff(SPELL_ICON)
        this.setHeroAbility(false)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.setDisableOtherAbilities(1, false)
        this.setFollowThroughTime(1, 0)
        this.setCastingTime(1, 0)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_EXTENDED)
        this.setCooldown(1, COOLDOWN)
        this.setManaCost(1, MANACOST)
        this.setTargetType(1, 3)
        this.setCastRange(1, MISSILE_SPEED * MISSILE_LIFETIME)

@compiletime function createFrostBlast()
    new FrostBlast(ABILITY_ID, "E", new Pair(2, 0))
    createBuff()
    createDummySlow()

class FrostBlastProjectile
    real lifeTime
    unit ownerUnit
    angle ang
    vec3 pos
    effect efx
    bool foundTarget
    bool exploded
    bool isOvercharged

    construct(unit owner, vec3 pos, angle ang, bool isOvercharged)
        this.ownerUnit = owner
        this.lifeTime = 0
        this.isOvercharged = isOvercharged
        this.ang = ang
        this.pos = pos
        if isOvercharged
            this.efx = addEffect(PROJECTILE_EFFECT_PATH_OVERCHARGED, pos)
            efx.setScale(1.5)
        else
            this.efx = addEffect(PROJECTILE_EFFECT_PATH, pos)
        this.foundTarget = false
        this.exploded = false
        this.efx.setRoll(ang)


    ondestroy
        if this.efx != null
            this.efx.destr()

    function updateLoop()
        //Dont do anything and wait for destruction by closure if already exploded
        if this.exploded
            return
        this.lifeTime += LOOP_INTERVAL
        vec3 newPos = this.pos.offset2d(this.ang, MISSILE_SPEED * LOOP_INTERVAL)
        let terrainZ = newPos.getTerrainZ()
        newPos.z = terrainZ + MISSILE_FLY_HEIGHT
        this.efx.setPos(newPos)
        this.pos = newPos
        checkForImpacts()
        if (this.foundTarget)
            spawnTemporaryVision(450, 2)
            explode()

    function checkForImpacts()
        this.foundTarget = false
        forUnitsInRange(this.pos.toVec2(), IMPACT_TRIGGER_AOE) u ->
            if isValidTarget(ownerUnit, u)
                this.foundTarget = true

    function spawnTemporaryVision(real radius, real duration)
        let vis = createVision(ownerUnit.getOwner(), this.pos.toVec2(), radius, true)
        vis.start()
        doAfter(duration) ->
            vis.destr()

    function explode()
        //Scale slow and damage by missile flight time relative to 80% of max lifetime
        var effectScalingValue = this.lifeTime/(MISSILE_LIFETIME*0.75)
        if effectScalingValue > 1
            effectScalingValue = 1

        int slowTier = 1 + (9*effectScalingValue).round()
        real damage = IMPACT_EFFECT_MIN_DAMAGE + (IMPACT_EFFECT_MAX_DAMAGE-IMPACT_EFFECT_MIN_DAMAGE)*effectScalingValue
        if (isOvercharged)
            damage = damage * OVERCHARGE_DAMAGE_MULTIPLIER

        forUnitsInRange(this.pos.toVec2(), IMPACT_EFFECT_AOE) u ->
            if isValidTarget(this.ownerUnit, u)
                if effectScalingValue >= 0.7
                    flashEffect(IMPACT_EFFECT_PATH, u, "chest")
                UnitDamageTarget(ownerUnit, u, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
                new DummyCaster()
                    ..owner(this.ownerUnit.getOwner())
                    ..origin(this.efx.getPos())
                    ..castTarget(DUMMY_ABILITY_ID, slowTier, Orders.slow, u)
        this.exploded = true
        this.efx.destr()
        this.efx = null

function onCast()
    let caster = GetSpellAbilityUnit()
    let casterPos = caster.getPos()
    let targetX = GetSpellTargetX()
    let targetY = GetSpellTargetY()
    let targetPos = vec2(targetX, targetY)
    let targetAngle = casterPos.angleTo(targetPos)
    let isOverCharged = consumeOvercharge(caster)
    if not isOverCharged
        spawnProjectile(caster, targetAngle)
    else
        sprayOverchargedProjectiles(caster, targetPos)

function sprayOverchargedProjectiles(unit caster, vec2 targetPos)
    doPeriodicallyCounted(OVERCHARGE_PROJECTILE_INTERVAL, OVERCHARGE_PROJECTILE_COUNT) cb ->
        if caster.isAlive()
            let casterPos = caster.getPos()
            let ang = casterPos.angleTo(targetPos)
            let spawnPos = casterPos.polarOffset(ang, SPAWN_OFFSET_DISTANCE).withTerrainZ(MISSILE_FLY_HEIGHT)
            var projectile = new FrostBlastProjectile(caster, spawnPos, ang, true)

            doPeriodicallyTimed(LOOP_INTERVAL, MISSILE_LIFETIME) updateLoop ->
                if (updateLoop.isLast())
                    if projectile != null
                        destroy projectile
                else
                    if projectile != null
                        projectile.updateLoop()
        else
            cb.stop()

function spawnProjectile(unit caster, angle ang)
    let casterPos = caster.getPos()
    let spawnPos = casterPos.polarOffset(ang, SPAWN_OFFSET_DISTANCE).withTerrainZ(MISSILE_FLY_HEIGHT)
    var projectile = new FrostBlastProjectile(caster, spawnPos, ang, false)

    doPeriodicallyTimed(LOOP_INTERVAL, MISSILE_LIFETIME) updateLoop ->
        if (updateLoop.isLast())
            if projectile != null
                destroy projectile
        else
            if projectile != null
                projectile.updateLoop()

function isValidTarget(unit caster, unit target) returns bool
    return target.getOwner().isEnemyOf(caster.getOwner())
        and not target.isInvulnerable()
        and not target.isType(UNIT_TYPE_FLYING)
        and target.isAlive()
        and not target.isHidden()
        and not target.isType(UNIT_TYPE_STRUCTURE)


init
    registerSpellEffectEvent(ABILITY_ID, () -> onCast())
