package EarthGuardian
import RegisterEvents
import HashMap
import LinkedList
import ClosureForGroups
import ClosureTimers
import OverCharge
import Orders
import BuffObjEditing
import DummyCaster
import ChannelAbilityPreset
import Assets
import ToolTipsUtils
import LocalObjectIDs

let BUFF_DMG_REDUCER      = compiletime(BUFF_ID_GEN.next())
let BUFF_DAZE             = compiletime(BUFF_ID_GEN.next())
let DUMMY_DAZE_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
let DUMMY_BUFF_ABILITY_ID = compiletime(ABIL_ID_GEN.next())

let COOLDOWN = 35.
let MANACOST = 20

let IMPACT_DAZE_DURATION_HERO = 0.5
let IMPACT_DAZE_DURATION_NORMAL = 0.5
let DAZE_ATTACK_SPEED_FACTOR = 0.8
let ORB_ATTACK_RADIUS = 575.
let ORB_ATTACK_COOLDOWN = 0.35
let ORB_IMPACT_DAMAGE = 40.
let ORB_IMPACT_DAMAGE_SAMETARGET = 10.
let ORB_SAMETARGET_BUFF_MARKER_DURATION = 1.5
let ORB_LIFETIME = 25.
let ORB_SPEED = 650.
let ORB_SPAWN_INTERVAL = 0.35
let CHANNEL_DURATION = 0.35*7 //7 Projectiles
let ORB_PERIODICINTERVAL_SPAWN = 0.05
let ORB_PERIODICINTERVAL_LOOP = 0.03125
let ORB_ANGULARORBITSPEED = 100.
let ORB_ORBIT_RADIUS = 150.
let ORB_ORBIT_HEIGHT = 140.

let ABILITY_ICON = Icons.bTNGolemStormBolt
let TOOLTIP_NORM = "Earth Guardians"
let TOOLTIP_EXT = (
    "Channels to conjure 7 earth orbs that circle around you, striking enemies "+
    "that come close for {0} damage and slow their attack speed by {1}. "+
    "Subsequent impacts on the same target do {2} damage.")
    .format(
        DAZE_ATTACK_SPEED_FACTOR.toToolTipOrange(),
        ORB_IMPACT_DAMAGE.toToolTipRed(),
        ORB_IMPACT_DAMAGE_SAMETARGET.toToolTipRed()
    ) + makeToolTipCooldown(COOLDOWN)


@compiletime function createDazeAbility()
    new BuffDefinition(BUFF_DAZE, 'BHtc')
    ..setIcon(Icons.bTNStun)
    ..setTooltipNormal(1, "Dazed")
    ..setTooltipNormalExtended(1,
        "This unit is dazed; its movement and attack speed are reduced")

    new AbilityDefinitionSlowCreep(DUMMY_DAZE_ABILITY_ID)
    ..setDummyAbility()
    ..setAnimationNames("")
    ..setBuffs(1, BUFF_DAZE.toRawCode())
    ..setMissileArt("")
    ..setMissileHomingEnabled(true)
    ..setCastingTime(1, 0)
    ..setDurationHero(1, IMPACT_DAZE_DURATION_HERO)
    ..setDurationNormal(1, IMPACT_DAZE_DURATION_NORMAL)
    ..setItemAbility(false)
    ..setLevels(1)
    ..setManaCost(1, 0)
    ..setRace(Race.Creeps)
    ..setName("Orb daze Dummy Spell")
    ..setMovementSpeedFactor(1, 0.0)
    ..setAttackSpeedFactor(1, DAZE_ATTACK_SPEED_FACTOR)


// Dummy spell to apply a buff used to check if the target has been recently
// hit by an orb, if yes, reduce next orb damage on impact
@compiletime function createDamageReducer()
    new BuffDefinition(BUFF_DMG_REDUCER, 'Bclf')
        ..setIcon(Icons.bTNResistantSkin)
        ..setTooltipNormal(1, "Hit by earth orbs")
        ..setTooltipNormalExtended(1, "Hit by earth orbs")

    new AbilityDefinitionAlchemistAcidBomb(DUMMY_BUFF_ABILITY_ID)
        ..setDummyAbility()
        ..setMissileSpeed(20000)
        ..setBuffs(1, BUFF_DMG_REDUCER.toRawCode())
        ..setMissileArt("")
        ..setDurationHero(1, ORB_SAMETARGET_BUFF_MARKER_DURATION)
        ..setDurationNormal(1, ORB_SAMETARGET_BUFF_MARKER_DURATION)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Orb Damage Reducer Dummy Spell")
        ..setArmorPenalty(1, 0)
        ..setAreaofEffect(1, 1)
        ..setAttackSpeedReduction(1, 0)
        ..setMovementSpeedReduction(1, 0)
        ..setSecondaryDamage(1, 0)
        ..setPrimaryDamage(1, 0)


function createEarthGuardian(int abilId, string hotkey) returns ChannelAbilityPreset
    return new ChannelAbilityPreset(abilId, 1, true)
        ..setTargetType(1, 0)
        ..setAnimationNames("spell,channel")
        ..setIconNormal(ABILITY_ICON)
        ..setIconResearch(ABILITY_ICON)
        ..setIconTurnOff(ABILITY_ICON)
        ..setHeroAbility(false)
        ..setHotkeyNormal(hotkey)
        ..presetButtonPosNormal(1, 0)
        ..setName(TOOLTIP_NORM)
        ..setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        ..setTooltipNormalExtended(1, TOOLTIP_EXT)
        ..setFollowThroughTime(1, CHANNEL_DURATION)
        ..setCooldown(1, COOLDOWN)
        ..setManaCost(1, MANACOST)
        ..setBaseOrderID(1, "auravampiric")

@compiletime function createEarthGuardian()
    createEarthGuardian(ABILITY_EARTH_GUARDIAN, "W")


let instances = new HashMap<unit, EarthGuardianInstance>()

class EarthGuardianOrb
    EarthGuardianInstance instance
    unit ownerUnit = null
    real speed = ORB_SPEED
    effect projectile = null
    vec3 targetPos
    unit targetUnit = null

    construct (unit owner, EarthGuardianInstance earthGuardian, vec3 startPos)
        ownerUnit = owner
        instance = earthGuardian
        projectile = addEffect(Abilities.ancientProtectorMissile, startPos)
        projectile.setScale(0.65)
        targetUnit = null

    function moveTowardTargetPos()
        //Update target location to targeted unit if one exists
        if (targetUnit != null)
            if (targetUnit.isAlive())
                targetPos = targetUnit.getPos3Real()

        //Limit movement by speed
        let oldpos = projectile.getPos3()
        vec3 newpos
        if (oldpos.distanceTo(targetPos) <= ORB_SPEED * ORB_PERIODICINTERVAL_SPAWN)
            newpos = targetPos
            if (targetUnit != null)
                onImpactEffect()
        else
            newpos = oldpos + oldpos.normalizedPointerTo(targetPos) * ORB_SPEED * ORB_PERIODICINTERVAL_SPAWN

        projectile.setPos(newpos)

    function updateTarget()
        if (targetUnit == null and instance.orbLoopDuration >= 0.55)
            tryToFindTarget()
            //Put newly acquired target into timestamp map
            if targetUnit != null
                instance.targetedTimestampMap.put(targetUnit, instance.orbLoopDuration)
        else if (targetUnit != null)
            //If we have a target, check that its still valid and untarget if not
            if not targetUnit.isAlive() or targetUnit.isInvulnerable() or not IsUnitVisible(targetUnit, ownerUnit.getOwner()) or not ownerUnit.getOwner().isEnemyOf(targetUnit.getOwner())
                targetUnit = null

    function tryToFindTarget()
        let curPos = this.projectile.getPos()
        targetUnit = null
        forUnitsInRange(curPos, ORB_ATTACK_RADIUS) u ->
            if isValidTarget(u)
                //check if unit has been targeted previously by orb to check for target-specific cooldown
                if (instance.targetedTimestampMap.has(u))
                    if (instance.orbLoopDuration - instance.targetedTimestampMap.get(u) >= ORB_ATTACK_COOLDOWN)
                        //Get the closest unit if multiples happen to come into range at once
                        if (targetUnit != null)
                            if (curPos.distanceToSq( targetUnit.getPos() ) > curPos.distanceToSq(u.getPos()))
                                targetUnit = u
                        else
                            targetUnit = u
                else
                    //Get the closest unit if multiples happen to come into range at once
                    if (targetUnit != null)
                        if (curPos.distanceToSq( targetUnit.getPos() ) > curPos.distanceToSq(u.getPos()))
                            targetUnit = u
                    else
                        targetUnit = u

    function isValidTarget(unit u) returns boolean
        return IsUnitVisible(u, ownerUnit.getOwner())
            and not u.isType(UNIT_TYPE_STRUCTURE)
            and not u.isHidden() and u.isAlive()
            and not u.isInvulnerable()
            and u.getOwner().isEnemyOf(ownerUnit.getOwner())

    function updateLoop()
        updateTarget()
        moveTowardTargetPos()

    function onImpactEffect()
        if (targetUnit.isAlive() and not targetUnit.isInvulnerable())
            if (targetUnit.hasAbility(BUFF_DMG_REDUCER)) //If hit previously by another orb
                UnitDamageTarget(ownerUnit, targetUnit, ORB_IMPACT_DAMAGE_SAMETARGET, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
            else
                UnitDamageTarget(ownerUnit, targetUnit, ORB_IMPACT_DAMAGE, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, null)
            new DummyCaster()
                ..owner(ownerUnit.getOwner())
                ..origin(ownerUnit.getPos())
                ..castTarget(DUMMY_DAZE_ABILITY_ID, 1, Orders.slow, targetUnit)
            new DummyCaster()
                ..owner(ownerUnit.getOwner())
                ..origin(ownerUnit.getPos())
                ..castTarget(DUMMY_BUFF_ABILITY_ID, 1, Orders.acidbomb, targetUnit)

        let efx = addEffect(Objects.impaleTargetDust, projectile.getPos3())
        efx.setScale(1)
        doAfter(3) ->
            efx.destr()
        destroy this


    ondestroy
        instance.orbs.remove(this)
        projectile.destr()


class EarthGuardianInstance
    angle orbAngle
    unit ownerUnit
    bool isChanneling
    bool isOvercharged
    real orbLoopDuration
    CallbackCounted orbLoopPeriodic
    CallbackCounted orbCreationLoopPeriodic
    let targetedTimestampMap = new HashMap<unit, real>()
    LinkedList<EarthGuardianOrb> orbs = new LinkedList<EarthGuardianOrb>()

    construct (unit caster, bool overcharged)
        isOvercharged = overcharged
        ownerUnit = caster
        real channeledTime = 0
        real _lastOrbCreatedTimestamp = 0
        orbLoopDuration = 0
        let orb_interval = ORB_SPAWN_INTERVAL
        isChanneling = true

        if not overcharged
            //Create orbs via channeling if not overcharged
            orbCreationLoopPeriodic = doPeriodicallyTimed(ORB_PERIODICINTERVAL_SPAWN, CHANNEL_DURATION) orbcreation ->
                if (isChanneling)
                    channeledTime = channeledTime + ORB_PERIODICINTERVAL_SPAWN
                    //Avoid floating point errors in the interval check with the -0.01
                    if (channeledTime - _lastOrbCreatedTimestamp >= orb_interval-0.01)
                        orbs.push(new EarthGuardianOrb(ownerUnit, this, caster.getPos().withTerrainZ(ORB_ORBIT_HEIGHT)))
                        _lastOrbCreatedTimestamp = channeledTime
                else
                    orbCreationLoopPeriodic.stop()
        else
            //Create orbs instantly if overcharged
            let count = (CHANNEL_DURATION/ORB_SPAWN_INTERVAL).round()
            for i = 1 to count
                orbs.push(new EarthGuardianOrb(ownerUnit, this, caster.getPos().withTerrainZ(ORB_ORBIT_HEIGHT)))

        this.startOrbLoop()


    function startOrbLoop()
        orbAngle = angle(0)

        orbLoopPeriodic = doPeriodicallyTimed(ORB_PERIODICINTERVAL_LOOP, ORB_LIFETIME) orbLoop ->
            orbLoopDuration += ORB_PERIODICINTERVAL_LOOP
            //Check for destruction conditions first before accessing any objects
            if (orbLoop.isLast() or (orbs.size() == 0 and not isChanneling))
                if (not orbLoop.isLast()) //Make this stop in case the entry condition was orbs.size = 0
                    orbLoop.stop()
                destroy this
            else
                orbLoopUpdate()

    function orbLoopUpdate()
        orbAngle = angle(orbAngle.radians() + ORB_PERIODICINTERVAL_LOOP * ORB_ANGULARORBITSPEED * DEGTORAD)
        int orbsWithoutTarget = 0

        //Calculate orb angles and set them to spin around user
        for o in orbs
            if (o.targetUnit == null)
                orbsWithoutTarget += 1
        angle orbOffset = angle(bj_PI/4)
        if (orbsWithoutTarget != 0)
            orbOffset = angle(2 * bj_PI / orbsWithoutTarget )

        //When we have angle offset amount per orb, apply it to orbs
        int i = 0
        for o in orbs
            let indexOrbAngle = orbAngle + orbOffset * i.toReal()
            if (o.targetUnit == null)
                o.targetPos = ownerUnit.getPos().withTerrainZ(ORB_ORBIT_HEIGHT).offset2d(indexOrbAngle, ORB_ORBIT_RADIUS)
            o.updateLoop()
            i = i + 1

    ondestroy
        orbs.forEach(o -> destroy o)
        destroy orbs

        destroy targetedTimestampMap

        if instances.has(ownerUnit)
            if (instances.get(ownerUnit) == this)
                instances.remove(ownerUnit)

function onCast()
    let caster = GetSpellAbilityUnit()

    //Destroy previous instance
    if instances.has(caster)
        let prev_instance = instances.get(caster)
        prev_instance.orbLoopPeriodic.stop()


    let earthGuardian = new EarthGuardianInstance(caster, consumeOvercharge(caster))
    instances.put(caster, earthGuardian)

function onEndCast()
    if GetSpellAbilityId() == ABILITY_EARTH_GUARDIAN
        let caster = GetSpellAbilityUnit()
        var instance = instances.get(caster)
        instance.isChanneling = false

init
    registerSpellEffectEvent(ABILITY_EARTH_GUARDIAN, () -> onCast())
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onEndCast())
