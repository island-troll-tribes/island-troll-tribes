package WardArea

// Standard library imports:
import ChannelAbilityPreset
import ClosureEvents

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import ToolTipsUtils
import LivingClay

let ABILITY_ICON = "ReplaceableTextures\\CommandButtons\\BTNGreenSentryWard.blp"

let COOLDOWN = 70.
let SPY_COOLDOWN = COOLDOWN - 30

// Radius that obs/spy wards are randomly dropped around target pos.
let RANDOM_PLACEMENT_RANGE = 600.

let WARD_DURATION = 480.

let TOOLTIP_NORM = "Ward the Area"
let TOOLTIP_BASE_EXT = "Places a living clay at the target spot. Living clay last {0} seconds, has {1} seconds cooldown."
let TOOLTIP_SUB_EXT = "Places a living clay at the target spot and {0}|r living clay in the area around you. Living clay last {1}|r seconds, has {2} seconds cooldown."

let MANACOST = 10
let CASTTIME = 1.0

class WardAreaSpell extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos, int lvls)
        super(newAbilityId, lvls, true)
        this.presetManaCost(lvl -> MANACOST)
        this.presetCooldown(lvl -> COOLDOWN)
        this.setHeroAbility(true)
        this.setItemAbility(false)
        this.setRequiredLevel(0)
        this.presetCastRange(lvl -> 50)
        this.setLevelSkipRequirement(0)
        this.presetTargetTypes(Targettype.POINT)
        this.presetAreaofEffect(lvl -> SIGHT_RADIUS.toReal())
        this.presetOption(Option.VISIBLE, true)
        this.presetOption(Option.TARGETIMAGE, true)
        this.setHotkeyNormal(hotkey)
        this.setName(TOOLTIP_NORM)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOLTIP_NORM, lvl))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_BASE_EXT.format(WARD_DURATION.toString().substring(0, 3).color(COLOR_ORANGE), COOLDOWN.toString().substring(0, 2).color(COLOR_LIGHT_BLUE)))
        this.setTooltipLearn(makeToolTipLearn(TOOLTIP_NORM))
        this.setTooltipLearnExtended(TOOLTIP_BASE_EXT.format(WARD_DURATION.toString().color(COLOR_ORANGE).substring(0, 3), COOLDOWN.toString().color(COLOR_LIGHT_BLUE).substring(0, 2)))
        this.setIconNormal(ABILITY_ICON)
        this.setIconResearch(ABILITY_ICON)
        this.setIconTurnOff(ABILITY_ICON)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.presetFollowThroughTime(lvl -> CASTTIME)
        this.setAnimationNames("spell,throw")
        this.setBaseOrderID(1, "impale")

class ObserverWardAreaSpell extends WardAreaSpell
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos, int lvls)
        super(newAbilityId, hotkey, buttonPos, lvls)
        this.presetCooldown(lvl -> COOLDOWN - lvl * 10)
        this.presetTooltipNormal(lvl -> makeToolTipNormHero(hotkey, TOOLTIP_NORM, lvl))
        this.presetTooltipNormalExtended(lvl -> TOOLTIP_SUB_EXT.format(COLOR_ORANGE.toColorString()+(lvl + 1).toString(),
        (WARD_DURATION).toToolTipLightBlue(), (COOLDOWN - lvl * 10).toToolTipLightBlue()))
        this.setCheckDependencies(false)

class SpyWardAreaSpell extends WardAreaSpell
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos, int lvls)
        super(newAbilityId, hotkey, buttonPos, lvls)
        this.setCooldown(1, SPY_COOLDOWN)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP_NORM))
        this.setTooltipNormalExtended(1, TOOLTIP_SUB_EXT.format(COLOR_ORANGE.toColorString()+"4", COLOR_LIGHT_BLUE.toColorString()+WARD_DURATION.toString().substring(0, 3), SPY_COOLDOWN.toToolTipLightBlue()))

@compiletime function createWardAreaSpells()
    new WardAreaSpell(ABILITY_WARD_AREA, "R", new Pair(2, 1), 1)
    new ObserverWardAreaSpell(ABILITY_OBSERVER_WARD_AREA, "D", new Pair(2, 1), 3)
    new SpyWardAreaSpell(ABILITY_SPY_WARD_AREA, "R", new Pair(3, 1), 1)

function onCast(unit caster)

    // Create ward at target position.
    createUnit(caster.getOwner(), UNIT_LIVING_CLAY, EventData.getSpellTargetPos(), (270.0).asAngleDegrees())
        ..setTimedLife(WARD_DURATION)
        ..setAnimation("birth")

    // Exit if this is the base spell.
    if GetSpellAbilityId() == ABILITY_WARD_AREA
        return

    // Determine how many wards to place around the target pos.
    let wardNbr = GetSpellAbilityId() == ABILITY_OBSERVER_WARD_AREA
        ? caster.getAbilityLevel(ABILITY_OBSERVER_WARD_AREA)
        : 3

    // Place that many wards.
    for i = wardNbr downto 0

        // Get a random position around target pos.
        var pos = EventData.getSpellTargetPos()
        pos.x += GetRandomReal(-RANDOM_PLACEMENT_RANGE, RANDOM_PLACEMENT_RANGE)
        pos.y += GetRandomReal(-RANDOM_PLACEMENT_RANGE, RANDOM_PLACEMENT_RANGE)

        // Create the ward.
        createUnit(caster.getOwner(), UNIT_LIVING_CLAY, pos, (270.0).asAngleDegrees())
            ..setTimedLife(WARD_DURATION)
            ..setAnimation("birth")

init
    EventListener.onCast(ABILITY_WARD_AREA) (unit caster) ->
        onCast(caster)
    EventListener.onCast(ABILITY_OBSERVER_WARD_AREA) (unit caster) ->
        onCast(caster)
    EventListener.onCast(ABILITY_SPY_WARD_AREA) (unit caster) ->
        onCast(caster)
