package BattleGlovesCritical

// Standard library imports:
import AbilityObjEditing
import DamageEvent
import HashMap
import ClosureEvents
import ClosureTimers
import ObjectIdGenerator
import ObjectIds

// Local imports:
import AbilityObjectCreationUtils
import LocalObjectIDs

constant CRITICAL_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
constant SPELLBOOK_ABILITY_ID = compiletime(createHiddenSpellbookWithAbilities(toRawCode(CRITICAL_ABILITY_ID)))
public constant BG_COOLDOWN = 6.
public constant BG_COOLDOWN_SKIP_PER_ATTACK = 1.
public constant MULTIPLIER = 1.6

@compiletime function createCriticalAbility()
    new AbilityDefinitionBladeMasterCriticalStrike(CRITICAL_ABILITY_ID)
    ..setItemAbility(false)
    ..setHeroAbility(false)
    ..presetDamageMultiplier(lvl -> MULTIPLIER)
    ..presetDamageBonus(lvl -> 0)
    ..presetChancetoCriticalStrike(lvl -> 100)
    ..presetChancetoEvade(lvl -> 0)
    ..presetCooldown(lvl -> 0)
    ..presetNeverMiss(lvl -> true)

class BattleGlovesInstance
    private unit wearer
    private real baseClock

    construct(unit wearer)
        this.wearer = wearer
        this.baseClock = 0

    function updateTick()
        this.baseClock += ANIMATION_PERIOD
        if this.baseClock >= BG_COOLDOWN and not wearer.hasAbility(SPELLBOOK_ABILITY_ID)
            wearer.addAbility(SPELLBOOK_ABILITY_ID)
            wearer.getOwner().setAbilityAvailable(SPELLBOOK_ABILITY_ID, false)

    function onEnemyAttackDamage()
        if wearer.hasAbility(SPELLBOOK_ABILITY_ID)
            wearer.removeAbility(SPELLBOOK_ABILITY_ID)
            this.baseClock = 0
        else
            this.baseClock += BG_COOLDOWN_SKIP_PER_ATTACK

    ondestroy
        wearer.removeAbility(SPELLBOOK_ABILITY_ID)

IterableMap<unit, BattleGlovesInstance> instances = new IterableMap<unit, BattleGlovesInstance>()

function onPickupGloves(unit u)
    if not instances.has(u)
        instances.put(u, new BattleGlovesInstance(u))

function onDropGloves(unit u)
    if instances.has(u)
        destroy instances.getAndRemove(u)

init
    DamageEvent.addListener() () ->
    //EventListener.add(EVENT_UNIT_DAMAGED) ->
        if DamageEvent.getType() == DamageType.ATTACK
        //if getDamageType() == DamageType.ATTACK
            let victim = DamageEvent.getTarget()
            let attacker = DamageEvent.getSource()
            if instances.has(attacker) and not victim.isType(UNIT_TYPE_STRUCTURE) and not victim.getOwner().isAllyOf(attacker.getOwner())
                instances.get(attacker).onEnemyAttackDamage()

    doPeriodically(ANIMATION_PERIOD) cb ->
        for i in instances
            instances.get(i).updateTick()

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_BATTLE_GLOVES
            onPickupGloves(GetManipulatingUnit())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_BATTLE_GLOVES
            onDropGloves(GetManipulatingUnit())
