package Shapeshift

// Standard library imports:
import Assets
import ClosureEvents
import ClosureTimers
import LastOrder
import LinkedList

// Local imports:
import ID
import Transformation

// Used only to order transformation registry.
// TODO: Order transformations globally.
import Skins

// The list of forms that the shapeshifter can assume.
let FORM_IDS = asList(
    UNIT_SHAPESHIFTER_WOLF,
    UNIT_SHAPESHIFTER_BEAR,
    UNIT_SHAPESHIFTER_PANTHER,
    UNIT_SHAPESHIFTER_TIGER
)

// The list of abilities used to transform.
let DUMMY_IDS = asList(
    SPELL_TRANSFORM_WOLF,
    SPELL_TRANSFORM_BEAR,
    SPELL_TRANSFORM_TIGER,
    SPELL_TRANSFORM_PANTHER
)

// The unit currently being transformed.
// TODO: Remove this if forces support closures.
unit originGlobal

public let ABILITY_ID_VICIOUS_STRIKES_ORB = 'A0GG'
public let ABILITY_ID_VICIOUS_STRIKES_ACTIVE = 'A0GH'
public let ABILITY_ID_BEARS_BULWARK = 'A0GE'
public let ABILITY_ID_WOLFS_HUNGER = 'A0GD'
public let ABILITY_ID_PROWL = 'A0GF'

@compiletime function registerTransformations()
    for originID in FORM_IDS
        for targetID in FORM_IDS
            if originID != targetID
                registerTransformation(originID, targetID)

function onCast(unit origin, int targetID)
    // Reissue the previous order afterwards.
    nullTimer() ->
        // Fetch the previous order.
        let previousOrder = origin.getLastOrder().prev

        // Compute the type of the previous order.
        let orderType = previousOrder == null
            ? null
            : previousOrder.orderType

        // Issue the previous order if it is still applicable.
        if orderType == OrderType.POINT or orderType == OrderType.TARGET
            previousOrder.issue()

    // Transform the unit.
    transformUnit(origin, targetID)

    // Mask the transformation with an effect.
    origin.addEffect(Abilities.polyMorphDoneGround, "origin")
        ..setScale(2)
        ..destr()

    // Capture the current unit.
    // TODO: Remove this if forces support closures.
    originGlobal = origin

    // Enumerate over allies of the unit in case shared control was used.
    let allies = GetPlayersAllies(origin.getOwner())

    // Exit the spellbook that contains the ability for the appropriate player.
    allies..forEach() ->
        // Fetch the enumerated ally.
        let ally = GetEnumPlayer()

        // Verify that the ally has the unit selected.
        if ENUM_GROUP..enumUnitsSelected(ally, null).contains(originGlobal)
            // Exit the spellbook for that player.
            ForceUICancelBJ(ally)

    // Deallocate the force once it is no longer needed.
    allies.destr()

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        // Look up the corresponding unit for the ability being cast.
        let index = DUMMY_IDS.indexOf(EventData.getSpellAbilityId())

        // Execute the appropriate transformation if there is a match.
        if index != -1
            onCast(
                EventData.getSpellAbilityUnit(),
                FORM_IDS.get(index)
            )

    // Register the transformations at runtime.
    registerTransformations()
