package PetReleasing

// Standard library imports:
import ClosureEvents
import ChannelAbilityPreset
import ClosureTimers
import LinkedList

// Local imports:
import ColorUtils
import LocalObjectIDs
import LocalAssets
import Pets
import StringExtensions
import Tribe
import ToolTipsUtils
import PlayerExtensions
import GeometryUtils
import OrderIds
import PetUpgradeHandler
import TextTagUtils

let RELEASE_WANDER_DISTANCE = 2000.
let TRANSPARENCY_NUM_LOOPS = 51
let TRANSPARENCY_PER_LOOP = 5
let LOOP_FREQUENCY = .1

let releaseTextList = asList("Farewell", "Godspeed", "May we meet again", "Live freely", "Adieu")
let RELEASE_TOOLTIP_EXT = "Releases your pet back into the wild allowing you to tame another. The released pet will run away never to be seen again."
let WARNING_RELEASE = "Resources spent on pet's upgrades won't be refunded.".color(SPECIAL_COLOR)

function createReleasePetAbility(int newAbilId) returns ChannelAbilityPreset
    return new ChannelAbilityPreset(newAbilId, 1, true)
        ..setAnimationNames("spell,throw")
        ..setIconNormal(LocalIcons.bTNReleasePet)
        ..setArtCaster("")
        ..setCasterAttachmentPoint("")
        ..setCooldown(1, 5.0)
        ..setFollowThroughTime(1, 1.0)
        ..setName("Release Pet")
        ..setTooltipNormalExtended(1, RELEASE_TOOLTIP_EXT + "\n\n" + WARNING_RELEASE)
        ..setRequirements(UPGD_PET_TAMED_TRUE.toRawCode())
        ..setEditorSuffix("(Wurst)")

@compiletime function createBaseReleaseSpell() returns ChannelAbilityPreset
    return createReleasePetAbility(ABILITY_PET_RELEASE)
    ..presetButtonPosNormal(1, 0)
    ..setHotkeyNormal("W")
    ..setTooltipNormal(1, makeToolTipNorm("W", "Release Your Pet"))


public function releasePet(unit caster, unit pet, player originalOwner)
    // Deregister the pet.
    originalOwner.removePet()

    // Using upgrade to enable/disable release ability
    originalOwner.setTechResearched(UPGD_PET_TAMED_TRUE, 0)
    originalOwner.setTechResearched(UPGD_PET_TAMED_FALSE, 1)

    // Prevent anything from interacting with the pet while it is despawning.
    pet.addAbility(AbilityIds.locust)

    // Transfer the ownership of the pet.
    pet.setOwner(Player(PLAYER_NEUTRAL_PASSIVE), true)

    // Start reducing transparency of pet.
    doPeriodicallyCounted(LOOP_FREQUENCY, TRANSPARENCY_NUM_LOOPS) (CallbackCounted cb) ->
        pet.setVertexColor(255, 255, 255, 255 - ((TRANSPARENCY_NUM_LOOPS - cb.getCount()) * TRANSPARENCY_PER_LOOP))
        // Once the timer is finished remove the pet.
        if cb.isLast()
            pet.remove()

    // Move the pet to a random point away from it.
    pet.issuePointOrderById(OrderIds.smart, pet.getPos().polarOffset(randomAngle(), RELEASE_WANDER_DISTANCE))

    // Texttag saying goodbye to the pet
    releaseTextList.shuffle()
    let text = "{0} {1}!".format(releaseTextList.getFirst(), pet.getName())
    createTeamFadingTextTag(caster, caster.getPos3Real(), text, color(0, 197, 255))

    // Notify the owning tribe.
    let tribe = Tribe.ofPlayer(originalOwner)
    if tribe != null
        tribe.getMembers().forEach() (player member) ->
            member.print(pet.getName().color(HIGHLIGHT_COLOR) + " has been released into the wild...".color(GENERAL_COLOR), 5)

function onRelease(unit caster)
    // Look up the pet
    let originalOwner = caster.getOwner()
    let pet = originalOwner.getPet()

    petUpgradeHandlerInstance.get(pet).onRelease()
    releasePet(caster, pet, originalOwner)


init
    EventListener.onCast(ABILITY_PET_RELEASE, (unit caster) -> onRelease(caster))
